<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客绪论</title>
      <link href="/2023/09/10/%E7%BD%91%E7%AB%99%E7%AE%80%E8%BF%B0/"/>
      <url>/2023/09/10/%E7%BD%91%E7%AB%99%E7%AE%80%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h3><ol><li>本站建站组件：Hexo+butterfly+GitHub建站；</li><li>本站目的：2022年9月至今，在北京的工作生活随记；</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端环境搭建</title>
      <link href="/2023/08/20/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
      <url>/2023/08/20/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Part1:node安装</p>]]></content>
      
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端环境搭建</title>
      <link href="/2023/08/17/Java%E5%90%8E%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
      <url>/2023/08/17/Java%E5%90%8E%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX</title>
      <link href="/2023/07/10/AJAX/"/>
      <url>/2023/07/10/AJAX/</url>
      
        <content type="html"><![CDATA[<h1 id="AJAX（Asynchronous-Javascript-And-Xml）"><a href="#AJAX（Asynchronous-Javascript-And-Xml）" class="headerlink" title="AJAX（Asynchronous Javascript And Xml）"></a>AJAX（Asynchronous Javascript And Xml）</h1><h2 id="传统请求及缺点"><a href="#传统请求及缺点" class="headerlink" title="传统请求及缺点"></a>传统请求及缺点</h2><ul><li>传统的请求都有哪些？<ul><li>直接在浏览器地址栏上输入URL。</li><li>点击超链接</li><li>提交form表单</li><li>使用JS代码发送请求<ul><li>window.open(url)</li><li>document.location.href &#x3D; url</li><li>window.location.href &#x3D; url</li><li>….</li></ul></li></ul></li><li><h2 id="传统请求存在的问题-页面全部刷新导致了用户的体验较差。-传统的请求导致用户的体验有空白期。（用户的体验是不连贯的）"><a href="#传统请求存在的问题-页面全部刷新导致了用户的体验较差。-传统的请求导致用户的体验有空白期。（用户的体验是不连贯的）" class="headerlink" title="传统请求存在的问题- 页面全部刷新导致了用户的体验较差。- 传统的请求导致用户的体验有空白期。（用户的体验是不连贯的）"></a>传统请求存在的问题<br>- 页面全部刷新导致了用户的体验较差。<br>- 传统的请求导致用户的体验有空白期。（用户的体验是不连贯的）</h2></li></ul><h2 id="AJAX概述"><a href="#AJAX概述" class="headerlink" title="AJAX概述"></a>AJAX概述</h2><ul><li>AJAX不能称为一种技术，它是多种技术的综合产物。</li><li>AJAX可以让浏览器发送一种特殊的请求，这种请求可以是：异步的。</li><li>什么是异步，什么是同步？<ul><li>假设有t1和t2线程，t1和t2线程并发，就是异步。</li><li>假设有t1和t2线程，t2在执行的时候，必须等待t1线程执行到某个位置之后t2才能执行，那么t2在等t1，显然他们是排队的，排队的就是同步。</li><li>AJAX是可以发送异步请求的。也就是说，在同一个浏览器页面当中，可以发送多个ajax请求，这些ajax请求之间不需要等待，是并发的。</li></ul></li><li>AJAX代码属于WEB前端的JS代码。和后端的java没有关系，后端也可以是php语言，也可以是C语言。</li><li>AJAX 应用程序可能使用 XML 来传输数据，但将数据作为纯文本或 JSON 文本传输也同样常见。</li><li>AJAX可以更新网页的部分，而不需要重新加载整个页面。（页面局部刷新）</li><li>AJAX可以做到在同一个网页中同时启动多个请求，类似于在同一个网页中启动“多线程”，一个“线程”一个“请求”。</li><li></li><li></li></ul><h2 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h2><ul><li>XMLHttpRequest对象是AJAX的核心对象，发送请求以及接收服务器数据的返回，全靠它了。</li><li>XMLHttpRequest对象，现代浏览器都是支持的，都内置了该对象。直接用即可。</li><li><h2 id="创建XMLHttpRequest对象"><a href="#创建XMLHttpRequest对象" class="headerlink" title="创建XMLHttpRequest对象"></a>创建XMLHttpRequest对象</h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br></pre></td></tr></table></figure><ul><li>XMLHttpRequest对象的方法</li></ul><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">abort()</td><td align="left">取消当前请求</td></tr><tr><td align="left">getAllResponseHeaders()</td><td align="left">返回头部信息</td></tr><tr><td align="left">getResponseHeader()</td><td align="left">返回特定的头部信息</td></tr><tr><td align="left">open(<em>method</em>, <em>url</em>, <em>async</em>, <em>user</em>, <em>psw</em>)</td><td align="left">规定请求method：请求类型 GET 或 POSTurl：文件位置async：true（异步）或 false（同步）user：可选的用户名称psw：可选的密码</td></tr><tr><td align="left">send()</td><td align="left">将请求发送到服务器，用于 GET 请求</td></tr><tr><td align="left">send(<em>string</em>)</td><td align="left">将请求发送到服务器，用于 POST 请求</td></tr><tr><td align="left">setRequestHeader()</td><td align="left">向要发送的报头添加标签&#x2F;值对</td></tr></tbody></table><ul><li>XMLHttpRequest对象的属性</li></ul><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onreadystatechange</td><td align="left">定义当 readyState 属性发生变化时被调用的函数</td></tr><tr><td align="left">readyState</td><td align="left">保存 XMLHttpRequest 的状态。0：请求未初始化   1：服务器连接已建立   2：请求已收到   3：正在处理请求   4：请求已完成且响应已就绪</td></tr><tr><td align="left">responseText</td><td align="left">以字符串返回响应数据</td></tr><tr><td align="left">responseXML</td><td align="left">以 XML 数据返回响应数据</td></tr><tr><td align="left">status</td><td align="left">返回请求的状态号200: “OK”403: “Forbidden”404: “Not Found”</td></tr><tr><td align="left">statusText</td><td align="left">返回状态文本（比如 “OK” 或 “Not Found”）</td></tr></tbody></table><h2 id="AJAX-GET请求"><a href="#AJAX-GET请求" class="headerlink" title="AJAX GET请求"></a>AJAX GET请求</h2><ul><li>发送AJAX get请求，前端代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;发送ajax get请求&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">        document.getElementById(&quot;btn&quot;).onclick = function () &#123;</span><br><span class="line">            //1. 创建AJAX核心对象</span><br><span class="line">            var xhr = new XMLHttpRequest();</span><br><span class="line">            //2. 注册回调函数</span><br><span class="line">            xhr.onreadystatechange = function()&#123;</span><br><span class="line">                if (this.readyState == 4) &#123;</span><br><span class="line">                    if (this.status == 200) &#123;</span><br><span class="line">                        // 通过XMLHttpRequest对象的responseText属性可以获取到服务器响应回来的内容。</span><br><span class="line">                        // 并且不管服务器响应回来的是什么，都以普通文本的形势获取。（服务器可能响应回来：普通文本、XML、JSON、HTML...）</span><br><span class="line">                        // innerHTML属性是javascript中的语法，和ajax的XMLHttpRequest对象无关。</span><br><span class="line">                        // innerHTML可以设置元素内部的HTML代码。（innerHTML可以将后面的内容当做一段HTML代码解释并执行）</span><br><span class="line">                        //document.getElementById(&quot;myspan&quot;).innerHTML = this.responseText</span><br><span class="line">                        document.getElementById(&quot;mydiv&quot;).innerHTML = this.responseText</span><br><span class="line">                        // innerText也不是AJAX中的，是javascript中的元素属性，和XMLHttpRequest无关。</span><br><span class="line">                        // innerText也是设置元素中的内容，但是即使后面是一段HTML代码，也是将其看做一个普通字符串设置进去。</span><br><span class="line">                        //document.getElementById(&quot;myspan&quot;).innerText = this.responseText</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        alert(this.status)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //3. 开启通道</span><br><span class="line">            xhr.open(&quot;GET&quot;, &quot;/ajax/ajaxrequest2&quot;, true)</span><br><span class="line">            //4. 发送请求</span><br><span class="line">            xhr.send()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;发送ajax get请求&lt;/button&gt;</span><br><span class="line">&lt;span id=&quot;myspan&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;div id=&quot;mydiv&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>发送AJAX get请求，后端代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line">import jakarta.servlet.ServletException;</span><br><span class="line">import jakarta.servlet.annotation.WebServlet;</span><br><span class="line">import jakarta.servlet.http.HttpServlet;</span><br><span class="line">import jakarta.servlet.http.HttpServletRequest;</span><br><span class="line">import jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @program: 代码</span><br><span class="line"> * @ClassName: AjaxRequest2Servlet</span><br><span class="line"> * @version: 1.0</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: bjpowernode</span><br><span class="line"> * @create: 2022-05-13 10:46</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;/ajaxrequest2&quot;)</span><br><span class="line">public class AjaxRequest2Servlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">            throws ServletException, IOException &#123;</span><br><span class="line">        // 设置响应的内容类型以及字符集</span><br><span class="line">        response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line">        // 获取响应流</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        // 响应</span><br><span class="line">        out.print(&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已存在！！！&lt;/font&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AJAX get请求如何提交数据呢？<ul><li>get请求提交数据是在“请求行”上提交，格式是：url?name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value….</li><li>其实这个get请求提交数据的格式是HTTP协议中规定的，遵循协议即可。</li></ul></li></ul><h2 id="AJAX-GET请求的缓存问题"><a href="#AJAX-GET请求的缓存问题" class="headerlink" title="AJAX GET请求的缓存问题"></a>AJAX GET请求的缓存问题</h2><ul><li>对于低版本的IE浏览器来说，AJAX的get请求可能会走缓存。存在缓存问题。对于现代的浏览器来说，大部分浏览器都已经不存在AJAX get缓存问题了。</li><li>什么是AJAX GET请求缓存问题呢？<ul><li>在HTTP协议中是这样规定get请求的：get请求会被缓存起来。</li><li>发送AJAX GET请求时，在同一个浏览器上，前后发送的AJAX请求路径一样的话，对于低版本的IE来说，第二次的AJAX GET请求会走缓存，不走服务器。</li></ul></li><li>POST请求在HTTP协议中规定的是：POST请求不会被浏览器缓存。</li><li>GET请求缓存的优缺点：<ul><li>优点：直接从浏览器缓存中获取资源，不需要从服务器上重新加载资源，速度较快，用户体验好。</li><li>缺点：无法实时获取最新的服务器资源。</li></ul></li><li>浏览器什么时候会走缓存？<ul><li>第一：是一个GET请求</li><li>第二：请求路径已经被浏览器缓存过了。第二次发送请求的时候，这个路径没有变化，会走浏览器缓存。</li></ul></li><li>如果是低版本的IE浏览器，怎么解决AJAX GET请求的缓存问题呢？<ul><li>可以在请求路径url后面添加一个时间戳，这个时间戳是随时变化的。所以每一次发送的请求路径都是不一样的，这样就不会走浏览器的缓存问题了。</li><li>可以采用时间戳：”url?t&#x3D;” + new Date().getTime()</li><li>或者可以通过随机数：”url?t&#x3D;” + Math.random()</li><li>也可以随机数+时间戳….</li></ul></li></ul><h2 id="AJAX-POST请求"><a href="#AJAX-POST请求" class="headerlink" title="AJAX POST请求"></a>AJAX POST请求</h2><ul><li>AJAX POST请求和GET请求的代码区别在哪里？就是前端代码有区别。后端代码没有区别。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 4. 发送AJAX POST请求</span><br><span class="line">xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;) // 设置请求头的内容类型。模拟form表单提交数据。</span><br><span class="line">// 获取表单中的数据</span><br><span class="line">var username = document.getElementById(&quot;username&quot;).value;</span><br><span class="line">var password = document.getElementById(&quot;password&quot;).value;</span><br><span class="line">// send函数中的参数就是发送的数据，这个数据在“请求体”当中发送。</span><br><span class="line">xhr.send(&quot;username=&quot;+username+&quot;&amp;password=&quot;+password)</span><br></pre></td></tr></table></figure><ul><li>实现一个案例：使用AJAX POST请求实现用户注册的时候，用户名是否可用。（验证用户名是否可以注册）实现步骤如下：<ul><li>在前端，用户输入用户名之后，失去焦点事件blur发生，然后发送AJAX POST请求，提交用户名</li><li>在后端，接收到用户名，连接数据库，根据用户名去表中搜索</li><li>如果用户名已存在<ul><li>后端响应消息：对不起，用户名已存在（在前端页面以红色字体展示）</li></ul></li><li>如果用户名不存在<ul><li>后端响应消息：用户名可以使用（在前端页面以绿色字体展示）</li></ul></li></ul></li><li>实现一个案例：用户点击按钮之后，发送AJAX请求，显示学生列表。<ul><li>在后端java程序中拼接HTML代码，然后将HTML代码直接响应到浏览器客户端。这种方式不好，不应该在java代码中编写HTML代码，能否在java程序中直接向前端响应数据？可以，可以在后端拼接JSON格式的字符串，或者XML格式的字符串，将这个字符串发送给前端，前端解析即可。</li></ul></li></ul><h2 id="基于JSON的数据交换"><a href="#基于JSON的数据交换" class="headerlink" title="基于JSON的数据交换"></a>基于JSON的数据交换</h2><ul><li>在WEB前端中，如何将一个json格式的字符串转换成json对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var jsonStr = &quot;&#123;\&quot;username\&quot; : \&quot;zhangsan\&quot;, \&quot;password\&quot; : \&quot;1233344\&quot;&#125;&quot;</span><br><span class="line">var jsonObj = JSON.parse(jsonStr)</span><br><span class="line">console.log(jsonObj.username)</span><br><span class="line">console.log(jsonObj.password)</span><br></pre></td></tr></table></figure><ul><li>在后端拼接JSON格式的字符串，响应给前端的浏览器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">json.append(&quot;[&quot;);</span><br><span class="line">while (rs.next()) &#123;</span><br><span class="line">    // 获取每个学生的信息</span><br><span class="line">    String name = rs.getString(&quot;name&quot;);</span><br><span class="line">    String age = rs.getString(&quot;age&quot;);</span><br><span class="line">    String addr = rs.getString(&quot;addr&quot;);</span><br><span class="line">    // 拼接json格式的字符串</span><br><span class="line">    // &#123;&quot;name&quot;:&quot;   王五    &quot;,&quot;age&quot;:    20      ,&quot;addr&quot;:&quot;      北京大兴区     &quot;&#125;,</span><br><span class="line">    json.append(&quot;&#123;\&quot;name\&quot;:\&quot;&quot;);</span><br><span class="line">    json.append(name);</span><br><span class="line">    json.append(&quot;\&quot;,\&quot;age\&quot;:&quot;);</span><br><span class="line">    json.append(age);</span><br><span class="line">    json.append(&quot;,\&quot;addr\&quot;:\&quot;&quot;);</span><br><span class="line">    json.append(addr);</span><br><span class="line">    json.append(&quot;\&quot;&#125;,&quot;);</span><br><span class="line">&#125;</span><br><span class="line">jsonStr = json.substring(0, json.length() - 1) + &quot;]&quot;;</span><br></pre></td></tr></table></figure><ul><li>拼接JSON格式的字符串太痛苦，可以使用阿里巴巴的fastjson组件，它可以将java对象转换成json格式的字符串</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; studentList = new ArrayList&lt;&gt;();</span><br><span class="line">while (rs.next()) &#123;</span><br><span class="line">    // 取出数据</span><br><span class="line">    String name = rs.getString(&quot;name&quot;);</span><br><span class="line">    int age = rs.getInt(&quot;age&quot;);</span><br><span class="line">    String addr = rs.getString(&quot;addr&quot;);</span><br><span class="line">    // 将以上数据封装成Student对象</span><br><span class="line">    Student s = new Student(name, age, addr);</span><br><span class="line">    // 将Student对象放到List集合</span><br><span class="line">    studentList.add(s);</span><br><span class="line">&#125;</span><br><span class="line">// 将List集合转换成json字符串</span><br><span class="line">jsonStr = JSON.toJSONString(studentList);</span><br></pre></td></tr></table></figure><p>注意：使用fastjson需要引入fastjson-1.2.2.jar</p><h2 id="基于XML的数据交换"><a href="#基于XML的数据交换" class="headerlink" title="基于XML的数据交换"></a>基于XML的数据交换</h2><ul><li>注意：如果服务器端响应XML的话，响应的内容类型需要写成：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(&quot;text/xml;charset=UTF-8&quot;);</span><br></pre></td></tr></table></figure><ul><li>xml和JSON都是常用的数据交换格式<ul><li>XML体积大，解析麻烦。较少用。</li><li>JSON体积小，解析简单，较常用。</li></ul></li><li>基于XML的数据交换，前端代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用XML完成数据交换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.创建XMLHTTPRequest对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2.注册回调函数</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 服务器端响应了一个XML字符串，这里怎么接收呢？</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 使用XMLHTTPRequest对象的responseXML属性，接收返回之后，可以自动封装成document对象（文档对象）</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> xmlDoc = <span class="variable language_">this</span>.<span class="property">responseXML</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//console.log(xmlDoc)</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 获取所有的&lt;student&gt;元素，返回了多个对象，应该是数组。</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> students = xmlDoc.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;student&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//console.log(students[0].nodeName)</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; students.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">var</span> student = students[i]</span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">// 获取&lt;student&gt;元素下的所有子元素</span></span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">var</span> nameOrAge = student.<span class="property">childNodes</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nameOrAge.<span class="property">length</span>; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">var</span> node = nameOrAge[j]</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">if</span> (node.<span class="property">nodeName</span> == <span class="string">&quot;name&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                    <span class="comment">//console.log(&quot;name = &quot; + node.textContent)</span></span></span><br><span class="line"><span class="language-javascript">                                    html += <span class="string">&quot;&lt;td&gt;&quot;</span>+node.<span class="property">textContent</span>+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">if</span> (node.<span class="property">nodeName</span> == <span class="string">&quot;age&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                    <span class="comment">//console.log(&quot;age = &quot; + node.textContent)</span></span></span><br><span class="line"><span class="language-javascript">                                    html += <span class="string">&quot;&lt;td&gt;&quot;</span>+node.<span class="property">textContent</span>+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;stutbody&quot;</span>).<span class="property">innerHTML</span> = html</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">status</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3.开启通道</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest6?t=&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(), <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4.发送请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>显示学生列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;stutbody&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;1&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;zhangsan&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;20&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;</span></span><br><span class="line"><span class="comment">    &lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;2&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;lisi&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;22&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>基于XML的数据交换，后端java程序：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest6Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 服务器端返回XML字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-15 11:48</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxRequest6Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 注意：响应的内容类型是XML。</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/xml;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        &lt;students&gt;</span></span><br><span class="line"><span class="comment">            &lt;student&gt;</span></span><br><span class="line"><span class="comment">                &lt;name&gt;zhangsan&lt;/name&gt;</span></span><br><span class="line"><span class="comment">                &lt;age&gt;20&lt;/age&gt;</span></span><br><span class="line"><span class="comment">            &lt;/student&gt;</span></span><br><span class="line"><span class="comment">            &lt;student&gt;</span></span><br><span class="line"><span class="comment">                &lt;name&gt;lisi&lt;/name&gt;</span></span><br><span class="line"><span class="comment">                &lt;age&gt;22&lt;/age&gt;</span></span><br><span class="line"><span class="comment">            &lt;/student&gt;</span></span><br><span class="line"><span class="comment">        &lt;/students&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;students&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;name&gt;zhangsan&lt;/name&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;age&gt;20&lt;/age&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;name&gt;lisi&lt;/name&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;age&gt;22&lt;/age&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/students&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.print(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AJAX乱码问题"><a href="#AJAX乱码问题" class="headerlink" title="AJAX乱码问题"></a>AJAX乱码问题</h2><ul><li>测试内容：<ul><li>发送ajax get请求<ul><li>发送数据到服务器，服务器获取的数据是否乱码？</li><li>服务器响应给前端的中文，会不会乱码？</li></ul></li><li>发送ajax post请求<ul><li>发送数据到服务器，服务器获取的数据是否乱码？</li><li>服务器响应给前端的中文，会不会乱码？</li></ul></li></ul></li><li>包括还要测试tomcat服务器的版本：<ul><li>tomcat10和tomcat9都要进行测试。</li></ul></li><li>测试结果：<ul><li>对于tomcat10来说，关于字符集，我们程序员不需要干涉，不会出现乱码。</li><li>对于tomcat9来说呢？<ul><li>响应中文的时候，会出现乱码，怎么解决？</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">  - </span><br></pre></td></tr></table></figure><p>发送ajax post请求的时候，发送给服务器的数据，服务器接收之后乱码，怎么解决？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="AJAX的异步与同步"><a href="#AJAX的异步与同步" class="headerlink" title="AJAX的异步与同步"></a>AJAX的异步与同步</h2><ul><li>什么是异步？什么是同步？<ul><li>ajax请求1和ajax请求2，同时并发，谁也不用等谁，这就是异步。（a不等b，b也不等a）</li><li>如果ajax请求1在发送的时候需要等待ajax请求2结束之后才能发送，那么这就是同步。（a等待b，或者b等待a，只要发生等待，就是同步。）</li></ul></li><li>异步和同步在代码上如何实现？</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设这个是ajax请求1</span></span><br><span class="line"><span class="comment">// 如果第三个参数是false：这个就表示“ajax请求1”不支持异步，也就是说ajax请求1发送之后，会影响其他ajax请求的发送，只有当我这个请求结束之后，你们其他的ajax请求才能发送。</span></span><br><span class="line"><span class="comment">// false表示，不支持异步。我这个请求发了之后，你们其他的请求都要靠边站。都等着。你们别动呢，等我结束了你们再说。</span></span><br><span class="line">xhr1.<span class="title function_">open</span>(<span class="string">&quot;请求方式&quot;</span>, <span class="string">&quot;URL&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">xhr1.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设这个是ajax请求2</span></span><br><span class="line"><span class="comment">// 如果第三个参数是true：这个就表示“ajax请求2”支持异步请求，也就是说ajax请求2发送之后，不影响其他ajax请求的发送。</span></span><br><span class="line">xhr2.<span class="title function_">open</span>(<span class="string">&quot;请求方式&quot;</span>, <span class="string">&quot;URL&quot;</span>, <span class="literal">true</span>) </span><br><span class="line">xhr2.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure><ul><li>什么情况下用同步？（大部分情况下我们都是使用ajax异步方式，同步很少用。）<ul><li>举一个例子<ul><li>用户注册<ul><li>用户名需要发送ajax请求进行校验</li><li>邮箱地址也需要发送ajax请求校验</li><li>其他的也可能需要发送ajax请求。。。</li><li>并且最终注册按钮的时候，也是发送ajax请求进行注册。</li><li>那么显然，注册的Ajax请求和校验的ajax请求不能异步，必须等待所有的校验ajax请求结束之后，注册的ajax请求才能发。</li></ul></li></ul></li></ul></li></ul><h2 id="AJAX代码封装"><a href="#AJAX代码封装" class="headerlink" title="AJAX代码封装"></a>AJAX代码封装</h2><ul><li>AJAX请求相关的代码都是类似的，有很多重复的代码，这些重复的代码能不能不写，能不能封装一个工具类。要发送ajax请求的话，就直接调用这个工具类中的相关函数即可。</li><li>接下来，手动封装一个工具类，这个工具类我们可以把它看做是一个JS的库。我们把这个JS库起一个名字，叫做jQuery。（我这里封装的jQuery只是一个前端的库，和后端的java没有关系，只是为了方便web前端代码的编写，提高WEB前端的开发效率）</li><li>手动开发jQuery，源代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jQuery</span>(<span class="params">selector</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (selector.<span class="title function_">charAt</span>(<span class="number">0</span>) == <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">            domObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(selector.<span class="title function_">substring</span>(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">jQuery</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onload</span> = selector</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">html</span> = <span class="keyword">function</span>(<span class="params">htmlStr</span>)&#123;</span><br><span class="line">        domObj.<span class="property">innerHTML</span> = htmlStr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">click</span> = <span class="keyword">function</span>(<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onclick</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">focus</span> = <span class="keyword">function</span> (<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onfocus</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">blur</span> = <span class="keyword">function</span>(<span class="params">fun</span>) &#123;</span><br><span class="line">        domObj.<span class="property">onblur</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">change</span> = <span class="keyword">function</span> (<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onchange</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> domObj.<span class="property">value</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            domObj.<span class="property">value</span> = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的方法，发送ajax请求</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分析：使用ajax函数发送ajax请求的时候，需要程序员给我们传过来什么？</span></span><br><span class="line"><span class="comment">     *      请求的方式(type)：GET/POST</span></span><br><span class="line"><span class="comment">     *      请求的URL(url)：url</span></span><br><span class="line"><span class="comment">     *      请求时提交的数据(data)：data</span></span><br><span class="line"><span class="comment">     *      请求时发送异步请求还是同步请求(async)：true表示异步，false表示同步。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jQuery.<span class="property">ajax</span> = <span class="keyword">function</span>(<span class="params">jsonArgs</span>)&#123;</span><br><span class="line">        <span class="comment">// 1.</span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="comment">// 2.</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// 我们这个工具类在封装的时候，先不考虑那么多，假设服务器返回的都是json格式的字符串。</span></span><br><span class="line">                    <span class="keyword">var</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>)</span><br><span class="line">                    <span class="comment">// 调用函数</span></span><br><span class="line">                    jsonArgs.<span class="title function_">success</span>(jsonObj)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.<span class="property">type</span>.<span class="title function_">toUpperCase</span>() == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 3.</span></span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, jsonArgs.<span class="property">url</span>, jsonArgs.<span class="property">async</span>)</span><br><span class="line">            <span class="comment">// 4.</span></span><br><span class="line">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">            xhr.<span class="title function_">send</span>(jsonArgs.<span class="property">data</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.<span class="property">type</span>.<span class="title function_">toUpperCase</span>() == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, jsonArgs.<span class="property">url</span> + <span class="string">&quot;?&quot;</span> + jsonArgs.<span class="property">data</span>, jsonArgs.<span class="property">async</span>)</span><br><span class="line">            xhr.<span class="title function_">send</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ = jQuery</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里有个细节，执行这个目的是为了让静态方法ajax生效。</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">jQuery</span>()</span><br></pre></td></tr></table></figure><ul><li>使用以上库，怎么用？</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/ajax/js/jQuery-1.0.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                type : <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                url : <span class="string">&quot;/ajax/ajaxrequest11&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                data : <span class="string">&quot;username=&quot;</span> + $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>(),</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">async</span> : <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                success : <span class="keyword">function</span>(<span class="params">json</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">html</span>(json.<span class="property">uname</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="AJAX实现省市联动"><a href="#AJAX实现省市联动" class="headerlink" title="AJAX实现省市联动"></a>AJAX实现省市联动</h2><ul><li>什么是省市联动？<ul><li>在网页上，选择对应的省份之后，动态的关联出该省份对应的市。选择对应的市之后，动态的关联出该市对应的区。（首先要清楚需求）</li></ul></li><li><h2 id="进行数据库表的设计"><a href="#进行数据库表的设计" class="headerlink" title="进行数据库表的设计"></a>进行数据库表的设计</h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">t_area （区域表）</span><br><span class="line">id(PK-自增)  codenamepcode</span><br><span class="line">---------------------------------------------</span><br><span class="line">1001 河北省null</span><br><span class="line">2002 河南省null</span><br><span class="line">3003 石家庄    001</span><br><span class="line">4004 邯郸 001</span><br><span class="line">5005 郑州 002</span><br><span class="line">6006 洛阳 002</span><br><span class="line">7007 丛台区    004  </span><br><span class="line"></span><br><span class="line">将全国所有的省、市、区、县等信息都存储到一张表当中。</span><br><span class="line">采用的存储方式实际上是code pcode形势。</span><br></pre></td></tr></table></figure><ul><li>建表t_area，模拟好数据。</li><li>首先实现第一个功能：<ul><li>页面加载完毕之后，先把省份全部展现出来。</li></ul></li></ul><h2 id="AJAX跨域问题"><a href="#AJAX跨域问题" class="headerlink" title="AJAX跨域问题"></a>AJAX跨域问题</h2><h2 id="AJAX实现搜索联想-自动补全"><a href="#AJAX实现搜索联想-自动补全" class="headerlink" title="AJAX实现搜索联想 自动补全"></a>AJAX实现搜索联想 自动补全</h2><h2 id="附录：HTTP状态信息"><a href="#附录：HTTP状态信息" class="headerlink" title="附录：HTTP状态信息"></a>附录：HTTP状态信息</h2><h3 id="1xx-信息"><a href="#1xx-信息" class="headerlink" title="1xx: 信息"></a>1xx: 信息</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">100 Continue</td><td align="left">服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。</td></tr><tr><td align="left">101 Switching Protocols</td><td align="left">服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td></tr></tbody></table><h3 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx: 成功"></a>2xx: 成功</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">200 OK</td><td align="left">请求成功（其后是对GET和POST请求的应答文档。）</td></tr><tr><td align="left">201 Created</td><td align="left">请求被创建完成，同时新的资源被创建。</td></tr><tr><td align="left">202 Accepted</td><td align="left">供处理的请求已被接受，但是处理未完成。</td></tr><tr><td align="left">203 Non-authoritative Information</td><td align="left">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。</td></tr><tr><td align="left">204 No Content</td><td align="left">没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td></tr><tr><td align="left">205 Reset Content</td><td align="left">没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td></tr><tr><td align="left">206 Partial Content</td><td align="left">客户发送了一个带有Range头的GET请求，服务器完成了它。</td></tr></tbody></table><h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx: 重定向"></a>3xx: 重定向</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">300 Multiple Choices</td><td align="left">多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td></tr><tr><td align="left">301 Moved Permanently</td><td align="left">所请求的页面已经转移至新的url。</td></tr><tr><td align="left">302 Found</td><td align="left">所请求的页面已经临时转移至新的url。</td></tr><tr><td align="left">303 See Other</td><td align="left">所请求的页面可在别的url下被找到。</td></tr><tr><td align="left">304 Not Modified</td><td align="left">未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td></tr><tr><td align="left">305 Use Proxy</td><td align="left">客户请求的文档应该通过Location头所指明的代理服务器提取。</td></tr><tr><td align="left">306 <em>Unused</em></td><td align="left">此代码被用于前一版本。目前已不再使用，但是代码依然被保留。</td></tr><tr><td align="left">307 Temporary Redirect</td><td align="left">被请求的页面已经临时移至新的url。</td></tr></tbody></table><h3 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx: 客户端错误"></a>4xx: 客户端错误</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">400 Bad Request</td><td align="left">服务器未能理解请求。</td></tr><tr><td align="left">401 Unauthorized</td><td align="left">被请求的页面需要用户名和密码。</td></tr><tr><td align="left">402 Payment Required</td><td align="left">此代码尚无法使用。</td></tr><tr><td align="left">403 Forbidden</td><td align="left">对被请求页面的访问被禁止。</td></tr><tr><td align="left">404 Not Found</td><td align="left">服务器无法找到被请求的页面。</td></tr><tr><td align="left">405 Method Not Allowed</td><td align="left">请求中指定的方法不被允许。</td></tr><tr><td align="left">406 Not Acceptable</td><td align="left">服务器生成的响应无法被客户端所接受。</td></tr><tr><td align="left">407 Proxy Authentication Required</td><td align="left">用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td></tr><tr><td align="left">408 Request Timeout</td><td align="left">请求超出了服务器的等待时间。</td></tr><tr><td align="left">409 Conflict</td><td align="left">由于冲突，请求无法被完成。</td></tr><tr><td align="left">410 Gone</td><td align="left">被请求的页面不可用。</td></tr><tr><td align="left">411 Length Required</td><td align="left">“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td></tr><tr><td align="left">412 Precondition Failed</td><td align="left">请求中的前提条件被服务器评估为失败。</td></tr><tr><td align="left">413 Request Entity Too Large</td><td align="left">由于所请求的实体的太大，服务器不会接受请求。</td></tr><tr><td align="left">414 Request-url Too Long</td><td align="left">由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。</td></tr><tr><td align="left">415 Unsupported Media Type</td><td align="left">由于媒介类型不被支持，服务器不会接受请求。</td></tr><tr><td align="left">416</td><td align="left">服务器不能满足客户在请求中指定的Range头。</td></tr><tr><td align="left">417 Expectation Failed</td><td align="left"></td></tr></tbody></table><h3 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx: 服务器错误"></a>5xx: 服务器错误</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">500 Internal Server Error</td><td align="left">请求未完成。服务器遇到不可预知的情况。</td></tr><tr><td align="left">501 Not Implemented</td><td align="left">请求未完成。服务器不支持所请求的功能。</td></tr><tr><td align="left">502 Bad Gateway</td><td align="left">请求未完成。服务器从上游服务器收到一个无效的响应。</td></tr><tr><td align="left">503 Service Unavailable</td><td align="left">请求未完成。服务器临时过载或当机。</td></tr><tr><td align="left">504 Gateway Timeout</td><td align="left">网关超时。</td></tr><tr><td align="left">505 HTTP Version Not Supported</td><td align="left">服务器不支持请求中指明的HTTP协议版本。</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性</title>
      <link href="/2023/07/10/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2023/07/10/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2023/07/10/MySQL%20/"/>
      <url>/2023/07/10/MySQL%20/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> CodeClean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2023/07/10/Maven/"/>
      <url>/2023/07/10/Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><a href="https://www.bilibili.com/video/BV12q4y147e4?spm_id_from=333.337.search-card.all.click">尚硅谷2022maven</a></li><li>最好学完 Javaweb后来看</li><li>视频对应：[P1-P51]</li></ul><h1 id="chapter1-maven的概述"><a href="#chapter1-maven的概述" class="headerlink" title="chapter1 maven的概述"></a>chapter1 maven的概述</h1><h2 id="为什么要学习-maven-？"><a href="#为什么要学习-maven-？" class="headerlink" title="为什么要学习 maven ？"></a>为什么要学习 maven ？</h2><ul><li><strong>管理规模庞大的 jar 包，需要专门工具。</strong> </li><li><strong>脱离 IDE 环境执行构建操作，需要专门工具。</strong></li></ul><h2 id="什么是maven"><a href="#什么是maven" class="headerlink" title="什么是maven"></a>什么是maven</h2><p>Maven 是 Apache 软件基金会组织维护的一款专门为 Java 项目提供<strong>构建</strong>和<strong>依赖</strong>管理支持的工具。</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>Java 项目开发过程中，构建指的是使用<strong>『原材料生产产品』</strong>的过程。</p><ul><li><p>原材料 </p></li><li><p>Java 源代码 </p></li><li><p>基于 HTML 的 Thymeleaf 文件 </p></li><li><p>图片 </p></li><li><p>配置文件 </p></li><li><p>…… </p></li><li><p>产品 </p></li><li><p>一个可以在服务器上运行的项目</p></li><li><p><strong>构建过程包含的主要的环节：</strong> </p></li><li><p><strong>清理</strong>：删除上一次构建的结果，为下一次构建做好准备 </p></li><li><p><strong>编译</strong>：Java 源程序编译成 *.class 字节码文件 </p></li><li><p><strong>测试</strong>：运行提前准备好的测试程序 </p></li><li><p><strong>报告</strong>：针对刚才测试的结果生成一个全面的信息 </p></li><li><p><strong>打包</strong> </p></li><li><p>Java工程：jar包</p></li><li><p>Web工程：war包</p></li><li><p><strong>安装</strong>：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入 Maven 仓库 </p></li><li><p><strong>部署</strong> </p></li><li><p><strong>部署 jar 包</strong>：把一个 jar 包部署到 Nexus 私服服务器上 </p></li><li><p><strong>部署 war 包</strong>：借助相关 Maven 插件（例如 cargo），将 war 包部署到 Tomcat 服务器上</p></li></ul><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p><strong>如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说 A 依赖 B。</strong></p><ul><li><p>依赖管理中要解决的具体问题： </p></li><li><p>jar 包的下载：<strong>使用 Maven 之后，jar 包会从规范的远程仓库下载到本地</strong> </p></li><li><p>jar 包之间的依赖：通<strong>过依赖的传递性自动完成</strong> </p></li><li><p>jar 包之间的冲突：<strong>通过对依赖的配置进行调整，让某些jar包不会被导入</strong></p></li></ul><h3 id="maven的工作机制"><a href="#maven的工作机制" class="headerlink" title="maven的工作机制"></a>maven的工作机制</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905144229981.png" alt="img"></p><h1 id="chapter2-maven的安装与配置"><a href="#chapter2-maven的安装与配置" class="headerlink" title="chapter2 maven的安装与配置"></a>chapter2 maven的安装与配置</h1><h2 id="Maven核心程序解压与配置"><a href="#Maven核心程序解压与配置" class="headerlink" title="Maven核心程序解压与配置"></a>Maven核心程序解压与配置</h2><h3 id="1、Maven-官网地址"><a href="#1、Maven-官网地址" class="headerlink" title="1、Maven 官网地址"></a>1、Maven 官网地址</h3><p>首页：</p><p><a href="https://maven.apache.org/">Maven – Welcome to Apache Maven(opens new window)</a></p><p>下载页面：</p><p><a href="https://maven.apache.org/download.cgi">Maven – Download Apache Maven</a></p><p>下载链接：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905145134386.png" alt="img"></p><h3 id="2、解压Maven核心程序"><a href="#2、解压Maven核心程序" class="headerlink" title="2、解压Maven核心程序"></a>2、解压Maven核心程序</h3><p>核心程序压缩包：apache-maven-3.8.4-bin.zip，解压到<strong>非中文、没有空格</strong>的目录。例如：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905145348439.png" alt="img"></p><p>在解压目录中，我们需要着重关注 Maven 的核心配置文件：<strong>conf&#x2F;settings.xml</strong></p><h3 id="3、指定本地仓库"><a href="#3、指定本地仓库" class="headerlink" title="3、指定本地仓库"></a>3、指定本地仓库</h3><p>本地仓库默认值：用户目录&#x2F;.m2&#x2F;repository。所以建议将 Maven 的本地仓库放在其他盘符下。配置方式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">| The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">| Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\maven-repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本地仓库这个目录，我们手动创建一个空的目录即可。</p><p><strong>记住</strong>：一定要把 localRepository 标签<strong>从注释中拿出来</strong>。</p><p><strong>注意</strong>：本地仓库本身也需要使用一个<strong>非中文、没有空格</strong>的目录。</p><h3 id="4、配置阿里云提供的镜像仓库"><a href="#4、配置阿里云提供的镜像仓库" class="headerlink" title="4、配置阿里云提供的镜像仓库"></a>4、配置阿里云提供的镜像仓库</h3><p>Maven 下载 jar 包默认访问境外的中央仓库，而国外网站速度很慢。改成阿里云提供的镜像仓库，<strong>访问国内网站</strong>，可以让 Maven 下载 jar 包的时候速度更快。配置的方式是：</p><p><strong>①将原有的例子配置注释掉</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">  &lt;id&gt;maven-default-http-blocker&lt;/id&gt;</span></span><br><span class="line"><span class="comment">  &lt;mirrorOf&gt;external:http:*&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">  &lt;name&gt;Pseudo repository to mirror external repositories initially using HTTP.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">  &lt;url&gt;http://0.0.0.0/&lt;/url&gt;</span></span><br><span class="line"><span class="comment">  &lt;blocked&gt;true&lt;/blocked&gt;</span></span><br><span class="line"><span class="comment">&lt;/mirror&gt; --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>②加入我们的配置</strong></p><p><strong>将下面 mirror 标签整体复制到 settings.xml 文件的 mirrors 标签的内部</strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、配置-Maven-工程的基础-JDK-版本"><a href="#5、配置-Maven-工程的基础-JDK-版本" class="headerlink" title="5、配置 Maven 工程的基础 JDK 版本"></a>5、配置 Maven 工程的基础 JDK 版本</h3><p>如果按照默认配置运行，Java 工程使用的默认 JDK 版本是 1.5，而我们熟悉和常用的是 JDK 1.8 版本。修改配置的方式是：将 profile 标签整个复制到 settings.xml 文件的 profiles 标签内。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="检查环境变量"><a href="#检查环境变量" class="headerlink" title="检查环境变量"></a>检查环境变量</h2><h3 id="检查-JAVA-HOME-配置是否正确"><a href="#检查-JAVA-HOME-配置是否正确" class="headerlink" title="检查 JAVA_HOME 配置是否正确"></a>检查 JAVA_HOME 配置是否正确</h3><p>Maven 是一个用 Java 语言开发的程序，它必须基于 JDK 来运行，需要通过 JAVA_HOME 来找到 JDK 的安装位置。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905144551489.png" alt="img"></p><p>可以使用下面的命令验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;echo %JAVA_HOME%</span><br><span class="line">D:\software\Java</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;java -version</span><br><span class="line">java version &quot;1.8.0_141&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_141-b15)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="配置MAVEN-HOME"><a href="#配置MAVEN-HOME" class="headerlink" title="配置MAVEN_HOME"></a>配置MAVEN_HOME</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905144650622.png" alt="img"></p><ul><li><p>配置环境变量的规律： </p></li><li><p>XXX_HOME 通常指向的是 bin 目录的上一级 </p></li><li><p>PATH 指向的是 bin 目录</p></li></ul><h3 id="配置PATH"><a href="#配置PATH" class="headerlink" title="配置PATH"></a>配置PATH</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905144817110.png" alt="img"></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;mvn -v</span><br><span class="line">Apache Maven 3.8.4 (9b656c72d54e5bacbed989b64718c159fe39b537)</span><br><span class="line">Maven home: D:\software\apache-maven-3.8.4</span><br><span class="line">Java version: 1.8.0_141, vendor: Oracle Corporation, runtime: D:\software\Java\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: <span class="string">&quot;windows 10&quot;</span>, version: <span class="string">&quot;10.0&quot;</span>, <span class="built_in">arch</span>: <span class="string">&quot;amd64&quot;</span>, family: <span class="string">&quot;windows&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>环境变量检查完毕后，看第三章的 实验一，使用 maven 命令生成maven 工程</strong></li></ul><h1 id="chapter3-使用-Maven：命令行环境"><a href="#chapter3-使用-Maven：命令行环境" class="headerlink" title="chapter3 使用 Maven：命令行环境"></a>chapter3 使用 Maven：命令行环境</h1><ul><li>使用原始的dos窗口完成的Maven 工程的创建 </li><li>把握住重点，了解核心概念即可，然后命令跟着敲就行，没必要死机硬背</li></ul><h2 id="实验一：根据坐标创建-Maven-工程"><a href="#实验一：根据坐标创建-Maven-工程" class="headerlink" title="实验一：根据坐标创建 Maven 工程"></a>实验一：根据坐标创建 Maven 工程</h2><h3 id="1、Maven-核心概念：坐标"><a href="#1、Maven-核心概念：坐标" class="headerlink" title="1、Maven 核心概念：坐标"></a>1、Maven 核心概念：坐标</h3><p><strong>①Maven中的坐标</strong></p><ul><li><p><strong>向量的说明</strong> </p></li><li><p><strong>groupId</strong>：公司或组织的 id </p></li><li><p><strong>artifactId</strong>：一个项目或者是项目中的一个模块的 id </p></li><li><p><strong>version</strong>：版本号 </p></li><li><p><strong>三个向量的取值</strong> </p></li><li><p>groupId：公司或组织域名的倒序，通常也会加上项目名称 </p></li><li><p>例如：com.atguigu.maven</p></li><li><p>artifactId：模块的名称，将来作为 Maven 工程的工程名 </p></li><li><p>version：模块的版本号，根据自己的需要设定 </p></li><li><p>例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本 </p></li><li><p>例如：RELEASE 表示正式版本</p></li><li><p>举例： </p></li><li><p>groupId：com.atguigu.maven </p></li><li><p>artifactId：pro01-atguigu-maven </p></li><li><p>version：1.0-SNAPSHO</p></li></ul><p><strong>②坐标和仓库中 jar 包的存储路径之间的对应关系</strong></p><p>坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面坐标对应的 jar 包在 Maven 本地仓库中的位置：【<strong>一定要学会根据坐标到本地仓库中找到对应的 jar 包</strong>】</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Maven本地仓库根目录<span class="keyword">\javax</span><span class="keyword">\servlet</span><span class="keyword">\servlet</span>-api<span class="keyword">\2</span>.5<span class="keyword">\servlet</span>-api-2.5.jar</span><br></pre></td></tr></table></figure><h3 id="2、实验操作"><a href="#2、实验操作" class="headerlink" title="2、实验操作"></a>2、实验操作</h3><p>①<strong>创建目录作为后面操作的工作空间</strong></p><p>例如：D:\maven-workspace\space201026</p><p>此时我们已经有了三个目录，分别是：</p><ul><li>Maven 核心程序：中军大帐 </li><li>Maven 本地仓库：兵营 </li><li>本地工作空间：战场</li></ul><p><strong>②在工作空间目录下打开命令行窗口</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905150751884.png" alt="img"></p><p><strong>③使用命令生成Maven工程</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905150833943.png" alt="img"></p><p>运行 <strong>mvn archetype:generate</strong> 命令</p><p>下面根据提示操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 7:【直接回车，使用默认值】</span><br><span class="line"></span><br><span class="line">Define value for property &#x27;groupId&#x27;: com.atguigu.maven</span><br><span class="line"></span><br><span class="line">Define value for property &#x27;artifactId&#x27;: pro01-maven-java</span><br><span class="line"></span><br><span class="line">Define value for property &#x27;version&#x27; 1.0-SNAPSHOT: :【直接回车，使用默认值】</span><br><span class="line"></span><br><span class="line">Define value for property &#x27;package&#x27; com.atguigu.maven: :【直接回车，使用默认值】</span><br><span class="line"></span><br><span class="line">Confirm properties configuration: groupId: com.atguigu.maven artifactId: pro01-maven-java version: 1.0-SNAPSHOT package: com.atguigu.maven Y: :【直接回车，表示确认。如果前面有输入错误，想要重新输入，则输入 N 再回车。】</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905160220815.png" alt="img"></p><p><strong>④调整</strong></p><p><strong>Maven 默认生成的工程，对 junit 依赖的是较低的 3.8.1 版本，我们可以改成较适合的 4.12 版本。</strong></p><ul><li>打开工程下的 pom.xml 配置文件更改 </li><li><strong>自动生成的 App.java 和 AppTest.java 可以删除。</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖信息配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- dependencies复数标签：里面包含dependency单数标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- dependency单数标签：配置一个具体的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过坐标来依赖其他jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 依赖的范围 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>⑤自动生成的 pom.xml 解读</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当前Maven工程的坐标 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 当前Maven工程的打包方式，可选值有下面三种： --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- jar：表示这个工程是一个Java工程  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- war：表示这个工程是一个Web工程 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- pom：表示这个工程是“管理其他工程”的工程 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 工程构建过程中读取源码时使用的字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 当前工程所依赖的jar包 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用dependency配置一个具体的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 在dependency标签内使用具体的坐标依赖我们需要的一个jar包 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- scope标签配置依赖的范围 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、Maven核心概念：POM"><a href="#3、Maven核心概念：POM" class="headerlink" title="3、Maven核心概念：POM"></a>3、Maven核心概念：POM</h3><p><strong>①含义</strong></p><p>​POM：<strong>P</strong>roject <strong>O</strong>bject <strong>M</strong>odel，<strong>项目对象模型</strong>。和 POM 类似的是：DOM（Document Object Model），<strong>文档对象模型</strong>。它们都是模型化思想的具体体现。</p><p><strong>②模型化思想</strong></p><p>​POM 表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。</p><p><strong>③对应的配置文件</strong></p><p>​POM 理念集中体现在 Maven 工程根目录下 <strong>pom.xml</strong> 这个配置文件中。所以这个 pom.xml 配置文件就是 Maven 工程的核心配置文件。其实<strong>学习 Maven 就是学这个文件怎么配置，各个配置有什么用</strong>。</p><h3 id="4、Maven核心概念：约定的目录结构"><a href="#4、Maven核心概念：约定的目录结构" class="headerlink" title="4、Maven核心概念：约定的目录结构"></a>4、Maven核心概念：约定的目录结构</h3><p><strong>①各个目录的作用</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905151256306.png" alt="img"></p><ul><li><strong>另外还有一个 target 目录专门存放构建操作输出的结果。</strong></li></ul><p><strong>②约定目录结构的意义</strong></p><p>Maven 为了让构建过程能够尽可能自动化完成，所以必须约定目录结构的作用。例如：Maven 执行编译操作，必须先去 Java 源程序目录读取 Java 源代码，然后执行编译，最后把编译结果存放在 target 目录。</p><p><strong>③约定大于配置</strong></p><p>Maven 对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常方便。如果每次创建 Maven 工程后，还需要针对各个目录的位置进行详细的配置，那肯定非常麻烦。</p><p>目前开发领域的技术发展趋势就是：<strong>约定大于配置，配置大于编码</strong>。</p><h2 id="实验二：在-Maven-工程中编写代码"><a href="#实验二：在-Maven-工程中编写代码" class="headerlink" title="实验二：在 Maven 工程中编写代码"></a>实验二：在 Maven 工程中编写代码</h2><h3 id="1、主体程序"><a href="#1、主体程序" class="headerlink" title="1、主体程序"></a>1、主体程序</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905151529475.png" alt="img"></p><ul><li>主体程序指的是被测试的程序，同时也是将来在项目中真正要使用的程序。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.maven;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、测试程序"><a href="#2、测试程序" class="headerlink" title="2、测试程序"></a>2、测试程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.maven;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.maven.Calculator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态导入的效果是将Assert类中的静态资源导入当前类</span></span><br><span class="line"><span class="comment">// 这样一来，在当前类中就可以直接使用Assert类中的静态资源，不需要写类名</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSum</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建Calculator对象</span></span><br><span class="line"><span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用Calculator对象的方法，获取到程序运行实际的结果</span></span><br><span class="line"><span class="type">int</span> <span class="variable">actualResult</span> <span class="operator">=</span> calculator.sum(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.声明一个变量，表示程序运行期待的结果</span></span><br><span class="line"><span class="type">int</span> <span class="variable">expectedResult</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.使用断言来判断实际结果和期待结果是否一致</span></span><br><span class="line"><span class="comment">// 如果一致：测试通过，不会抛出异常</span></span><br><span class="line"><span class="comment">// 如果不一致：抛出异常，测试失败</span></span><br><span class="line">assertEquals(expectedResult, actualResult);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验三：执行Maven-的构建命令"><a href="#实验三：执行Maven-的构建命令" class="headerlink" title="实验三：执行Maven 的构建命令"></a>实验三：执行Maven 的构建命令</h2><h3 id="1、要求"><a href="#1、要求" class="headerlink" title="1、要求"></a>1、要求</h3><p>运行 Maven 中和构建操作相关的命令时，<strong>必须进入到 pom.xml 所在的目录</strong>。如果没有在 pom.xml 所在的目录运行 Maven 的构建命令，那么会看到下面的错误信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The goal you specified <span class="keyword">requires</span> a project to execute but there is no POM in <span class="built_in">this</span> directory</span><br></pre></td></tr></table></figure><p>mvn -v 命令和构建操作无关，只要正确配置了 PATH，在任何目录下执行都可以。</p><p>而<strong>构建相关的命令要在 pom.xml 所在目录下运行</strong>——操作哪个工程，就进入这个工程的 pom.xml 目录。</p><h3 id="2、清理操作"><a href="#2、清理操作" class="headerlink" title="2、清理操作"></a>2、清理操作</h3><p>mvn clean</p><p><strong>效果：删除 target 目录</strong></p><h3 id="3、编译操作"><a href="#3、编译操作" class="headerlink" title="3、编译操作"></a>3、编译操作</h3><p>主程序编译：mvn compile</p><p>测试程序编译：mvn test-compile</p><p>主体程序编译结果存放的目录：target&#x2F;classes</p><p>测试程序编译结果存放的目录：target&#x2F;test-classes</p><h3 id="4、测试操作"><a href="#4、测试操作" class="headerlink" title="4、测试操作"></a>4、测试操作</h3><p>mvn test</p><p>测试的报告存放的目录：target&#x2F;surefire-reports</p><h3 id="5、打包操作"><a href="#5、打包操作" class="headerlink" title="5、打包操作"></a>5、打包操作</h3><p>mvn package</p><p>打包的结果——jar 包，存放的目录：target  【<strong>jar包就是压缩包，存放的是主程序的字节码文件</strong>】</p><p>包名：<strong>artifactld  +  version</strong></p><h3 id="6、安装操作"><a href="#6、安装操作" class="headerlink" title="6、安装操作"></a>6、安装操作</h3><p>mvn install</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Installing D:\maven-workspace\space201026\pro01-maven-java\target\pro01-maven-java-1.0-SNAPSHOT.jar to D:\maven-rep1026\com\atguigu\maven\pro01-maven-java\1.0-SNAPSHOT\pro01-maven-java-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] Installing D:\maven-workspace\space201026\pro01-maven-java\pom.xml to D:\maven-rep1026\com\atguigu\maven\pro01-maven-java\1.0-SNAPSHOT\pro01-maven-java-1.0-SNAPSHOT.pom</span><br></pre></td></tr></table></figure><ul><li><strong>安装的效果是将本地构建过程中生成的 jar 包存入 Maven 本地仓库。这个 jar 包在 Maven 仓库中的路径是根据它的坐标生成的。</strong></li></ul><p>坐标信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Maven 仓库中生成的路径如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\maven-rep1026\com\atguigu\maven\pro01-maven-java\1.0-SNAPSHOT\pro01-maven-java-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>另外，<strong>安装操作还会将 pom.xml 文件转换为 XXX.pom 文件一起存入本地仓库</strong>。所以我们在 Maven 的本地仓库中想看一个 jar 包原始的 pom.xml 文件时，<strong>查看对应 XXX.pom 文件即可</strong>，它们是名<strong>字发生了改变，本质上是同一个文件</strong>。</p><h2 id="实验四：创建-Maven-版的-Web-工程"><a href="#实验四：创建-Maven-版的-Web-工程" class="headerlink" title="实验四：创建 Maven 版的 Web 工程"></a>实验四：创建 Maven 版的 Web 工程</h2><ul><li>idea里面结构里面都是有的</li><li><strong>粘贴代码时，注意代码的格式</strong></li></ul><h3 id="1、说明"><a href="#1、说明" class="headerlink" title="1、说明"></a>1、说明</h3><p>使用 mvn archetype:generate  命令生成 Web 工程时，需要使用一个专门的 archetype。这个专门生成 Web 工程骨架的 archetype 可以参照官网看到它的用法：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905164831919.png" alt="img"></p><p><strong>参数 archetypeGroupId、archetypeArtifactId、archetypeVersion 用来指定现在使用的 maven-archetype-webapp 的坐标。</strong></p><p><strong>参数缺一不可</strong></p><h3 id="2、操作"><a href="#2、操作" class="headerlink" title="2、操作"></a>2、操作</h3><p>注意：如果在上一个工程的目录下执行 mvn archetype:generate 命令，那么 Maven 会报错：<strong>不能在一个非 pom 的工程下再创建其他工程</strong>。所以<strong>不要再刚才创建的工程里再创建新的工程</strong>，<strong>请回到工作空间根目录</strong>来操作。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905165119862.png" alt="img"></p><p>然后运行生成工程的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.4</span><br></pre></td></tr></table></figure><p>下面的操作按照提示执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Define value for property &#x27;groupId&#x27;: com.atguigu.maven</span><br><span class="line">value for property &#x27;artifactId&#x27;: pro02-maven-web </span><br><span class="line">value for property &#x27;version&#x27; 1.0-SNAPSHOT: :【直接回车，使用默认值】</span><br><span class="line"></span><br><span class="line">Define value for property &#x27;package&#x27; com.atguigu.maven: :【直接回车，使用默认值】 Confirm properties configuration: groupId: com.atguigu.maven artifactId: pro02-maven-web version: 1.0-SNAPSHOT package: com.atguigu.maven Y: :【直接回车，表示确认】</span><br></pre></td></tr></table></figure><h3 id="3、生成的pom-xml"><a href="#3、生成的pom-xml" class="headerlink" title="3、生成的pom.xml"></a>3、生成的pom.xml</h3><p>确认打包的方式是war包形式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、生成的Web工程的目录结构"><a href="#4、生成的Web工程的目录结构" class="headerlink" title="4、生成的Web工程的目录结构"></a>4、生成的Web工程的目录结构</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905165325140.png" alt="img"></p><h3 id="5、创建-Servlet"><a href="#5、创建-Servlet" class="headerlink" title="5、创建 Servlet"></a>5、创建 Servlet</h3><p>①在 main 目录下创建Java目录</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905165408720.png" alt="img"></p><p>②在 java 目录下创建 Servlet 类所在的包的目录</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905165552812.png" alt="img"></p><p>③在包下创建 Servlet 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.maven;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">response.getWriter().write(<span class="string">&quot;hello maven web&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④在 web.xml 中注册 Servlet</p><ul><li>注意格式</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906002856554.png" alt="img"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.maven.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/helloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6、在-index-jsp-页面编写超链接"><a href="#6、在-index-jsp-页面编写超链接" class="headerlink" title="6、在 index.jsp 页面编写超链接"></a>6、在 index.jsp 页面编写超链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;helloServlet&quot;</span>&gt;</span>Access Servlet<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JSP全称是 Java Server Page，和 Thymeleaf 一样，是服务器端页面渲染技术。这里我们不必关心 JSP 语法细节，编写一个超链接标签即可。</li></ul><h3 id="7、编译"><a href="#7、编译" class="headerlink" title="7、编译"></a>7、编译</h3><p>此时直接执行 mvn compile 命令出错：【记得去pom.xml文件所在目录运行】</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905165754034.png" alt="img"></p><p>上面的错误信息说明：我们的 Web 工程用到了 HttpServlet 这个类，而 <strong>HttpServlet 这个类属于 servlet-api.jar 这个 jar 包</strong>。此时我们说，Web 工程需要依赖 servlet-api.jar 包。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220905165830773.png" alt="img"></p><h3 id="8、配置对-servlet-api-jar-包的依赖"><a href="#8、配置对-servlet-api-jar-包的依赖" class="headerlink" title="8、配置对 servlet-api.jar 包的依赖"></a>8、配置对 servlet-api.jar 包的依赖</h3><p>对于不知道详细信息的依赖可以到<a href="https://mvnrepository.com/%E7%BD%91%E7%AB%99%E6%9F%A5%E8%AF%A2%E3%80%82">https://mvnrepository.com/网站查询。</a></p><ul><li>有很多的时候注意区别：看组织</li><li>有很多版本的时候一般选下载人最多的</li></ul><p>比如，我们找到的 servlet-api 的依赖信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这样就可以把上面的信息加入 pom.xml。在 【dependencies 标签里面添加】重新执行 mvn clean compile 命令。【<strong>mvn命令可以组合执行</strong>】<br>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906004024870.png" alt="img"></li></ul><h3 id="9、将-Web-工程打包为-war-包"><a href="#9、将-Web-工程打包为-war-包" class="headerlink" title="9、将 Web 工程打包为 war 包"></a>9、将 Web 工程打包为 war 包</h3><p>运行 <strong>mvn package</strong> 命令，生成 war 包的位置如下图所示：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906005129674.png" alt="img"></p><h3 id="10、将-war-包部署到-Tomcat-上运行"><a href="#10、将-war-包部署到-Tomcat-上运行" class="headerlink" title="10、将 war 包部署到 Tomcat 上运行"></a>10、将 war 包部署到 Tomcat 上运行</h3><p>【最原始的部署方式，能够运行起来就行，了解内容】</p><p>将 war 包复制到 Tomcat&#x2F;webapps 目录下【<strong>复制那个解压过的文件夹就可以</strong>】</p><ul><li>复制完后，名称可以随意更改</li><li>然后运行tomcat</li><li>在浏览器粘贴自己的端口号加你的项目名称名【即你更改过的那个名称的名字】</li><li>将 war 包复制到 Tomcat&#x2F;webapps 目录下，启动tomcat 会自动解压</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906010001893.png" alt="img"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906010540748.png" alt="img"></p><h2 id="实验五：WEB工程依赖Java工程"><a href="#实验五：WEB工程依赖Java工程" class="headerlink" title="实验五：WEB工程依赖Java工程"></a>实验五：WEB工程依赖Java工程</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><ul><li><p><strong>从来只有 Web 工程依赖 Java 工程，没有反过来 Java 工程依赖 Web 工程。</strong> </p></li><li><p>即 war包里面可以有个jar包</p></li></ul><h3 id="2、操作-1"><a href="#2、操作-1" class="headerlink" title="2、操作"></a>2、操作</h3><p>在 pro02-maven-web 工程的 pom.xml 中，找到 dependencies 标签，在 dependencies 标签中做如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置对Java工程pro01-maven-java的依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 具体的配置方式：在dependency标签内使用坐标实现依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906011310300.png" alt="img"></p><h3 id="3、在-Web-工程中，编写测试代码"><a href="#3、在-Web-工程中，编写测试代码" class="headerlink" title="3、在 Web 工程中，编写测试代码"></a>3、在 Web 工程中，编写测试代码</h3><h4 id="①补充创建目录"><a href="#①补充创建目录" class="headerlink" title="①补充创建目录"></a>①补充创建目录</h4><p>pro02-maven-web<strong>\src\test\java\com\atguigu\maven</strong></p><h4 id="②确认-Web-工程依赖了-junit"><a href="#②确认-Web-工程依赖了-junit" class="headerlink" title="②确认 Web 工程依赖了 junit"></a>②确认 Web 工程依赖了 junit</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③创建测试类"><a href="#③创建测试类" class="headerlink" title="③创建测试类"></a>③创建测试类</h4><p>把 Java 工程的 CalculatorTest.java 类复制到 pro02-maven-wb<strong>\src\test\java\com\atguigu\maven</strong> 目录下</p><h3 id="4、执行Maven命令"><a href="#4、执行Maven命令" class="headerlink" title="4、执行Maven命令"></a>4、执行Maven命令</h3><h4 id="①测试命令"><a href="#①测试命令" class="headerlink" title="①测试命令"></a>①测试命令</h4><p>mvn test</p><p>说明：测试操作中会提前自动执行编译操作，测试成功就说明编译也是成功的。</p><h4 id="②打包命令"><a href="#②打包命令" class="headerlink" title="②打包命令"></a>②打包命令</h4><p>mvn package</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906012942808.png" alt="img"></p><p>通过查看 war 包内的结构，我们看到被 Web 工程依赖的 Java 工程确实是会变成 Web 工程的 WEB-INF&#x2F;lib 目录下的 jar 包。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906013007521.png" alt="img"></p><h4 id="③查看当前-Web-工程所依赖的-jar-包的列表"><a href="#③查看当前-Web-工程所依赖的-jar-包的列表" class="headerlink" title="③查看当前 Web 工程所依赖的 jar 包的列表"></a>③查看当前 Web 工程所依赖的 jar 包的列表</h4><p>mvn dependency:list</p><p>[INFO] The following files have been resolved:<br>[INFO] org.hamcrest:hamcrest-core:jar:1.3:test<br>[INFO] javax.servlet:javax.servlet-api:jar:3.1.0:provided<br>[INFO] com.atguigu.maven:pro01-maven-java:jar:1.0-SNAPSHOT:compile<br>[INFO] junit:junit:jar:4.12:test</p><p>说明：javax.servlet:javax.servlet-api:jar:3.1.0:provided 格式显示的是一个 jar 包的坐标信息。格式是：</p><p>groupId:artifactId:打包方式:version:依赖的范围</p><ul><li>这样的格式虽然和我们 XML 配置文件中坐标的格式不同，但是本质上还是坐标信息</li><li>将来从 Maven 命令的日志或错误信息中看到这样格式的信息，就能够识别出来这是坐标。</li><li>根据坐标到Maven 仓库找到对应的jar包，用这样的方式解决我们遇到的报错的情况。</li></ul><h4 id="④以树形结构查看当前-Web-工程的依赖信息"><a href="#④以树形结构查看当前-Web-工程的依赖信息" class="headerlink" title="④以树形结构查看当前 Web 工程的依赖信息"></a>④以树形结构查看当前 Web 工程的依赖信息</h4><p>mvn dependency:tree</p><p>[INFO] com.atguigu.maven:pro02-maven-web:war:1.0-SNAPSHOT<br>[INFO] +- junit:junit:jar:4.12:test<br>[INFO] | - org.hamcrest:hamcrest-core:jar:1.3:test<br>[INFO] +- javax.servlet:javax.servlet-api:jar:3.1.0:provided<br>[INFO] - com.atguigu.maven:pro01-maven-java:jar:1.0-SNAPSHOT:compile</p><ul><li>我们在 pom.xml 中并没有依赖 hamcrest-core，但是它却被加入了我们依赖的列表。原因是：junit 依赖了hamcrest-core，然后基于依赖的传递性，hamcrest-core 被传递到我们的工程了。</li></ul><h2 id="实验六：测试依赖的范围【重点】"><a href="#实验六：测试依赖的范围【重点】" class="headerlink" title="实验六：测试依赖的范围【重点】"></a>实验六：测试依赖的范围【重点】</h2><h3 id="1、依赖范围"><a href="#1、依赖范围" class="headerlink" title="1、依赖范围"></a>1、依赖范围</h3><ul><li><p>标签的位置：dependencies&#x2F;dependency&#x2F;<strong>scope</strong> </p></li><li><p>scope标签的可选值：<strong>compile</strong>&#x2F;<strong>test</strong>&#x2F;<strong>provided</strong>&#x2F;system&#x2F;runtime&#x2F;<strong>import</strong> </p></li><li><p>不选代表默认值，compile</p></li></ul><h4 id="①compile-和-test-对比"><a href="#①compile-和-test-对比" class="headerlink" title="①compile 和 test 对比"></a>①compile 和 test 对比</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906013435729.png" alt="img"></p><h4 id="②compile-和-provided-对比"><a href="#②compile-和-provided-对比" class="headerlink" title="②compile 和 provided 对比"></a>②compile 和 provided 对比</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906013458751.png" alt="img"></p><h4 id="③结论【重点】"><a href="#③结论【重点】" class="headerlink" title="③结论【重点】"></a>③结论【重点】</h4><ul><li><p>compile：通常使用的第三方框架的 jar 包这样在项目实际运行时真正要用到的 jar 包都是以 compile 范围进行依赖的。比如 SSM 框架所需jar包。 </p></li><li><p>test：测试过程中使用的 jar 包，以 test 范围依赖进来。比如 junit。 </p></li><li><p>provided：在开发过程中需要用到的“服务器上的 jar 包”通常以 provided 范围依赖进来。比如 servlet-api、jsp-api。 </p></li><li><p>而这个范围的 jar 包之所以不参与部署、不放进 war 包，就是避免和服务器上已有的同类 jar 包产生冲突，同时减轻服务器的负担。</p></li><li></li></ul><h3 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h3><h4 id="①验证-compile-范围对-main-目录有效"><a href="#①验证-compile-范围对-main-目录有效" class="headerlink" title="①验证 compile 范围对 main 目录有效"></a>①验证 compile 范围对 main 目录有效</h4><p>main目录下的类：HelloServlet 使用compile范围导入的依赖：pro01-atguigu-maven</p><p>验证：使用compile范围导入的依赖对main目录下的类来说是有效的</p><p>有效：HelloServlet 能够使用 pro01-atguigu-maven 工程中的 Calculator 类</p><p>验证方式：在 HelloServlet 类中导入 Calculator 类，然后编译就说明有效。</p><h4 id="②验证test范围对main目录无效"><a href="#②验证test范围对main目录无效" class="headerlink" title="②验证test范围对main目录无效"></a>②验证test范围对main目录无效</h4><p>测试方式：在主体程序中导入org.junit.Test这个注解，然后执行编译。</p><p>具体操作：在pro01-maven-java\src\main\java\com\atguigu\maven目录下修改Calculator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.maven;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行Maven编译命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] /D:/maven-workspace/space201026/pro01-maven-java/src/main/java/com/atguigu/maven/Calculator.java:[<span class="number">3</span>,<span class="number">17</span>] 程序包org.junit不存在</span><br></pre></td></tr></table></figure><h4 id="③验证test和provided范围不参与服务器部署"><a href="#③验证test和provided范围不参与服务器部署" class="headerlink" title="③验证test和provided范围不参与服务器部署"></a>③验证test和provided范围不参与服务器部署</h4><p>其实就是验证：通过compile范围依赖的jar包会放入war包，通过test范围依赖的jar包不会放入war包</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906013916097.png" alt="img"></p><h4 id="④验证provided范围对测试程序有效"><a href="#④验证provided范围对测试程序有效" class="headerlink" title="④验证provided范围对测试程序有效"></a>④验证provided范围对测试程序有效</h4><p>测试方式是在pro02-maven-web的测试程序中加入servlet-api.jar包中的类。</p><p>修改：<strong>pro02-maven-web</strong>\src\test\java\com\atguigu\maven\CalculatorTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.maven;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.maven.Calculator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态导入的效果是将Assert类中的静态资源导入当前类</span></span><br><span class="line"><span class="comment">// 这样一来，在当前类中就可以直接使用Assert类中的静态资源，不需要写类名</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSum</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建Calculator对象</span></span><br><span class="line"><span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用Calculator对象的方法，获取到程序运行实际的结果</span></span><br><span class="line"><span class="type">int</span> <span class="variable">actualResult</span> <span class="operator">=</span> calculator.sum(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.声明一个变量，表示程序运行期待的结果</span></span><br><span class="line"><span class="type">int</span> <span class="variable">expectedResult</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.使用断言来判断实际结果和期待结果是否一致</span></span><br><span class="line"><span class="comment">// 如果一致：测试通过，不会抛出异常</span></span><br><span class="line"><span class="comment">// 如果不一致：抛出异常，测试失败</span></span><br><span class="line">assertEquals(expectedResult, actualResult);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行Maven的编译命令：mvn compile</p><p>然后看到编译成功。</p><h2 id="实验七：测试依赖的传递性"><a href="#实验七：测试依赖的传递性" class="headerlink" title="实验七：测试依赖的传递性"></a>实验七：测试依赖的传递性</h2><h3 id="1、依赖的传递性"><a href="#1、依赖的传递性" class="headerlink" title="1、依赖的传递性"></a>1、依赖的传递性</h3><h4 id="①概念"><a href="#①概念" class="headerlink" title="①概念"></a>①概念</h4><p>A 依赖 B，B 依赖 C，那么在 A 没有配置对 C 的依赖的情况下，A 里面能不能直接使用 C？</p><h4 id="②传递的原则"><a href="#②传递的原则" class="headerlink" title="②传递的原则"></a>②传递的原则</h4><p>在 A 依赖 B，B 依赖 C 的前提下，C 是否能够传递到 A，取决于 B 依赖 C 时使用的依赖范围。</p><ul><li>B 依赖 C 时使用 compile 范围：可以传递</li><li>B 依赖 C 时使用 test 或 provided 范围：不能传递，所以需要这样的 jar 包时，就必须在需要的地方明确配置依赖才可以。</li></ul><h3 id="2、使用-compile-范围依赖-spring-core"><a href="#2、使用-compile-范围依赖-spring-core" class="headerlink" title="2、使用 compile 范围依赖 spring-core"></a>2、使用 compile 范围依赖 spring-core</h3><p>测试方式：让 pro01-maven-java 工程依赖 spring-core</p><p>具体操作：编辑 pro01-maven-java 工程根目录下 pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 mvn dependency:tree 命令查看效果：</p><p>[INFO] com.atguigu.maven:pro01-maven-java:jar:1.0-SNAPSHOT<br>[INFO] +- junit:junit:jar:4.12:test<br>[INFO] | - org.hamcrest:hamcrest-core:jar:1.3:test<br>[INFO] - org.springframework:spring-core:jar:4.0.0.RELEASE:compile<br>[INFO] - commons-logging:commons-logging:jar:1.1.1:compile</p><p>还可以在 Web 工程中，使用 mvn dependency:tree 命令查看效果（需要重新将 pro01-maven-java 安装到仓库）：</p><p>[INFO] com.atguigu.maven:pro02-maven-web:war:1.0-SNAPSHOT<br>[INFO] +- junit:junit:jar:4.12:test<br>[INFO] | - org.hamcrest:hamcrest-core:jar:1.3:test<br>[INFO] +- javax.servlet:javax.servlet-api:jar:3.1.0:provided<br>[INFO] - com.atguigu.maven:pro01-maven-java:jar:1.0-SNAPSHOT:compile<br>[INFO] - org.springframework:spring-core:jar:4.0.0.RELEASE:compile<br>[INFO] - commons-logging:commons-logging:jar:1.1.1:compile</p><h3 id="3、验证-test-和-provided-范围不能传递"><a href="#3、验证-test-和-provided-范围不能传递" class="headerlink" title="3、验证 test 和 provided 范围不能传递"></a>3、验证 test 和 provided 范围不能传递</h3><p>从上面的例子已经能够看到，pro01-maven-java 依赖了 junit，但是在 pro02-maven-web 工程中查看依赖树的时候并没有看到 junit。</p><p>要验证 provided 范围不能传递，可以在 pro01-maven-java 工程中加入 servlet-api 的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果还是和之前一样：</p><p>TIP</p><p>[INFO] com.atguigu.maven:pro02-maven-web:war:1.0-SNAPSHOT<br>[INFO] +- junit:junit:jar:4.12:test<br>[INFO] | - org.hamcrest:hamcrest-core:jar:1.3:test<br>[INFO] +- javax.servlet:javax.servlet-api:jar:3.1.0:provided<br>[INFO] - com.atguigu.maven:pro01-maven-java:jar:1.0-SNAPSHOT:compile<br>[INFO] - org.springframework:spring-core:jar:4.0.0.RELEASE:compile<br>[INFO] - commons-logging:commons-logging:jar:1.1.1:compile</p><h2 id="实验八：测试依赖的排除"><a href="#实验八：测试依赖的排除" class="headerlink" title="实验八：测试依赖的排除"></a>实验八：测试依赖的排除</h2><h3 id="1、概念-1"><a href="#1、概念-1" class="headerlink" title="1、概念"></a>1、概念</h3><p>当 A 依赖 B，B 依赖 C 而且 C 可以传递到 A 的时候，A 不想要 C，需要在 A 里面把 C 排除掉。而往往这种情况都是为了避免 jar 包之间的冲突。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906014656209.png" alt="img"></p><h3 id="2、配置方式"><a href="#2、配置方式" class="headerlink" title="2、配置方式"></a>2、配置方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用excludes标签配置依赖的排除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在exclude标签中配置一个具体的排除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定要排除的依赖的坐标（不需要写version） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h3><p>测试的方式：在 pro02-maven-web 工程中配置对 commons-logging 的排除</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用excludes标签配置依赖的排除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在exclude标签中配置一个具体的排除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定要排除的依赖的坐标（不需要写version） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行 mvn dependency:tree 命令查看效果：</p><p>[INFO] com.atguigu.maven:pro02-maven-web:war:1.0-SNAPSHOT<br>[INFO] +- junit:junit:jar:4.12:test<br>[INFO] | - org.hamcrest:hamcrest-core:jar:1.3:test<br>[INFO] +- javax.servlet:javax.servlet-api:jar:3.1.0:provided<br>[INFO] - com.atguigu.maven:pro01-maven-java:jar:1.0-SNAPSHOT:compile<br>[INFO] - org.springframework:spring-core:jar:4.0.0.RELEASE:compile</p><p>发现在 spring-core 下面就没有 commons-logging 了。</p><h2 id="实验九：继承"><a href="#实验九：继承" class="headerlink" title="实验九：继承"></a>实验九：继承</h2><h3 id="1、概念-2"><a href="#1、概念-2" class="headerlink" title="1、概念"></a>1、概念</h3><p>Maven工程之间，A 工程继承 B 工程</p><ul><li>B 工程：父工程</li><li>A 工程：子工程</li></ul><p>本质上是 A 工程的 pom.xml 中的配置继承了 B 工程中 pom.xml 的配置。</p><h3 id="2、作用"><a href="#2、作用" class="headerlink" title="2、作用"></a>2、作用</h3><p>在父工程中统一管理项目中的依赖信息，具体来说是管理依赖信息的版本。</p><p>它的背景是：</p><ul><li>对一个比较大型的项目进行了模块拆分。</li><li>一个 project 下面，创建了很多个 module。</li><li>每一个 module 都需要配置自己的依赖信息。</li></ul><p>它背后的需求是：</p><ul><li>在每一个 module 中各自维护各自的依赖信息很容易发生出入，不易统一管理。</li><li>使用同一个框架内的不同 jar 包，它们应该是同一个版本，所以整个项目中使用的框架版本需要统一。</li><li>使用框架时所需要的 jar 包组合（或者说依赖信息组合）需要经过长期摸索和反复调试，最终确定一个可用组合。这个耗费很大精力总结出来的方案不应该在新的项目中重新摸索。</li></ul><p>通过在父工程中为整个项目维护依赖信息的组合既<strong>保证了整个项目使用规范、准确的 jar 包</strong>；又能够将<strong>以往的经验沉淀</strong>下来，节约时间和精力。</p><h3 id="3、举例"><a href="#3、举例" class="headerlink" title="3、举例"></a>3、举例</h3><p>在一个工程中依赖多个 Spring 的 jar 包</p><p>[INFO] +- org.springframework:<strong>spring-core</strong>:jar:<strong>4.0.0</strong>.RELEASE:compile<br>[INFO] | - commons-logging:commons-logging:jar:1.1.1:compile<br>[INFO] +- org.springframework:<strong>spring-beans</strong>:jar:<strong>4.0.0</strong>.RELEASE:compile<br>[INFO] +- org.springframework:<strong>spring-context</strong>:jar:<strong>4.0.0</strong>.RELEASE:compile<br>[INFO] +- org.springframework:<strong>spring-expression</strong>:jar:4.0.0.RELEASE:compile<br>[INFO] +- org.springframework:<strong>spring-aop</strong>:jar:<strong>4.0.0</strong>.RELEASE:compile<br>[INFO] | - aopalliance:aopalliance:jar:1.0:compile</p><p>使用 Spring 时要求所有 Spring 自己的 jar 包版本必须一致。为了能够对这些 jar 包的版本进行统一管理，我们使用继承这个机制，将所有版本信息统一在父工程中进行管理。</p><h3 id="4、操作"><a href="#4、操作" class="headerlink" title="4、操作"></a>4、操作</h3><h4 id="①创建父工程"><a href="#①创建父工程" class="headerlink" title="①创建父工程"></a>①创建父工程</h4><p>创建的过程和前面创建 pro01-maven-java 一样。</p><p>工程名称：pro03-maven-parent</p><p>工程创建好之后，要修改它的打包方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro03-maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当前工程作为父工程，它要去管理子工程，所以打包方式必须是 pom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只有打包方式为 pom 的 Maven 工程能够管理其他 Maven 工程。打包方式为 pom 的 Maven 工程中不写业务代码，它是专门管理其他 Maven 工程的工程。</p><h4 id="②创建模块工程"><a href="#②创建模块工程" class="headerlink" title="②创建模块工程"></a>②创建模块工程</h4><p>模块工程类似于 IDEA 中的 module，所以需要<strong>进入 pro03-maven-parent 工程的根目录</strong>，然后运行 mvn archetype:generate 命令来创建模块工程。</p><p>假设，我们创建三个模块工程：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906014854981.png" alt="img"></p><h4 id="③查看被添加新内容的父工程-pom-xml"><a href="#③查看被添加新内容的父工程-pom-xml" class="headerlink" title="③查看被添加新内容的父工程 pom.xml"></a>③查看被添加新内容的父工程 pom.xml</h4><p>下面 modules 和 module 标签是聚合功能的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>pro04-maven-module<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>pro05-maven-module<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>pro06-maven-module<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="④解读子工程的pom-xml"><a href="#④解读子工程的pom-xml" class="headerlink" title="④解读子工程的pom.xml"></a>④解读子工程的pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用parent标签指定当前工程的父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 父工程的坐标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro03-maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子工程的坐标 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果子工程坐标中的groupId和version与父工程一致，那么可以省略 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro04-maven-module<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑤在父工程中配置依赖的统一管理"><a href="#⑤在父工程中配置依赖的统一管理" class="headerlink" title="⑤在父工程中配置依赖的统一管理"></a>⑤在父工程中配置依赖的统一管理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用dependencyManagement标签配置对依赖的管理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 被管理的依赖并没有真正被引入到工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑥子工程中引用那些被父工程管理的依赖"><a href="#⑥子工程中引用那些被父工程管理的依赖" class="headerlink" title="⑥子工程中引用那些被父工程管理的依赖"></a>⑥子工程中引用那些被父工程管理的依赖</h4><p>关键点：省略版本号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子工程引用父工程中的依赖信息时，可以把版本号去掉。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把版本号去掉就表示子工程中这个依赖的版本由父工程决定。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 具体来说是由父工程的dependencyManagement来决定。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑦在父工程中升级依赖信息的版本"><a href="#⑦在父工程中升级依赖信息的版本" class="headerlink" title="⑦在父工程中升级依赖信息的版本"></a>⑦在父工程中升级依赖信息的版本</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>然后在子工程中运行mvn dependency:list，效果如下：</p><p>[INFO] org.springframework:spring-aop:jar:4.1.4.RELEASE:compile<br>[INFO] org.springframework:spring-core:jar:4.1.4.RELEASE:compile<br>[INFO] org.springframework:spring-context:jar:4.1.4.RELEASE:compile<br>[INFO] org.springframework:spring-beans:jar:4.1.4.RELEASE:compile<br>[INFO] org.springframework:spring-expression:jar:4.1.4.RELEASE:compile</p><h4 id="⑧在父工程中声明自定义属性"><a href="#⑧在父工程中声明自定义属性" class="headerlink" title="⑧在父工程中声明自定义属性"></a>⑧在父工程中声明自定义属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过自定义属性，统一指定Spring的版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义标签，维护Spring版本数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">atguigu.spring.version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">atguigu.spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在需要的地方使用${}的形式来引用自定义的属性名：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;atguigu.spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>真正实现“一处修改，处处生效”。</p><h3 id="5、实际意义"><a href="#5、实际意义" class="headerlink" title="5、实际意义"></a>5、实际意义</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906014959411.png" alt="img"></p><p>编写一套符合要求、开发各种功能都能正常工作的依赖组合并不容易。如果公司里已经有人总结了成熟的组合方案，那么再开发新项目时，如果不使用原有的积累，而是重新摸索，会浪费大量的时间。为了提高效率，我们可以使用工程继承的机制，让成熟的依赖组合方案能够保留下来。</p><p>如上图所示，公司级的父工程中管理的就是成熟的依赖组合方案，各个新项目、子系统各取所需即可。</p><h2 id="实验十：聚合"><a href="#实验十：聚合" class="headerlink" title="实验十：聚合"></a>实验十：聚合</h2><h3 id="1、聚合本身的含义"><a href="#1、聚合本身的含义" class="headerlink" title="1、聚合本身的含义"></a>1、聚合本身的含义</h3><ul><li>部分组成整体</li></ul><h3 id="2、Maven-中的聚合"><a href="#2、Maven-中的聚合" class="headerlink" title="2、Maven 中的聚合"></a>2、Maven 中的聚合</h3><p>使用一个“总工程”将各个“模块工程”汇集起来，作为一个整体对应完整的项目。</p><ul><li>项目：整体</li><li>模块：部分</li></ul><p>概念的对应关系：</p><p>从继承关系角度来看：</p><ul><li>父工程</li><li>子工程</li></ul><p>从聚合关系角度来看：</p><ul><li>总工程</li><li>模块工程</li></ul><h3 id="3、好处"><a href="#3、好处" class="headerlink" title="3、好处"></a>3、好处</h3><ul><li>一键执行 Maven 命令：很多构建命令都可以在“总工程”中一键执行。<br>  以 mvn install 命令为例：Maven 要求有父工程时先安装父工程；有依赖的工程时，先安装被依赖的工程。我们自己考虑这些规则会很麻烦。但是工程聚合之后，在总工程执行 mvn install 可以一键完成安装，而且会自动按照正确的顺序执行。 </li><li>配置聚合之后，各个模块工程会在总工程中展示一个列表，让项目中的各个模块一目了然。</li></ul><h3 id="4、聚合的配置"><a href="#4、聚合的配置" class="headerlink" title="4、聚合的配置"></a>4、聚合的配置</h3><p>在总工程中配置 modules 即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>pro04-maven-module<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>pro05-maven-module<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>pro06-maven-module<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、依赖循环问题"><a href="#5、依赖循环问题" class="headerlink" title="5、依赖循环问题"></a>5、依赖循环问题</h3><p>如果 A 工程依赖 B 工程，B 工程依赖 C 工程，C 工程又反过来依赖 A 工程，那么在执行构建操作时会报下面的错误：</p><p>DANGER</p><p>[ERROR] [ERROR] The projects in the reactor contain a cyclic reference:</p><p>这个错误的含义是：循环引用。</p><h1 id="chapter4-使用Maven：IDEA环境"><a href="#chapter4-使用Maven：IDEA环境" class="headerlink" title="chapter4 使用Maven：IDEA环境"></a>chapter4 使用Maven：IDEA环境</h1><h2 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h2><h3 id="1、创建-Project"><a href="#1、创建-Project" class="headerlink" title="1、创建 Project"></a>1、创建 Project</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906020137824.png" alt="img"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906020153962.png" alt="img"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906020205519.png" alt="img"></p><h3 id="2、开启自动导入"><a href="#2、开启自动导入" class="headerlink" title="2、开启自动导入"></a>2、开启自动导入</h3><ul><li>创建 Project 后，IDEA 会自动弹出下面提示，我们选择<strong>『Enable Auto-Import』</strong>，意思是启用自动导入。</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906020235573.png" alt="img"></p><p>这个自动导入<strong>一定要开启</strong>，因为 Project、Module 新创建或 pom.xml 每次修改时都应该让 IDEA 重新加载 Maven 信息。这对 Maven 目录结构认定、Java 源程序编译、依赖 jar 包的导入都有非常关键的影响。</p><ul><li>另外也可以通过 IDEA 的 Settings 设置来开启：</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906020319348.png" alt="img"></p><h2 id="配置Maven信息"><a href="#配置Maven信息" class="headerlink" title="配置Maven信息"></a>配置Maven信息</h2><p>每次创建 Project 后都需要设置 Maven 家目录位置，否则 IDEA 将使用内置的 Maven 核心程序（不稳定）并使用默认的本地仓库位置。这样一来，我们在命令行操作过程中已下载好的 jar 包就白下载了，默认的本地仓库通常在 C 盘，还影响系统运行。</p><p>配置之后，IDEA 会根据我们在这里指定的 Maven 家目录自动识别到我们在 settings.xml 配置文件中指定的本地仓库。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906020358084.png" alt="img"></p><h2 id="创建Java模块工程"><a href="#创建Java模块工程" class="headerlink" title="创建Java模块工程"></a>创建Java模块工程</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906020505242.png" alt="img"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906020520956.png" alt="img"></p><h2 id="创建Web模块工程"><a href="#创建Web模块工程" class="headerlink" title="创建Web模块工程"></a>创建Web模块工程</h2><h3 id="1、创建模块"><a href="#1、创建模块" class="headerlink" title="1、创建模块"></a>1、创建模块</h3><ul><li>按照前面的同样操作创建模块，<strong>此时</strong>这个模块其实还是一个<strong>Java模块</strong>。</li></ul><h3 id="2、修改打包方式"><a href="#2、修改打包方式" class="headerlink" title="2、修改打包方式"></a>2、修改打包方式</h3><p>Web 模块将来打包当然应该是 <strong>war</strong> 包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、Web-设定"><a href="#3、Web-设定" class="headerlink" title="3、Web 设定"></a>3、Web 设定</h3><p>首先打开项目结构菜单：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906020636608.png" alt="img"></p><p>然后到 Facets 下查看 IDEA 是否已经帮我们自动生成了 Web 设定。正常来说只要我们确实设置了打包方式为 war，那么 IDEA 2019 版就会自动生成 Web 设定。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906020653903.png" alt="img"></p><p>另外，对于 IDEA 2018 诸版本没有自动生成 Web 设定，那么请参照下面两图，我们自己创建：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906020720043.png" alt="img"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906020739529.png" alt="img"></p><h3 id="4、借助IDEA生成web-xml"><a href="#4、借助IDEA生成web-xml" class="headerlink" title="4、借助IDEA生成web.xml"></a>4、借助IDEA生成web.xml</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906020817024.png" alt="img"></p><h3 id="5、设置-Web-资源的根目录"><a href="#5、设置-Web-资源的根目录" class="headerlink" title="5、设置 Web 资源的根目录"></a>5、设置 Web 资源的根目录</h3><p>结合 Maven 的目录结构，Web 资源的根目录需要设置为 src&#x2F;main&#x2F;webapp 目录。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906020857808.png" alt="img"></p><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="1、在IDEA中执行Maven命令"><a href="#1、在IDEA中执行Maven命令" class="headerlink" title="1、在IDEA中执行Maven命令"></a>1、在IDEA中执行Maven命令</h3><h4 id="①直接执行"><a href="#①直接执行" class="headerlink" title="①直接执行"></a>①直接执行</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021028732.png" alt="img"></p><h4 id="②手动输入"><a href="#②手动输入" class="headerlink" title="②手动输入"></a>②手动输入</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021100704.png" alt="img"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021115063.png" alt="img"></p><p>如果有需要，还可以给命令后面附加参数：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021137054.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-D 表示后面要附加命令的参数，字母 D 和后面的参数是紧挨着的，中间没有任何其它字符</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">maven.test.skip=<span class="literal">true</span> 表示在执行命令的过程中跳过测试</span></span><br><span class="line">mvn clean install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><h3 id="2、在IDEA中查看某个模块的依赖信息"><a href="#2、在IDEA中查看某个模块的依赖信息" class="headerlink" title="2、在IDEA中查看某个模块的依赖信息"></a>2、在IDEA中查看某个模块的依赖信息</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021214952.png" alt="img"></p><h3 id="3、工程导入"><a href="#3、工程导入" class="headerlink" title="3、工程导入"></a>3、工程导入</h3><p>Maven工程除了自己创建的，还有很多情况是别人创建的。而为了参与开发或者是参考学习，我们都需要导入到 IDEA 中。下面我们分几种不同情况来说明：</p><h4 id="①来自版本控制系统"><a href="#①来自版本控制系统" class="headerlink" title="①来自版本控制系统"></a>①来自版本控制系统</h4><p>目前我们通常使用的都是 Git（本地库） + 码云（远程库）的版本控制系统，结合 IDEA 的相关操作方式请点<a href="http://heavy_code_industry.gitee.io/code_heavy_industry/pro008-Git/lecture/chapter05/verse03.html"><strong>这里</strong> (opens new window)</a>查看<strong>克隆远程库</strong>部分。</p><h4 id="②来自工程目录"><a href="#②来自工程目录" class="headerlink" title="②来自工程目录"></a>②来自工程目录</h4><p>直接使用 IDEA 打开工程目录即可。下面咱们举个例子：</p><h5 id="1-工程压缩包"><a href="#1-工程压缩包" class="headerlink" title="[1]工程压缩包"></a>[1]工程压缩包</h5><p>假设别人发给我们一个 Maven 工程的 zip 压缩包：maven-rest-demo.zip。从码云或GitHub上也可以以 ZIP 压缩格式对项目代码打包下载。</p><h5 id="2-解压"><a href="#2-解压" class="headerlink" title="[2]解压"></a>[2]解压</h5><p>如果你的所有 IDEA 工程有一个专门的目录来存放，而不是散落各处，那么首先我们就把 ZIP 包解压到这个指定目录中。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021337624.png" alt="img"></p><h5 id="3-打开"><a href="#3-打开" class="headerlink" title="[3]打开"></a>[3]打开</h5><p>只要我们确认在解压目录下可以直接看到 pom.xml，那就能证明这个解压目录就是我们的工程目录。那么接下来让 IDEA 打开这个目录就可以了。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021428236.png" alt="img"></p><h5 id="4-设置-Maven-核心程序位置"><a href="#4-设置-Maven-核心程序位置" class="headerlink" title="[4]设置 Maven 核心程序位置"></a>[4]设置 Maven 核心程序位置</h5><p>打开一个新的 Maven 工程，和新创建一个 Maven 工程是一样的，此时 IDEA 的 settings 配置中关于 Maven 仍然是默认值：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021508424.png" alt="img"></p><p>所以我们还是需要像新建 Maven 工程那样，指定一下 Maven 核心程序位置：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021531743.png" alt="img"></p><h3 id="4、模块导入"><a href="#4、模块导入" class="headerlink" title="4、模块导入"></a>4、模块导入</h3><h4 id="①情景重现"><a href="#①情景重现" class="headerlink" title="①情景重现"></a>①情景重现</h4><p>在实际开发中，通常会忽略模块（也就是module）所在的项目（也就是project）仅仅导入某一个模块本身。这么做很可能是类似这样的情况：比如基于 Maven 学习 SSM 的时候，做练习需要导入老师发给我们的代码参考。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021629981.png" alt="img"></p><h4 id="②导入-Java-类型模块"><a href="#②导入-Java-类型模块" class="headerlink" title="②导入 Java 类型模块"></a>②导入 Java 类型模块</h4><h5 id="1-找到老师发的工程目录"><a href="#1-找到老师发的工程目录" class="headerlink" title="[1]找到老师发的工程目录"></a>[1]找到老师发的工程目录</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021716129.png" alt="img"></p><h5 id="2-复制我们想要导入的模块目录"><a href="#2-复制我们想要导入的模块目录" class="headerlink" title="[2]复制我们想要导入的模块目录"></a>[2]复制我们想要导入的模块目录</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021737487.png" alt="img"></p><h5 id="3-粘贴到我们自己工程目录下"><a href="#3-粘贴到我们自己工程目录下" class="headerlink" title="[3]粘贴到我们自己工程目录下"></a>[3]粘贴到我们自己工程目录下</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021759439.png" alt="img"></p><h5 id="4-在-IDEA-中执行导入"><a href="#4-在-IDEA-中执行导入" class="headerlink" title="[4]在 IDEA 中执行导入"></a>[4]在 IDEA 中执行导入</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021826110.png" alt="img"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021850094.png" alt="img"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021906083.png" alt="img"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906021927662.png" alt="img"></p><h5 id="5-修改-pom-xml"><a href="#5-修改-pom-xml" class="headerlink" title="[5]修改 pom.xml"></a>[5]修改 pom.xml</h5><p>刚刚导入的 module 的父工程坐标还是以前的，需要改成我们自己的 project。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906022006252.png" alt="img"></p><h5 id="6-最终效果"><a href="#6-最终效果" class="headerlink" title="[6]最终效果"></a>[6]最终效果</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906022033824.png" alt="img"></p><h4 id="③导入-Web-类型模块"><a href="#③导入-Web-类型模块" class="headerlink" title="③导入 Web 类型模块"></a>③导入 Web 类型模块</h4><p>其它操作和上面演示的都一样，只是多一步：删除多余的、不正确的 web.xml 设置。如下图所示：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1024/image-20220906022135950.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非关系型数据库-Redis</title>
      <link href="/2023/07/10/Redis/"/>
      <url>/2023/07/10/Redis/</url>
      
        <content type="html"><![CDATA[<p>课程：<a href="https://www.bilibili.com/video/BV1cr4y1671t">https://www.bilibili.com/video/BV1cr4y1671t</a><br>资料：<a href="https://pan.baidu.com/s/14EXM3tKP128kGbt5fC5bMQ">https://pan.baidu.com/s/14EXM3tKP128kGbt5fC5bMQ</a> 提取码: lclr<br>课程评价：<br>1课程很新，Redis 的特性讲的也很全面<br>2除了讲 Redis 理论外，每个知识都搭配丰富的实战案例；并且每个案例都是先带大家思考、设计，才去编码实现，更容易理解。<br>3老师的编码很规范，也能学到很多开发技巧<br>4课程非常用心，从 PPT 动画就能看出来</p><p>建议屏蔽弹幕观看<br><strong>一、Redis 入门</strong><br><strong>Redis 介绍</strong><br><strong>是什么？</strong><br>●基于内存的 K &#x2F; V 存储中间件<br>●NoSQL 键值对数据库 </p><p>Redis 不仅仅是数据库，它还能作为消息队列等等。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661837971044-8d4a7ce9-a2da-4d15-bf7b-a5e38d5009b0.png?x-oss-process=image/resize,w_1225,limit_0#averageHue=%23f5eeee&from=url&id=mdO0n&originHeight=530&originWidth=1225&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="></p><p><strong>关系型 SQL 和 NoSQL 的对比</strong><br>其中应用场景是关键：</p><p><strong>Redis 特征</strong><br>1支持多种数据结构<br>2单线程，每个命令的执行具备原子性，中途不会执行其他命令（指命令处理始终是单线程的，自 6.x 起改为多线程接受网络请求）<br>3高性能、低延时（基于内存、IO 多路复用、良好编码）<br>4支持数据持久化<br>5支持主从、分片集群<br>6支持多语言客户端</p><p><strong>Redis 安装</strong><br>建议 Linux 下安装，直接到官网安装即可，注意安装后更改 redis.conf 文件，设置 bind ip、requirepass 密码等参数。</p><p><strong>Redis 连接方式</strong><br>●redis-cli<br>●GUI<br>●多语言 SDK</p><p><strong>Redis 常用命令</strong><br>Redis 的命令根据数据结构分为多个组。<br>不用背！忘了就查：<br>1）redis 官网命令集：<a href="https://redis.io/commands/">https://redis.io/commands/</a>，中文版：<a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a><br>2）redis-cli help 命令查看，help [command] 可以查看某个具体命令、help @xxx 可以查看某个分组下的命令</p><p><strong>通用命令</strong><br>●set key value<br>●get key<br>●keys pattern 模糊搜索多个 key。性能较差，生产环境（尤其是主节点）不建议使用<br>●del key…<br>●exists key 判断 key 是否存在<br>●expire key 设置过期时间<br>●ttl key 查询剩余存活时间，未设置过期时间则为 -1</p><p><strong>Redis 基本数据结构</strong><br><strong>String 类型</strong><br>支持存储字符串、数字、浮点数（实际存储都是字节数组）：</p><p>单 key 的 value 最大不能超过 512 M！</p><p>实际使用时，通常用冒号连接多个词来拼接 key，比如 [项目名]:[业务名]:[类名]:[id]。在某些 GUI 工具中，会自动根据冒号来划分层级，浏览更方便。</p><p><strong>Hash 类型</strong><br>值是一个 Hash 结构（类似 Java 的 HashMap）：</p><p>常用命令：<br>其实就是在 String 命令名的基础上增加了 ‘H’ 首字母</p><p><strong>List 类型</strong><br>理解为 Java 的 LinkedList 双向链表，特点是有序、插入删除快、但查找性能一般：<br>常见命令如下：<br>有点像操作一个双端队列</p><p><strong>Set 类型</strong><br>集合，类似于 Java 中的 HashSet，特点是单 set 内元素不能重复、查找性能高。<br>常见命令如下：<br>分为单集合命令和多集合命令（交并差集）</p><p><strong>SortedSet 类型</strong><br>有序集合，在 set 的基础上给每个元素多存了一个分数，类似于 value 类型为整型的 HashMap。<br>特点是有序、查找性能高，适合用于排行榜、统计 TopN。<br>常见命令：<br>和 set 结构的命令很像</p><p><strong>Redis 客户端</strong><br><strong>主流客户端</strong><br>可以在 Redis 官网查看所有客户端以及推荐的客户端：<a href="https://redis.io/docs/clients">https://redis.io/docs/clients</a><br>对于 Java，主要推荐以下 3 种：</p><p>其中，Jedis 的命令和原生 redis 命令行的命令一致，学习成本最低（注意它是线程不安全的，通常配合连接池使用）；Lettuce 和 Spring 兼容最好（Spring Data Redis 默认集成）、基于 Netty 性能最高；Redisson 提供了和 Java 集合用法一致的分布式集合，适用于更复杂的业务场景。</p><p><strong>Spring Data Redis</strong><br>Spring Data 整合封装了一系列数据访问的操作，Spring Data Redis 则是封装了对 Jedis、Lettuce 这两个 Redis 客户端的操作，提供了统一的 RedisTemplate 来操作 Redis。<br>RedisTemplate 针对不同的 Redis 数据结构提供了不同的 API，划分更明确：</p><p>注意，要在 Spring Data Redis 中使用 Lettuce 线程池的话，要额外引入 apache commons-pool2 依赖。</p><p><strong>RedisTemplate 序列化</strong><br>RedisTemplate 默认使用 JDK 原生序列化器，可读性差、内存占用大，因此可以用以下两种方式来改变序列化机制：<br>1自定义 RedisTemplate，指定 key 和 value 的序列化器<br>2使用自带的 StringRedisTemplate，key 和 value 都默认使用 String 序列化器，仅支持写入 String 类型的 key 和 value。因此需要自己将对象序列化成 String 来写入 Redis，从 Redis 读出数据时也要手动反序列化。</p><p><strong>二、Redis 实战</strong><br>业务场景：</p><p><strong>共享 Session（单点登录）</strong><br><strong>介绍</strong><br>为什么需要共享 Session？<br>防止多个后端服务器的数据存储不一致，导致用户访问时出现未登录的情况。</p><p>如何实现共享 Session？<br>使用独立的内存存储来存放 Session。</p><p><strong>实现</strong><br><strong>key 如何设计？</strong><br>为了安全性，随机生成 token，而不是拼接用户信息，防止恶意伪造或爆破。</p><p><strong>选用何种 value 数据结构存放用户信息？</strong><br>string 还是 hash？有以下两种方案：<br>1先在程序中将对象进行 JSON 序列化，再以 string 类型写入<br>2直接以 hash 数据结构写入 ✅</p><p>因为用户信息是对象，建议选择 hash 数据结构，占用内存更少、且支持对单个字段的增删改查。<br>具体流程如下：</p><p><strong>注意事项</strong><br>1存入 Redis 的数据一定要设置过期时间！<br>2存入 Redis 的数据尽量保证精简和安全，比如存入用户信息时可以移除密码等敏感数据<br>3已登录用户访问系统后，记得刷新 token 过期时间（续期）。并且访问任何路径时都要刷新 token，而不仅是需要登录的路径。可以新增 1 层独立的拦截器来实现 token 刷新，如下图：</p><p><strong>缓存</strong><br>P35 - 47<br><strong>介绍</strong><br>什么是缓存？<br>临时存放数据的缓冲区。</p><p>缓存无处不在：</p><p>为什么需要缓存？<br>提前准备好数据，便于更快地读写。</p><p>缓存不是银弹，要权衡利弊！<br>优点：<br>●降低后端节点负载<br>●提升数据读写性能<br>缺点：<br>●额外引入中间件，增大运维成本<br>●额外开发和解决缓存带来的问题，增大开发成本<br>●需要保证数据一致性</p><p><strong>实现</strong><br><strong>关键流程</strong><br>1暂无缓存，从数据库读，然后设置（更新）缓存<br>2已有缓存，直接读缓存</p><p><strong>缓存更新</strong><br>几种常用策略，一般会选择主动更新 + 超时剔除兜底：</p><p>主动更新缓存的几种方式：<br>1cache aside：以数据库的数据为准，业务层自己来控制缓存的写入<br>2write &#x2F; read through：使用现成的数据写入服务，让服务来维护数据库和缓存的一致性，我们只用写数据即可<br>3write behind cache：先更新缓存，通过异步线程定期将缓存的数据持久化（同步到数据库中）</p><p>是选择删除缓存还是更新缓存？<br>建议选择删除缓存，等待下次查询自动设置缓存，做到随用随取，可以避免每次更新数据库后都更新缓存的无效写操作。</p><p>多线程情况下，如何保证缓存和数据库的一致性？<br>1单机：使用本地事务<br>2分布式：使用 TCC 等分布式事务</p><p>先删除缓存还是先操作数据库？<br>下图为两种方式在多线程下可能出现的问题：</p><p>这两种方式都不能百分百保证一致性，但建议选择【先操作数据库，再删除缓存】，出现问题的概率会更低。可以配合延时双删保证缓存一定被删除。</p><p><strong>问题及解决</strong><br><strong>缓存穿透</strong><br>攻击者可以恶意请求数据库中不存在的数据，从而使得每次查询都要绕过缓存查数据库，增大数据库的压力。<br>解决方案：<br>1缓存空值：比如塞一个空字符串。注意可以给空对象的键过期时间设置短一些，或者在新增数据时强制清除下对应缓存（防止查出来还是 null）<br>2布隆过滤器</p><p>预防做法：<br>1增强对请求数据的校验，比如 id &gt; 0<br>2增强对数据格式的控制，比如 id 设置为 10 位，不为 10 位的请求直接拒绝<br>3增强用户权限校验<br>4通过限流来保护数据库</p><p><strong>缓存雪崩</strong><br>问题：大量 key 同时失效或 Redis 宕机导致大量请求访问数据库，带来巨大压力<br>解决思路：<br>1不让 key 同时失效<br>2尽量不让 Redis 宕机</p><p>具体解决方案：</p><p><strong>缓存击穿</strong><br>又叫热点 key 失效：</p><p>两种解决方案：<br>1互斥锁：只有一个线程会负责缓存重建，其余线程拿不到锁，就等着<br>2逻辑过期：key 设置为永不过期，在 value 中记录过期时间，业务中根据这个过期时间来判断缓存是否有效；如果缓存已过期，只有一个线程能抢到锁（然后需要再次判断是否存在缓存），开启独立线程去更新缓存，然后立即返回过期数据；其他抢不到锁的线程也立即返回过期数据，不用等着锁释放。<br>如图：</p><p>两种方式都使用了互斥锁来降低缓存重建的开销。<br>方案优缺点对比：</p><p>以上几种缓存常见问题的解决方案其实是和业务无关的，因此我们可以封装自己的缓存操作工具类（参考 P46，这集很推荐）。</p><p><strong>分布式全局 id 生成</strong><br>P48 - 49<br><strong>介绍</strong><br>为什么需要分布式全局 ID 生成器？<br>1对于订单这种数据，数据库自增的规律性太明显，会暴露一些信息（比如根据昨日和今日的订单号差值看出销量）<br>2数据量过大时，不同表的 id 分别自增，容易出现 id 冲突</p><p>分布式全局 ID 生成应满足的特点：<br>1唯一：整个系统每个 id 都是唯一的<br>2递增：虽然不连续，但整体 ID 保持递增，有利于数据库创建索引（也符合自然规律）<br>3安全：不能通过 id 看出敏感业务信息<br>4高可用：作为核心服务，不能挂掉，否则会影响新数据的生成<br>5高性能：作为频繁调用的服务，性能一定要高</p><p>几种常见的 ID 生成方法，建议根据自己的实际需求选择和设计算法：<br>●雪花算法：性能更高，引入机器序号，但依赖全局时钟<br>●数据库自增：单独的自增表，所有 id 全从这个表取。但性能没有 Redis 高<br>●UUID：随机生成十六进制字符串，性能高，但是乱序、字符串会占用更多空间<br>●Redis 自增 ID：利用 incr 命令实现单 key 的自增</p><p>Redis 自增 ID 完全可以满足以上几个分布式全局 ID 的特点。</p><p><strong>设计实现</strong><br>以下是一种 ID 生成的设计，使用 Long 类型（64 位）存储 id：</p><p>使用 Redis 的 Incr 命令，可以实现后 32 位的原子性递增。<br>Redis 的 key 可以设计为 [业务]:[类型]:[日期]，这样每天都会从 1 开始生成序列号。如果用单 key，可能会出现生成序号数溢出 2^32 的情况。</p><p><strong>秒杀业务</strong><br>秒杀业务的核心流程是：判断日期和库存、扣减库存、创建订单<br>如下图：</p><p>注意，秒杀库存信息和商品信息最好是独立的两张表，不要放在一起影响性能。</p><p><strong>订单超卖问题</strong><br>出现的原因：有多个人同时下单，在库存扣减前大家查到的库存都 &gt; 0，所以都触发了扣库存操作。</p><p><strong>解决方法</strong><br>1）悲观锁：假定每次并发都会冲突，所以干脆给操作整体加锁，将并发改为同步执行。<br>可以通过 synchronized 关键字实现。<br>优点是实现简单，缺点是严重影响性能（大家可以同时抢购）。</p><p>2）乐观锁：假定并发不一定会冲突，所以不加锁，而是通过判断数据是否在查出来之后被其他线程修改过，来决定是否允许操作。</p><p>乐观锁主要有版本号法和 CAS 两种实现方式。</p><p>版本号法：<br>给数据增加一个版本号字段，每次修改操作版本号 + 1，就可以通过版本号来判断数据是否有被修改。</p><p>CAS 是对乐观锁的简化，即直接用一个每次都会查询和更新的字段来代替版本号，比如库存 stock 字段：</p><p>优点：性能好<br>缺点：存在成功率低的问题（很多人查到的版本号是一样的， 结果只能有一个人操作成功），可以使用分段锁来改进。比如将 100 个库存分为 10 份，大家分别抢这 10 份。</p><p>对于以上这种场景，其实不用判断 stock 是否变化，可以直接判断 stock &gt; 0，从而保障成功率。</p><p><strong>一人一单</strong><br>对应视频 P54，这集封神</p><p>优惠券或者秒杀活动的目的是为了吸引新用户，因此不能让一个用户把所有东西都抢走了。所以需要额外判断用户当前下单数是否 &gt; 0。<br>这一步操作在多线程场景下依然会出现问题：新用户第一次进来同时抢 10 次，结果判断下单数都是 0，然后就都抢成功了。</p><p>所以还是需要加锁，因为订单是新创建的数据，所以无法使用乐观锁，使用悲观锁实现。</p><p><strong>单机实现</strong><br>单机部署后端服务器时，可以使用 Java 自带的 Synchronized 关键字作为悲观锁。<br>要注意以下几个细节问题：<br>1）synchronized 锁的范围不能太大，不能锁住整个对象，会严重影响性能。因为是一人一单，所以可以每个用户一把独立的锁。<br>注意，锁住对象时要用 toString.intern，保证同 id 的用户始终是同一个对象：<br>2）synchonized 必须在使用 @Transactional 注解的方法外层使用，因为 @Transactional 是使用动态代理，在方法执行结束后才提交事务。如果把 synchronized 写在事务方法内，提交事务前锁已经释放，但此时数据还未更新，其他线程依然能获取锁并顺利执行。<br>3）调用事务方法时不能用 this 对象，因为 @Transactional 注解实际上是调用 Spring 生成的代理对象的方法，如果调用 this 对象的方法会无法使用事务功能，所以要获取代理对象并调用。</p><p>最终示例代码如下：</p><p><strong>分布式实现</strong><br>Synchronized 关键字只对单个 JVM 有效，多机部署时还是可能会同时有多个不同 JVM 的线程访问已加锁的方法。<br>如下图：</p><p>因此，我们不能把锁存储到单个服务器上，而是应该使用一个集中的存储来管理锁，所有进程都能读到它。<br>这就需要分布式锁。</p><p><strong>分布式锁</strong><br>P55 - 68<br>分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。</p><p>分布式锁的两个基本特征：<br>1多进程（线程）可见（读写）<br>2互斥</p><p>还应具备的特征：<br>1高可用：不能挂机<br>2高性能：读写要快<br>3安全性：不能出现死锁</p><p><strong>实现方式</strong><br>主要有以下 3 种：</p><p>其中，MySQL 的实现成本相对最低、Redis 性能最高、Zookeeper 可以实现但不推荐使用（Zk 重点在于保证强一致性而不是性能和高可用性，CP 模型）</p><p><strong>Redis 分布式锁实现</strong><br>获取锁：<br>●使用 setnx 命令设置 lock（本质是创建一个 redis 键值对），保证只有一个线程获取锁成功（满足互斥）并执行业务逻辑，其他线程可以重试或返回失败。<br>●必须 setex 指定 lock 的过期时间（满足安全性）</p><p>注意事项：<br>1为了防止 setnx 后就宕机了导致 lock 永久存在，必须使用 set [key] ex nx 的原子命令，保证每个 lock 都有过期时间。<br>2锁的 key 值建议设计为包含 userId 的，保证多个用户可以并发执行操作，而不是多个用户抢同一把锁。</p><p>释放锁：<br>●主动释放：业务执行完成删掉 key，注意需要把释放锁的逻辑放到 finally 里保证一定执行<br>●超时自动释放（key 过期）</p><p>流程图：</p><p><strong>误删问题</strong><br><strong>情况 1</strong><br>如果线程 A 执行业务时间过长，锁提前过期了，另一个线程 B 会拿到锁并执行业务流程，这时 A 又突然执行完了，结果误删了线程 B 加的锁，会导致新的线程 C 又能拿到锁，从而出现线程安全问题。<br>如图：</p><p><strong>情况 1 - 解决方案</strong><br>获取锁的时候在 value 中存入【本机标识 + 当前线程 id】，释放锁时检测 value 必须等于该值，是自己的锁才能释放。<br>注意，不能只在 value 中存入线程 id，因为多个机器的线程 id 可能是一样的，仍然可能会出现误删。因此可以给每个机器生成一个唯一标识（比如 UUID），再拼接 id。</p><p>流程如下：</p><p><strong>情况 2</strong><br>假设线程 A 释放锁时已经判断了是自己加的锁，但就在这时，JVM 触发了 Stop The World，线程 A 卡住了，然后锁超时释放了，线程 B 就拿到了锁并执行业务。这时，线程 A 又 “醒了”，删除了锁 key，线程 C 又可以拿到锁并执行了，又出现了线程安全问题。<br>如下图：</p><p><strong>情况 2 - 解决方案</strong><br>问题的本质是判断锁 value 和删除锁是两个动作，不具备原子性！<br>可以使用 Redis Lua 脚本，将多个 Redis 命令放到一个脚本中，整个脚本的执行具备原子性。<br>Lua 语言是轻量脚本语言，可以很方便地嵌入到各种应用程序中。<br>不用刻意去学习，随用随查：<a href="https://www.runoob.com/lua/lua-tutorial.html">https://www.runoob.com/lua/lua-tutorial.html</a></p><p>Lua 脚本可以使用 redis.call 调用 redis 命令，并支持传递动态参数：</p><p>用 Lua 脚本来释放锁的脚本如下：<br>就是把判断和删除组合在一起了</p><p><strong>其他问题</strong><br>除了误删之外，现在的分布式锁实现还存在以下几个问题：<br>1不可重入：同一个线程无法获取同一把锁（递归调用或调用的子函数抢同一把锁时就会出现死锁）<br>2不可重试：没抢到锁就失败了<br>3超时释放：业务未执行完，锁就超时释放了<br>4主从一致性：主节点设置锁成功，还未及时同步到从节点，这时主节点宕机，从节点被选为主节点。但此时从节点还没有锁，仍可以抢锁成功。</p><p>要自己解决这些问题，非常麻烦，所以我们一般会选择现成的类库，比如 Redisson。</p><p><strong>Redisson 实现分布式锁</strong><br>Redisson 是 Java 的 Redis 高级客户端，提供了各种现成的分布式工具类便于我们使用 Redis。<br>官网：<a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a><br>中文文档：<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95">https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95</a><br>使用方式非常简单：<br>1）引入独立的 redisson 包：<br>不建议引入 springboot-starter，因为可能会和 springboot 内置的 redis 整合冲突</p><p>2）创建一个 Redisson 客户端，代码如下：</p><p>3）使用 Redisson 的 Lock，示例代码如下：</p><p><strong>如何实现可重入锁？</strong><br>目的：保证同一个线程可以多次获取同一把锁<br>解决思路：在锁的 value 中额外保存当前线程获取锁的次数，每次获取锁 +1、释放锁 -1，当次数为 0 时才真正删除 key。<br>采用 hash 结构来存储锁信息，如图：</p><p>流程如下：</p><p>注意：<br>1所有的判断和操作都需要使用 Lua 脚本来保证原子性<br>2每次获取和释放锁时要重置锁的有效期，就像新抢到锁一样，给业务充分的执行时间</p><p>获取锁的 Lua 脚本：</p><p>释放锁的 Lua 脚本：</p><p><strong>如何重试获取锁？</strong><br><strong>基于 Redis Pub &#x2F; Sub 发布订阅机制。</strong>如果获取锁失败，则阻塞订阅释放锁的消息；当锁被释放时，会触发推送（告诉其他线程我释放锁啦），然后其他线程再重试获取；如此往复，直到超时。</p><p><strong>如何防止锁提前超时释放？</strong><br><strong>基于看门狗机制。</strong>如果不手动设置锁释放时间（leaseTime），默认设置 30 秒过期，并且给当前锁注册一个定时任务，该定时任务每隔 1 &#x2F; 3 的锁释放时间（一般是 10 秒）会重置锁的过期时间（递归调用，一次续期完了再）。<br>需要思考两个问题：<br>1如何保证同一个锁只注册一个定时任务？<br>2如何防止无限续期？<br>要解决这些问题，使用全局 ConcurrentHashMap 来管理锁 &#x3D;&gt; 任务信息，key 为锁的 id，从而保证唯一。当某个锁释放时，从全局 ConcurrentHashMap 中取出定时任务并取消掉，然后把锁的信息从 Map 中删掉即可。</p><p>最终，完整的分布式锁流程如下：</p><p><strong>如何解决主从一致性问题？</strong><br>如果使用主从复制的 Redis 集群，可能出现主从节点设置的锁状态不一致的问题。<br>可以使用 Redisson 的 MultiLock（联锁）来解决，核心思想是开启多个独立的 Redis 主节点，设置锁时必须在所有主节点都写入成功，才算设置成功。<br>这样做之后，哪怕有部分节点挂掉，其他线程也无法 setnx 全部成功，就不会出现重复执行业务的情况。<br>如下图：</p><p>实现 MultiLock 的几个关键：<br>1遍历所有节点，依次设置锁，并使用列表来记录所有主节点的锁是否设置成功。<br>2只要有一个节点设置不成功，就要释放所有的锁，从头来过。<br>3因为不同节点设置锁成功的时间不同，所以在所有锁设置成功后，要统一设置过期时间（但如果 leaseTime &#x3D; -1 就不用了，因为开启了看门狗机制会自动续期）<br>4锁释放时间（leaseTime）必须要大于抢锁最大等待时间（waitTime），否则可能出现第一个节点抢到锁，最后一个节点还没抢到锁，之前的锁就已经超时释放了。所以如果指定了 waitTime 和 leaseTime，默认 leaseTime &#x3D; waitTime * 2。</p><p>MultiLock 最安全，但同样会带来很大的运维成本。</p><p><strong>秒杀业务优化</strong><br>优化思路：<br>●串行改并行：原本由 1 个线程的操作改为由 2 个或多个线程同时操作，比如 1 个线程负责判断秒杀资格，1 个线程负责减库存 + 创建订单（写）<br>●同步改异步：判断完秒杀资格后，就可以返回订单 id 给前端；其余的写库操作可以异步执行。<br>●提高判断秒杀资格的性能：读 DB 改为读 Redis</p><p>优化后的流程如下：<br>1）将库存信息提前缓存到 Redis 中，并使用 set 来记录用户是否已下单，实现仅在 Redis 里判断秒杀资格</p><p>2）将判断秒杀资格的逻辑封装为 Lua 脚本，保证原子性，原业务流程调用即可<br>3）确认有秒杀资格后，将订单等信息传递给阻塞队列，单个独立线程串行从队列中取出信息并异步下单</p><p>这样一来，可以大大提高性能。<br>阻塞队列可以用 JDK 原生的 BlockingQueue 实现，记得指定队列容量。</p><p><strong>消息队列</strong><br>JDK 阻塞队列可能存在哪些问题？<br>1服务器宕机，内存队列中的订单信息全部丢失<br>2线程处理错误，已取出单个订单信息，但没有入库<br>3受单 JVM 内存限制</p><p>所以，我们需要一个独立的队列来存管订单信息，也就是消息队列。</p><p><strong>什么是消息队列？</strong><br>存管消息的队列，也是一种开发中常用的中间件。<br>消息队列包括 3 个角色：<br>1消息队列：用于存管消息，类似快递柜<br>2生产者：发送消息到队列，类似快递员<br>3消费者：从队列取走消息，类似取快递的人<br>如图：</p><p>使用消息队列的优点（或者说是对其的要求）：<br>●可以保证我们消息的安全、不会丢失（快递柜上锁）<br>●可以解耦生产者和消费者（不用立刻去取快递）<br>●独立组件，不影响 JVM<br>●可以保证消息一定被接受，避免线程处理错误后订单丢失的问题<br>●消息是有序的</p><p><strong>实现方式</strong><br><strong>Redis List 实现</strong><br>使用 Redis List 的结构作为消息队列，使用 LPush 模拟生产者发送消息入队，使用 BRPOP（阻塞弹出）模拟消费者取出消息。没有消息时会保持阻塞状态，从而实现了类似 JVM 阻塞队列的效果。<br>可以满足消息队列的安全性（Redis 持久化机制）、有序性、独立内存的要求。<br>缺点：<br>1只能存在单消费者<br>2消息获取之后就删除了，无法保证业务一定处理成功</p><p><strong>Redis Pub &#x2F; Sub 实现</strong><br>使用 Redis 的订阅发布模型，生产者可以将消息推送给某个 Channel（频道），多个消费者可以订阅该频道，从而同时得到消息。（可以理解为 “你关注的 UP 主更新啦”）<br>用到的命令主要是：<br>●Publish 推送<br>●SubScribe 订阅<br>●PSubScribe 订阅某个表达式匹配的多个频道<br>这样就实现了多生产、多消费。<br>缺点比较多：<br>1Pub &#x2F; Sub 是一次性的，Redis 不会保存发过的消息，没人收的话消息就会丢失<br>2因为上一点，它也无法做数据持久化<br>3客户端虽然可能会缓存已收到的消息，但也是有上限的，可能还是会丢失消息</p><p><strong>因此不建议使用。</strong></p><p><strong>Redis Stream</strong><br>p75 - 77<br>这是 Redis 5.0 新出的数据结构，可以实现单向的消息队列。<br>核心命令：<br>●XAdd：添加消息 &#x2F; 创建队列，消息会自动持久化、不会丢失，每个消息都有唯一 id<br>●XRead：读取消息，支持多消费者读、可从指定消息 id 开始读、支持阻塞读最新消息<br>只用这两个命令还是不够的，因为目前只支持阻塞读 **最新 **消息，假设处理消息过程中又来了几条消息，可能出现漏读消息的情况<br>为解决上述问题，可以用 Stream 的以下特性：<br>●消费组：同组内的多个消费者可以竞争消费（每个消息只有一个消费者能抢到），从而提高消费能力（并发度）。对应命令为 XGROUP、XREADGROUP 等。<br>●消息标识：自动记录消费的进度，支持从上次未消费的地方开始接着消费，保证每条消息按顺序消费<br>●消息确认机制：默认消费的消息为 pending 状态，会放到每个消费者的 pending list 中，只有消息由消费者确认（ACK），才会从 pending list 移除。这样如果消费业务处理异常，可以从 pending list 的开头依次读取未确认消息，重试处理。（也要避免无限重试，实在处理不成功就强制 ACK + 业务记日志）<br>整个消费流程伪代码如下：</p><p>在 Java 中操作 Redis Stream 有两种方法：<br>1调用 Lua 脚本<br>2使用 Redis Tempalte 的 opsForStream()</p><p>几种方案对比：</p><p>注意，Redis 虽然可以实现较完备的消息队列，但还是不如专业的消息队列像 Kafka、RabbitMQ、RocketMQ 要专业，比如持久化能力较差、不支持生产确认、消费顺序性等。</p><p><strong>点赞</strong><br>P80<br>流程：<br>1判断用户是否已点赞<br>2更新 DB 点赞数和点赞关系</p><p>如果全部操作数据库，性能不高，可以把判断是否已点赞、维护点赞关系的逻辑移至 Redis，只用更新数据库点赞数即可。<br>可以使用 Redis Set 结构，比如 key &#x3D; like:[帖子 id]，value 为去重的已点赞用户 id 列表，就可以判断是否已点赞了。</p><p>视频中的点赞代码其实还有问题，还是可能出现同时点赞的情况，可以参考上面秒杀优化的逻辑，使用分布式锁、或者 Lua 脚本解决，操作 DB 的部分也可以使用异步、队列之类的机制，具体情况具体分析。</p><p><strong>排行榜</strong><br>P81<br>示例需求：展示最先给某个帖子点赞的 TopN 用户<br>实现：使用 Redis SortedSet（自动按 score 排序的数据结构），把用户点赞时间作为 score 即可，使用 ZRange 范围查询 TopN。</p><p><strong>共同关注</strong><br>P83<br>需求：计算两个人共同关注的所有用户<br>思路：本质就是求两个用户关注集合的 <strong>交集</strong><br>实现：使用 Redis Set 数据结构，每个 key 保存 1 个用户的关注集合（取关时从集合中移除对应用户），最后对 2 个用户对应的 set 进行 intersect 取交集操作即可</p><p><strong>Feed 流关注推送</strong><br>场景：UP 主发布新内容时，系统会给所有粉丝发送一个消息<br><strong>何为 Feed 流？</strong><br>Feed 流是指无限下拉刷新的内容列表，给用户沉浸式的体验。</p><p>两种模式：<br>1Timeline 时间线模式：所有内容按时间顺序展示，比如朋友圈<br>2智能排序模式：根据一定算法推荐用户感兴趣的内容，比如现在的视频网站</p><p>现在我们要解决的问题是：如何把关注用户的新内容展示到 Feed 流中？</p><p><strong>实现方案</strong><br>1）拉模式：用户上线打开 Feed 流时，再获取关注 UP 推送的内容（用户主动拉，可能比较耗时）</p><p>2）推模式：UP 主发布内容时，直接把内容推到所有粉丝内容列表里（粉丝多的大 UP 主写入时可能会很耗时、占用资源）</p><p>3）推拉结合：<br>推模式应用于：粉丝少的 UP、推送给活跃用户<br>拉模式应用于：粉丝多的 UP &amp;&amp; 推送给非活跃用户</p><p>各种方式的优缺点：</p><p>一般系统用户量级小时采用推模式，系统用户量大（尤其是有大 V）采用推拉结合模式。</p><p><strong>推模式 Redis 实现</strong><br>因为推送是按时间排序的，所以可以使用 SortedSet 数据结构来保存，每个 key 表示一个用户的收件箱，value 为推送 id、score 为推送时间戳。<br>查询所有推送时直接遍历 SortedSet 即可。<br><strong>分页问题</strong><br>但是要注意，由于消息是不断增加的，如果需要分页查询，每条消息的下标都会动态变化，导致数据重复查询，如下图：</p><p>因此，可以使用滚动分页，记录每次当前页查询到的最后一条数据的时间戳（类似游标）。查询下一页时，从当前时间戳的下一条开始查询即可，如图：</p><p>可以使用 SortedSet 的 ZRevRangeByScore 命令实现，每次查询指定时间戳范围（0，当前最大时间戳）的指定条数的数据。示例命令：ZRevRangeByScore key 0 maxTimeStamp offset limit。<br>注意有个问题，可能出现相同时间戳的数据，因此第一次查询时 offset 为 0（从第一条开始查），之后每次查询，offset 为上一页中时间戳最小值的数量，保证不查出重复数据。<br>比如 score 列表为：5, 4, 4, 3, 2, 1。每页 3 条。<br>第一次查询 ZRevRangeByScore key 0 9999999 0 3 查出 5、4、4，最小值 4 重复 2 次，即下一次的最大值为 4、offset 为 2。<br>所以第二次查询为 ZRevRangeByScore key 0 4 2 3 查出 3、2、1</p><p><strong>GEO 地理坐标计算</strong><br>P88 - P90<br>Redis 支持 GEO 数据结构，可用于存储多个地理坐标、计算坐标间的距离，计算某坐标半径范围内的其他点和距离（实现附近的人）。<br>GEO 底层是 SortedSet 类型<br>支持以下命令：</p><p><strong>查附近</strong><br>需求：查询你附近所有的小姐姐，以及每个小姐姐和你的距离，并且按照距离由近到远排序<br>实现：<br>1使用 GEOADD 添加所有小姐姐的 id 和位置到一个 key 中<br>2使用 GEOSEARCH 查询以你当前坐标为中心、指定距离内的所有小姐姐，默认返回的就是由近及远的 SortedSet（value 为 id、score 为和你的距离）<br>小技巧：<br>如果我们要根据分类来计算同组内的距离及排名，可以每个类别一个独立的 key，如图：</p><p><strong>BitMap</strong><br>多个二进制位组成的数据结构，每个二进制位对应一个业务的两种互斥状态。比如：10010011。<br>BitMap 的优点是可以用最小的代码（1 个 bit）来保存业务含义，从而大幅节省空间、实现高效运算等。比如可以把某个二进制位从 0 改为 1。<br>底层是 string 类型，以字节为单位存储，所以 bit 的长度为 8 的倍数</p><p>命令：</p><p><strong>签到功能</strong><br>这是 BitMap 的一个经典应用场景。<br>如果使用传统数据库来记录用户某日签到状态，每次签到对应 1 行数据，那么将占用几百 byte 的空间。用户量大了后，占用的内存不可估量。<br>而使用 BitMap，可以用每一个二进制位表示当天的签到状态，0 表示用户已签到、1 表示用户未签到，如下图：</p><p>只用 31 bit，就能表示某用户 1 个月的签到状态。<br>其原理就类似于签到卡，用户可以在一张签到卡上同时对多个不同的日期进行签到，从而避免了重复的用户签名、重复去写日期。</p><p><strong>基本实现</strong><br>用 BITSET 设置某一天对应位置的 bit 值即可，需要查询签到状态时可以用 BITFIELD GET 取出整个 BitMap 的十进制值，再用 **位运算 **将十进制值转为业务需要的格式。</p><p><strong>统计连续签到天数</strong><br>可以先用 BITFIELD GET 取出整个 BitMap 的十进制值。然后循环右移，依次用 1 去和 BitMap 的最后一位进行 <strong>与运算</strong>，即可得知当前位数是否为 1（已签到），配合计数器完成连续 1 的统计。<br>示例代码如下：</p><p>注意，循环右移一定要用 &gt;&gt;&gt;（无符号右移，高位补 0），否则可能会死循环。</p><p><strong>HyperLogLog</strong><br>HyperLogLog（HLL）是 Redis 的高级数据结构，使用概率学算法实现，可以用极低的内存实现不重复元素个数的统计。<br>用法和集合类似，插入元素、求不重复元素个数、合并多个 HLL 等：</p><p>优点：占用内存极低，不会超过 16 Kb<br>缺点：基于概率统计，存在 &lt; 0.81% 的误差<br>因此，它很适合用于 UV、PV 等数据量大、精度要求不高的统计。</p><p><strong>UV &#x2F; PV 统计</strong><br>只需要把用户 id 用 PFADD 添加到 HLL 中，用 PFCOUNT 求值即可；还可以用 PFMERGE 合并多天的统计，来估算整月的 UV。</p><p>刚开始学习 Redis 的朋友学完上面两大章节就够了（P1 - P95），在求职面试前可以再看下面的部分深入学习。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661838712523-ef4a9938-379e-4633-90cd-04fedfa53af4.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f3f1f1&from=url&id=YQo54&originHeight=642&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661860409628-60998ca7-81bc-427b-84ec-25ca927cacc7.png?x-oss-process=image/resize,w_1081,limit_0#averageHue=%23152737&from=url&id=N2iLP&originHeight=577&originWidth=1081&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661862706289-0d131c29-9848-41e9-89a9-4dd0e07d78ca.png#averageHue=%23cbcbc9&from=url&id=hJCyX&originHeight=310&originWidth=1420&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661861550219-c870a6c5-c3b8-45c2-a98c-d40ee9da54cc.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f2f2f2&from=url&id=iQ9kk&originHeight=814&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661862400679-42bd43d3-c014-4bef-84c6-cfda891a1e10.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23cececc&from=url&id=p2PgD&originHeight=523&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661862672521-cda7532d-f7df-45f8-afcd-05d711768631.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f3f3f3&from=url&id=E3skD&originHeight=763&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661863091505-4e936f4b-4bd9-4725-a3fe-3af79521b3b5.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f6f6f6&from=url&id=x8qVC&originHeight=684&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661863589046-7495e388-5607-4a74-8579-70110e2bcabf.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f1f0ef&from=url&id=JjrO6&originHeight=620&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661864069819-a212e48e-6847-402f-9c8b-c49da2035fd5.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f1f1f1&from=url&id=LbPhC&originHeight=692&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661864923846-67ea2b28-c325-4086-af4a-bbc3edd04de4.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23fef9f8&from=url&id=Bj4K6&originHeight=1070&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661871634006-05f40eaf-65ce-4995-8f50-dc4e05294aaf.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23e6e6e3&from=url&id=CMqQF&originHeight=436&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661873415341-491e659b-d90b-4f26-b049-b9e87e9bb620.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f7f7f7&from=url&id=YpId9&originHeight=671&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661921616087-778dd8bf-63cc-4796-b1c3-677122547928.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f7f6f6&from=url&id=FXUqU&originHeight=596&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661922180950-6aa9be44-d6cb-4753-a2c7-0b808e6de6ca.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f1eeee&from=url&id=YIIgk&originHeight=689&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661923370328-3c051d77-234c-4553-a207-a0f897bd2779.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23e5d4d3&from=url&id=wtC4g&originHeight=658&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661923818451-afd131ec-3f5e-4147-af3d-2bcf310a0112.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23fafafa&from=url&id=okFfA&originHeight=661&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661924258122-ccc9a1d4-16a8-46bb-9e44-cd4d4a85ae42.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f2f2f2&from=url&id=j6WYz&originHeight=667&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661924949521-2c030516-1fe7-4685-85e4-c6b686b5a0fe.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23ecebeb&from=url&id=THqDc&originHeight=659&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661925752772-983448c9-25a2-486a-98fd-a723ea56ca82.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f4f3f3&from=url&id=yi9ea&originHeight=681&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661944372353-2f44d70a-6207-42b5-8602-bdfb0330d159.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f5f5f5&from=url&id=pEUdX&originHeight=574&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661945589442-a88fd882-3452-461e-9adb-9bfa2a577eb6.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f3f0f0&from=url&id=QIaxz&originHeight=576&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661945757372-9427691c-56bc-4521-b996-e93c7351afe0.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f4f4f3&from=url&id=YQLfc&originHeight=646&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661946415976-1cc6c5fa-f333-4088-9efe-a8431b857d43.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23eeeded&from=url&id=Ss4FC&originHeight=674&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661946774577-4368f0a8-419c-42a4-87cd-6e3c8c81f957.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f8f8f6&from=url&id=ohoc1&originHeight=533&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1661961347541-af9312d5-4416-4f1e-852d-8daad9aaf72b.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f7f5f5&from=url&id=NkuBt&originHeight=680&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662008375039-1a71b20d-1d87-4607-b7e0-c29b05808d41.png?x-oss-process=image/resize,w_1076,limit_0#averageHue=%23fbfafa&from=url&id=bADud&originHeight=854&originWidth=1076&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662008722698-a9549270-6dc2-4ede-b081-07e0e6ba0456.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f5f5f5&from=url&id=tIqJu&originHeight=704&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662009330789-7326c51e-3039-456c-8f3d-b4530e53445b.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23faf9f9&from=url&id=SoWPM&originHeight=598&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662009326982-7488a52c-d95d-4d88-85a0-29d5884b28f0.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23fbfafa&from=url&id=z8pJx&originHeight=589&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662011259738-a6a16663-4e36-438d-9e78-f40063cd67c4.png?x-oss-process=image/resize,w_1254,limit_0#averageHue=%23f1f4eb&from=url&id=N5s3H&originHeight=247&originWidth=1254&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662030241202-f47dd469-1d9b-4df5-9f26-092d2730d984.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23efeded&from=url&id=DKaIh&originHeight=596&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662031300272-0956bc6b-69e4-48f5-87fe-47b7e5df15d8.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f8f2f0&from=url&id=ZS9jz&originHeight=556&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662031740955-361196d9-008c-430f-96c9-968da059d16e.png#averageHue=%23f8f6f6&from=url&id=bovSf&originHeight=822&originWidth=598&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662052166859-f38be15f-b57d-40e9-ba2c-1fb638039954.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23faf9f9&from=url&id=WpXlq&originHeight=549&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662051386701-c39bfd2a-1e7a-43fb-8af2-cb6380ddc4db.png?x-oss-process=image/resize,w_563,limit_0#averageHue=%23f1edea&from=url&id=wmnP7&originHeight=670&originWidth=563&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662051917992-256924ba-49b7-4eeb-bff8-0db968eea18d.png?x-oss-process=image/resize,w_1149,limit_0#averageHue=%23f9f8f8&from=url&id=KYXeH&originHeight=668&originWidth=1149&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662052994671-0557ed25-ed75-4aec-8341-e91371d3647c.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23d1d6ca&from=url&id=eIMpl&originHeight=665&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662093874892-f64e6e31-c729-45af-83c1-e5a4b04363b0.png?x-oss-process=image/resize,w_955,limit_0#averageHue=%230f2332&from=url&id=RQgRF&originHeight=231&originWidth=955&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662098121346-c34758fa-9b99-412a-9b42-6fe8cd30bda3.png#averageHue=%23e0e0e2&from=url&id=dwn5h&originHeight=232&originWidth=450&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662097922411-4ba1a8d5-e402-4ddf-8596-b19f13a5f216.png?x-oss-process=image/resize,w_680,limit_0#averageHue=%23e8dddb&from=url&id=pHeGt&originHeight=729&originWidth=680&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662098279361-b6b0adaf-5a46-4eae-92c9-29617aebc684.png?x-oss-process=image/resize,w_749,limit_0#averageHue=%23edf0ea&from=url&id=IoJrQ&originHeight=658&originWidth=749&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662098247596-3ac5bdd5-13fd-412a-89af-75a8d845ea5d.png?x-oss-process=image/resize,w_778,limit_0#averageHue=%23eef1eb&from=url&id=MbWjp&originHeight=600&originWidth=778&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662120120114-c6cb6b96-0d32-4d1d-9d70-63f20fdc1ace.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23fcfcfc&from=url&id=GkdjS&originHeight=619&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662135970012-219beab6-83e4-47f2-b6c3-490875f31be3.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f0ece3&from=url&id=qrQWC&originHeight=498&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662138152995-d16f2727-c4d9-40da-bf39-065150d7ed0a.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23fcfcfc&from=url&id=dXZGs&originHeight=607&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662170418646-2bafd7db-ad02-43c9-a0e6-724fee09823c.png#averageHue=%23e5e6e5&from=url&id=oGjME&originHeight=150&originWidth=1416&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662170512882-07909c3b-932c-4f8f-bbf8-16f5f6d9d83d.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f6f6f6&from=url&id=OIqA9&originHeight=504&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662173544679-5086e788-493d-49ee-9ec3-81094b25119f.png#averageHue=%23a2b96c&from=url&id=LXmyA&originHeight=180&originWidth=1596&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662187831281-8d39b9bb-ca7a-40c2-9cf5-ec24c22afc9e.png?x-oss-process=image/resize,w_931,limit_0#averageHue=%23f3f3f5&from=url&id=t0SS3&originHeight=849&originWidth=931&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662187826716-5ff99aa2-fb34-49b8-9795-acb6f925a4b1.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f9f7f4&from=url&id=BZ0eq&originHeight=579&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662199526960-ad74c98d-869d-454a-88be-06f0bbf6e236.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23fcfcfc&from=url&id=AAvI7&originHeight=667&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662199531728-ab03c11f-4c34-4758-85c0-d97db0eb17a1.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23fdfdfd&from=url&id=KahaN&originHeight=827&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662199536976-2a8e6360-4eb0-45b4-8d5d-ac35579b2271.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23fbfbfb&from=url&id=oEZWn&originHeight=713&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662199523680-8bbeeea1-d638-420b-be70-4c7aa72b6e3f.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f8f5f3&from=url&id=eriRG&originHeight=578&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662258685043-daec4891-e0b5-4034-b784-e41dd23aaef6.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f9f8f8&from=url&id=zWvjC&originHeight=680&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662258695058-1cf81cf7-601e-4aeb-8941-bb97f89cc444.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f9f9f8&from=url&id=SEsXU&originHeight=696&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662259856441-adec18e0-f19f-4839-8138-0e207f66fdaa.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f1f1f1&from=url&id=ii8FC&originHeight=547&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662261432855-a5b54817-a81d-42a7-9864-7d3a7a52d6de.png?x-oss-process=image/resize,w_747,limit_0#averageHue=%23b8beb4&from=url&id=owoHt&originHeight=393&originWidth=747&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662263399913-82c17736-6b4f-4bbc-910f-392b016a86ce.png?x-oss-process=image/resize,w_1312,limit_0#averageHue=%23f2f2f2&from=url&id=t2MXn&originHeight=599&originWidth=1312&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662263817244-d2e78caf-38b9-490f-8b9b-756d4cdec63f.png#averageHue=%23faf9f9&from=url&id=gwLv8&originHeight=352&originWidth=1442&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662264055714-e9977747-f48d-4e69-96b5-06189f31394e.png?x-oss-process=image/resize,w_315,limit_0#averageHue=%23dbd9aa&from=url&id=heOm9&originHeight=571&originWidth=315&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662265366088-f364fe64-cc67-427b-a9d9-7e216c6c7bc8.png?x-oss-process=image/resize,w_1106,limit_0#averageHue=%23f4f8f1&from=url&id=fzQam&originHeight=485&originWidth=1106&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1662270538754-0a2ec2e5-c32c-42cc-9cfc-d5650fbc7c0f.png?x-oss-process=image/resize,w_1176,limit_0#averageHue=%23102136&from=url&id=GDmr2&originHeight=394&originWidth=1176&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br>1</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客建站记录</title>
      <link href="/2023/07/10/Servlet-JSP%20/"/>
      <url>/2023/07/10/Servlet-JSP%20/</url>
      
        <content type="html"><![CDATA[<ol start="3"><li><h1 id="需要提前准备了哪些技术"><a href="#需要提前准备了哪些技术" class="headerlink" title="需要提前准备了哪些技术"></a>需要提前准备了哪些技术</h1><ul><li>JavaSE（Java语言的标准版，Java提供的最基本的类库） <ul><li>Java的开发环境搭建</li><li>Java的基础语法</li><li>Java的面向对象</li><li>数组</li><li>常用类</li><li>异常</li><li>集合</li><li>多线程</li><li>IO流</li><li>反射机制</li><li>注解Annotation</li><li>…..</li></ul></li><li>MySQL（数据库） <ul><li>最基本的要求是：能够编写增删改查等简单的SQL语句即可。</li></ul></li><li>JDBC（Java语言链接数据库） <ul><li>这是一套Java语言链接数据库的接口。</li></ul></li><li>WEB前端（会一些） <ul><li>HTML（网页）</li><li>CSS（层叠样式表语言，修饰HTML）</li><li>JavaScript（一种脚本语言，运行在浏览器当中，让浏览器中的元素可以增删改。让网页产生更强的交互效果）</li></ul></li><li>WEB后端 <ul><li>Servlet（Server Applet：服务器端的Java小程序）</li><li>JSP</li><li>AJAX</li><li>jQuery</li><li>MyBatis</li><li>Spring</li><li>SpringMVC</li><li>SpringBoot</li><li>SpringCloud</li><li>……</li></ul></li></ul><h1 id="Typora软件介绍"><a href="#Typora软件介绍" class="headerlink" title="Typora软件介绍"></a>Typora软件介绍</h1><ul><li>Markdown文本编辑器（可以编辑xxx.md文件）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test code!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="关于系统架构"><a href="#关于系统架构" class="headerlink" title="关于系统架构"></a>关于系统架构</h2><ol><li>系统架构包括什么形式？ <ul><li>C&#x2F;S架构</li><li>B&#x2F;S架构</li></ul></li><li>C&#x2F;S架构？ <ul><li>Client &#x2F; Server（客户端 &#x2F; 服务器）</li><li>C&#x2F;S架构的软件或者说系统有哪些呢？ <ul><li>QQ（先去腾讯官网下载一个QQ软件，几十MB，然后把这个客户端软件安装上去，然后输入QQ号以及密码，登录之后，就可以和你的朋友聊天了，就可以使用这个软件了。）</li></ul></li><li>C&#x2F;S架构的特点：需要安装特定的客户端软件。</li><li>C&#x2F;S架构的系统优点和缺点分别是什么？ <ul><li>优点： <ul><li>速度快（软件中的数据大部分都是集成到客户端软件当中的，很少量的数据从服务器端传送过来，所以C&#x2F;S结构的系统速度快）</li><li>体验好（速度又快，界面又酷炫，当然体验好了。）</li><li>界面酷炫（专门的语言去实现界面的，更加灵活。）</li><li>服务器压力小（因为大量的数据都是集成在客户端软件当中，所以服务器只需要传送很少的数据量，当然服务器压力小。）</li><li>安全（因为大量的数据是集成在客户端软件当中的，并且客户端有很多个，服务器虽然只有一个，就算服务器那边地震了，火灾了，服务器受损了，问题也不大，因为大量的数据在多个客户端上有缓存，有存储，所以从这个方面来说，C&#x2F;S结构的系统比较安全。）</li><li>…..</li></ul></li><li>缺点： <ul><li>升级维护比较差劲。（升级维护比较麻烦。成本比较高。每一个客户端软件都需要升级。有一些软件不是那么容易安装的。）</li></ul></li></ul></li></ul></li><li>B&#x2F;S架构？ <ul><li>B&#x2F;S（Browser &#x2F; Server，浏览器 &#x2F; 服务器）</li><li><a href="http://www.baidu.com/">http://www.baidu.com</a></li><li><a href="http://www.jd.com/">http://www.jd.com</a></li><li><a href="http://www.126.com/">http://www.126.com</a></li><li>B&#x2F;S结构的系统是不是一个特殊的C&#x2F;S系统？ <ul><li>实际上B&#x2F;S结构的系统还是一个C&#x2F;S，只不过这个C比较特殊，这个Client是一个固定不变浏览器软件。</li></ul></li><li>B&#x2F;S结构的系统优点和缺点是： <ul><li>优点： <ul><li>升级维护方便，成本比较低。（只需要升级服务器端即可。）</li><li>不需要安装特定的客户端软件，用户操作极其方便。只需要打开浏览器，输入网址即可。</li></ul></li><li>缺点： <ul><li>速度慢（不是因为带宽低的问题，是因为所有的数据都是在服务器上，用户发送的每一个请求都是需要服务器全身心的响应数据，所以B&#x2F;S结构的系统在网络中传送的数据量比较大。）</li><li>体验差（界面不是那么酷炫，因为浏览器只支持三个语言HTML CSS JavaScript。在加上速度慢。）</li><li>不安全（所有的数据都在服务器上，只要服务器发生火灾，地震等不可抗力，最终数据全部丢失。）</li><li>….</li></ul></li></ul></li></ul></li><li>C&#x2F;S和B&#x2F;S结构的系统，哪个好，哪个不好？ <ul><li>这个问题问的没有水平。并不是哪个好，哪个不好。不同结构的系统在不同的业务场景下有不同的适用场景。</li><li>娱乐性软件建议使用？ <ul><li>C&#x2F;S 结构</li></ul></li><li>公司内部使用的一些业务软件建议使用？ <ul><li>公司内部使用的系统，需要维护成本低。</li><li>公司内部使用的系统，不需要很酷炫。</li><li>公司内部使用的企业级系统主要是能够进行数据的维护即可。</li><li>B&#x2F;S 结构。</li></ul></li></ul></li><li>注意了：开发B&#x2F;S结构的系统，其实就是开发网站，其实就是开发一个WEB系统。 <ul><li>开发一个WEB系统你需要会哪些技术？ <ul><li>WEB前端（运行在浏览器上的程序。） <ul><li>HTML</li><li>CSS</li><li>JavaScript</li></ul></li><li>WEB后端（WEB服务器端的程序。） <ul><li>Java可以（Java做WEB开发我们称为JavaWEB开发。JavaWEB开发最核心的规范：Servlet【Server Applet服务器端的Java小程序。】）</li><li>C语言也可以</li><li>C++也可以</li><li>Python也行</li><li>PHP也可以</li><li>….</li></ul></li></ul></li></ul></li><li>JavaEE是什么？ <ul><li>Java包括三大块： <ul><li>JavaSE <ul><li>Java标准版（一套类库：别人写好的一套类库，只不过这个类库是标准类库，走EE，或者走ME，这个SE一定是基础，先学。）</li></ul></li><li>JavaEE（WEB方向，WEB系统。） <ul><li>Java企业版（也是一套类库：也是别人写好的一套类库，只不过这套类库可以帮助我们完成企业级项目的开发，专门为企业内部提供解决方案的一套（多套）类库。）</li><li>别人写好的，你用就行了，用它可以开发企业级项目。</li><li>可以开发web系统。</li><li>Java比较火爆的就是这个JavaEE方向。</li></ul></li><li>JavaME <ul><li>Java微型版（还是一套类库，只不过这套类库帮助我们进行电子微型设备内核程序的开发）</li><li>机顶盒内核程序，吸尘器内核程序，电冰箱内核程序，电饭煲内核程序。。。。。</li></ul></li></ul></li><li>JavaEE实际上包括很多种规范，13种规范，其中Servlet就是JavaEE规范之一。学Servlet还是Java语言。</li></ul></li></ol><h2 id="B-S结构的系统通信原理（没有涉及到Java小程序）"><a href="#B-S结构的系统通信原理（没有涉及到Java小程序）" class="headerlink" title="B&#x2F;S结构的系统通信原理（没有涉及到Java小程序）"></a>B&#x2F;S结构的系统通信原理（没有涉及到Java小程序）</h2><ul><li>WEB系统的访问过程 <ul><li>第一步：打开浏览器</li><li>第二步：找到地址栏</li><li>第三步：输入一个合法的网址</li><li>第四步：回车</li><li>第五步：在浏览器上会展示响应的结果。</li></ul></li><li>关于域名： <ul><li><a href="https://www.baidu.com/">https://www.baidu.com/</a> （网址）</li><li><a href="http://www.baidu.com/">www.baidu.com</a> 是一个域名</li><li>在浏览器地址栏上输入域名，回车之后，域名解析器会将域名解析出来一个具体的IP地址和端口号等。</li><li>解析结果也许是：<a href="http://110.242.68.3/index.html">http://110.242.68.3:80/index.html</a></li></ul></li><li>IP地址是啥？ <ul><li>计算机在网络当中的一个身份证号。在同一个网络当中，IP地址是唯一的。</li><li>A计算机要想和B计算机通信，首先你需要知道B计算机的IP地址，有了IP地址才能建立连接。</li></ul></li><li>端口号是啥？ <ul><li>一个端口代表一个软件（一个端口代表一个应用，一个端口仅代表一个服务）。</li><li>一个计算机当中有很多软件，每一个软件启动之后都有一个端口号。</li><li>在同一个计算机上，端口号具有唯一性。</li></ul></li><li>一个WEB系统的通信原理？通信步骤： <ul><li>第一步：用户输入网址（URL）</li><li>第二步：域名解析器进行域名解析：<a href="http://110.242.68.3/index.html">http://110.242.68.3:80/index.html</a></li><li>第三步：浏览器软件在网络中搜索110.242.68.3这一台主机，直到找到这台主机。</li><li>第四步：定位110.242.68.3这台主机上的服务器软件，因为是80端口，可以很轻松的定位到80端口对应的服务器软件。</li><li>第五步：80端口对应的服务器软件得知浏览器想要的资源名是：index.html</li><li>第六步：服务器软件找到index.html文件，并且将index.html文件中的内容直接输出响应到浏览器上。</li><li>第七步：浏览器接收到来自服务器的代码（HTML CSS JS）</li><li>第八步：浏览器渲染，执行HTML CSS JS代码，展示效果。</li></ul></li><li>什么是URL？ <ul><li>统一资源定位符（<a href="http://www.baidu.com)/">http://www.baidu.com）</a></li></ul></li><li>什么是请求，什么是响应？ <ul><li>请求和响应实际上说的是数据的流向不同。</li><li>从Browser端发送数据到Server端，我们称为请求。英语单词：request</li><li>从Server端向浏览器Browser端发送数据，我们称为响应。英语单词：response</li><li>B –&gt; S （请求request）</li><li>S –&gt; B （响应response）</li></ul></li></ul><h2 id="关于WEB服务器软件"><a href="#关于WEB服务器软件" class="headerlink" title="关于WEB服务器软件"></a>关于WEB服务器软件</h2><ul><li>WEB服务器软件都有哪些呢？（这些软件都是提前开发好的。） <ul><li>Tomcat（WEB服务器）</li><li>jetty（WEB服务器）</li><li>JBOSS（应用服务器）</li><li>WebLogic（应用服务器）</li><li>WebSphere（应用服务器）</li></ul></li><li>应用服务器和WEB服务器的关系？ <ul><li>应用服务器实现了JavaEE的所有规范。(JavaEE有13个不同的规范。)</li><li>WEB服务器只实现了JavaEE中的Servlet + JSP两个核心的规范。</li><li>通过这个讲解说明了：应用服务器是包含WEB服务器的。</li><li>用过JBOSS服务器的同学应该很清楚，JBOSS中内嵌了一个Tomcat服务器。</li></ul></li><li>Tomcat下载 <ul><li>apache官网地址：<a href="https://www.apache.org/">https://www.apache.org/</a></li><li>tomcat官网地址：<a href="https://tomcat.apache.org/">https://tomcat.apache.org</a></li><li>tomcat开源免费的轻量级WEB服务器。</li><li>tomcat还有另外一个名字：catalina（catalina是美国的一个岛屿，风景秀丽，据说作者是在这个风景秀丽的小岛上开发了一个轻量级的WEB服务器，体积小，运行速度快，因此tomcat又被称为catalina）</li><li>tomcat的logo是一只公猫（寓意表示Tomcat服务器是轻巧的，小巧的，果然，体积小，运行速度快，只实现了Servlet+JSP规范）</li><li>tomcat是java语言写的。</li><li>tomcat服务器要想运行，必须先又jre（Java的运行时环境）</li></ul></li><li>Tomcat服务器要想运行，需要先有jre，所以要先安装JDK，配置java运行环境。 <ul><li>JAVA_HOME&#x3D;C:\Program Files\Java\jdk-17.0.1</li><li>PATH&#x3D;%JAVA_HOME%\bin</li><li>目前JAVA_HOME没有配置，思考一个问题，这样行不行呢？目前只运行java程序是没问题的。真的没问题吗？</li></ul></li><li>Tomcat服务器的安装： <ul><li>绿色版本的安装很简单，直接zip包解压即可。解压就是安装。</li><li>我有一个好习惯，在C盘的根目录下新建一个dev目录，java开发所有相关的工具都安装到dev目录下，这样比较方便管理。（你随意）</li><li>启动Tomcat <ul><li>bin目录下有一个文件：startup.bat,通过它可以启动Tomcat服务器。 <ul><li>xxx.bat文件是个什么文件？bat文件是windows操作系统专用的，bat文件是批处理文件，这种文件中可以编写大量的windows的dos命令，然后执行bat文件就相当于批量的执行dos命令。</li><li>startup.sh，这个文件在windows当中无法执行，在Linux环境当中可以使用。在Linux环境下能够执行的是shell命令，大量的shell命令编写在shell文件当中，然后执行这个shell文件可以批量的执行shell命令。</li><li>tomcat服务器提供了bat和sh文件，说明了这个tomcat服务器的通用性。</li><li>分析startup.bat文件得出，执行这个命令，实际上最后是执行：catalina.bat文件。</li><li>catalina.bat文件中有这样一行配置：MAINCLASS&#x3D;org.apache.catalina.startup.Bootstrap （这个类就是main方法所在的类。）</li><li>tomcat服务器就是Java语言写的，既然是java语言写的，那么启动Tomcat服务器就是执行main方法。</li></ul></li><li>我们尝试打开dos命令窗口，在dos命令窗口中输入startup.bat来启动tomcat服务器。</li><li>启动Tomcat服务器只配置path对应的bin目录是不行的。有两个环境变量需要配置： <ul><li>JAVA_HOME&#x3D;JDK的根</li><li>CATALINA_HOME&#x3D;Tomcat服务器的根</li></ul></li></ul></li></ul></li><li>关于Tomcat服务器的目录 <ul><li>bin ： 这个目录是Tomcat服务器的命令文件存放的目录，比如：启动Tomcat，关闭Tomcat等。</li><li>conf： 这个目录是Tomcat服务器的配置文件存放目录。（server.xml文件中可以配置端口号，默认Tomcat端口是8080）</li><li>lib ：这个目录是Tomcat服务器的核心程序目录，因为Tomcat服务器是Java语言编写的，这里的jar包里面都是class文件。</li><li>logs: Tomcat服务器的日志目录，Tomcat服务器启动等信息都会在这个目录下生成日志文件。</li><li>temp：Tomcat服务器的临时目录。存储临时文件。</li><li>webapps：这个目录当中就是用来存放大量的webapp（web application：web应用）</li><li>work：这个目录是用来存放JSP文件翻译之后的java文件以及编译之后的class文件。</li></ul></li><li>配置Tomcat服务器需要哪些环境变量？ <ul><li>JAVA_HOME&#x3D;JDK的根</li><li>CATALINA_HOME&#x3D;Tomcat服务器的根</li><li>PATH&#x3D;%JAVA_HOME%\bin;%CATALINA_HOME%\bin</li></ul></li><li>启动Tomcat： startup </li><li>关闭Tomcat：stop （shutdown.bat文件重命名为stop.bat，为什么？原因是shutdown命令和windows中的关机命令冲突。所以修改一下。） </li><li>怎么测试Tomcat服务器有没有启动成功呢？ <ul><li>打开浏览器，在浏览器的地址栏上输入URL即可： <ul><li><a href="http://ip地址:端口号">http://ip地址:端口号</a></li><li>ip地址是什么？端口号我知道，是8080</li><li>本机的IP地址是：127.0.0.1，或者是localhost，都行。</li></ul></li></ul></li></ul><h2 id="实现一个最基本的web应用（这个web应用中没有java小程序）"><a href="#实现一个最基本的web应用（这个web应用中没有java小程序）" class="headerlink" title="实现一个最基本的web应用（这个web应用中没有java小程序）"></a>实现一个最基本的web应用（这个web应用中没有java小程序）</h2><ul><li>第一步：找到CATALINA_HOME\webapps目录 <ul><li>因为所有的webapp要放到webapps目录下。（没有为什么，这是Tomcat服务器的要求。如果不放到这里，Tomcat服务器找不到你的应用。）</li></ul></li><li>第二步：在CATALINA_HOME\webapps目录下新建一个子目录，起名：oa <ul><li>这个目录名oa就是你这个webapp的名字。</li></ul></li><li>第三步：在oa目录下新建资源文件，例如：index.html <ul><li>编写index.html文件的内容。</li></ul></li><li>第四步：启动Tomcat服务器 </li><li>第五步：打开浏览器，在浏览器地址栏上输入这样的URL： </li><li><a href="http://127.0.0.1:8080/oa/index.html">http://127.0.0.1:8080/oa/index.html</a> </li><li>思考一个问题： <ul><li>我们在浏览器上直接输入一个URL，然后回车。这个动作和超链接一样吗？既然是一样的，我们完全可以使用超链接。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意以下的路径，以/开始，带项目名，是一个绝对路径。不需要添加：http://127.0.0.1:8080--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oa/login.html&quot;</span>&gt;</span>user login2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多个层级也没有关系，正常访问即可。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意：我们目前前端上的路径都以“/”开始的，都是加项目名的。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oa/test/debug/d.html&quot;</span>&gt;</span>d page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://127.0.0.1:8080/oa/userList.html">http://127.0.0.1:8080/oa/userList.html</a> <ul><li>访问这个地址，可以展示一个用户列表页面。但是这个用户列表页面是写死在HTML文件当中的。这种资源我们称为静态资源。怎么能变成动态资源。显然需要连接数据库。</li><li>连接数据库需要JDBC程序，也就是说需要编写Java程序连接数据库，数据库中有多少条记录，页面上就显示多少条记录，这种技术被称为动态网页技术。（动态网页技术并不是说页面中有flash动画。动态网页技术是说页面中的数据是动态的，根据数据库中数据的变化而变化。）</li></ul></li></ul><h2 id="对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议"><a href="#对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议" class="headerlink" title="对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议"></a>对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议</h2><ul><li><p>有哪些角色（在整个BS结构的系统当中，有哪些人参与进去了） </p><ul><li>浏览器软件的开发团队（浏览器软件太多了：谷歌浏览器、火狐浏览器、IE浏览器….）</li><li>WEB Server的开发团队（WEB Server这个软件也是太多了：Tomcat、Jetty、WebLogic、JBOSS、WebSphere….）</li><li>DB Server的开发团队（DB Server这个软件也是太多了：Oracle、MySQL…..）</li><li>webapp的开发团队（WEB应用是我们做为JavaWEB程序员开发的）</li></ul></li><li><p>角色和角色之间需要遵守哪些规范，哪些协议 </p><ul><li>webapp的开发团队   和    WEB Server的开发团队  之间有一套规范: JavaEE规范之一Servlet规范。 <ul><li>Servlet规范的作用是什么？ <ul><li>WEB Server   和   webapp解耦合。</li></ul></li></ul></li><li>Browser  和   WebServer之间有一套传输协议：HTTP协议。（超文本传输协议。）</li><li>webapp开发团队  和  DB Server的开发团队之间有一套规范：JDBC规范。</li></ul></li><li><p>Servlet规范是一个什么规范？ </p><ul><li>遵循Servlet规范的webapp，这个webapp就可以放在不同的WEB服务器中运行。（因为这个webapp是遵循Servlet规范的。）</li><li>Servlet规范包括什么呢？ <ul><li>规范了哪些接口</li><li>规范了哪些类</li><li>规范了一个web应用中应该有哪些配置文件</li><li>规范了一个web应用中配置文件的名字</li><li>规范了一个web应用中配置文件存放的路径</li><li>规范了一个web应用中配置文件的内容</li><li>规范了一个合法有效的web应用它的目录结构应该是怎样的。</li><li>…..</li></ul></li></ul></li></ul><h2 id="开发一个带有Servlet（Java小程序）的webapp（重点）"><a href="#开发一个带有Servlet（Java小程序）的webapp（重点）" class="headerlink" title="开发一个带有Servlet（Java小程序）的webapp（重点）"></a>开发一个带有Servlet（Java小程序）的webapp（重点）</h2><ul><li><h2 id="开发步骤是怎样的？-第一步：在webapps目录下新建一个目录，起名crm（这个crm就是webapp的名字）。当然，也可以是其它项目，比如银行项目，可以创建一个目录bank，办公系统可以创建一个oa。-注意：crm就是这个webapp的根-第二步：在webapp的根下新建一个目录：WEB-INF-注意：这个目录的名字是Servlet规范中规定的，必须全部大写，必须一模一样。必须的必须。-第三步：在WEB-INF目录下新建一个目录：classes-注意：这个目录的名字必须是全部小写的classes。这也是Servlet规范中规定的。另外这个目录下一定存放的是Java程序编译之后的class文件（这里存放的是字节码文件）。-第四步：在WEB-INF目录下新建一个目录：lib-注意：这个目录不是必须的。但如果一个webapp需要第三方的jar包的话，这个jar包要放到这个lib目录下，这个目录的名字也不能随意编写，必须是全部小写的lib。例如java语言连接数据库需要数据库的驱动jar包。那么这个jar包就一定要放到lib目录下。这Servlet规范中规定的。-第五步：在WEB-INF目录下新建一个文件：web-xml-注意：这个文件是必须的，这个文件名必须叫做web-xml。这个文件必须放在这里。一个合法的webapp，web-xml文件是必须的，这个web-xml文件就是一个配置文件，在这个配置文件中描述了请求路径和Servlet类之间的对照关系。-这个文件最好从其他的webapp中拷贝，最好别手写。没必要。复制粘贴"><a href="#开发步骤是怎样的？-第一步：在webapps目录下新建一个目录，起名crm（这个crm就是webapp的名字）。当然，也可以是其它项目，比如银行项目，可以创建一个目录bank，办公系统可以创建一个oa。-注意：crm就是这个webapp的根-第二步：在webapp的根下新建一个目录：WEB-INF-注意：这个目录的名字是Servlet规范中规定的，必须全部大写，必须一模一样。必须的必须。-第三步：在WEB-INF目录下新建一个目录：classes-注意：这个目录的名字必须是全部小写的classes。这也是Servlet规范中规定的。另外这个目录下一定存放的是Java程序编译之后的class文件（这里存放的是字节码文件）。-第四步：在WEB-INF目录下新建一个目录：lib-注意：这个目录不是必须的。但如果一个webapp需要第三方的jar包的话，这个jar包要放到这个lib目录下，这个目录的名字也不能随意编写，必须是全部小写的lib。例如java语言连接数据库需要数据库的驱动jar包。那么这个jar包就一定要放到lib目录下。这Servlet规范中规定的。-第五步：在WEB-INF目录下新建一个文件：web-xml-注意：这个文件是必须的，这个文件名必须叫做web-xml。这个文件必须放在这里。一个合法的webapp，web-xml文件是必须的，这个web-xml文件就是一个配置文件，在这个配置文件中描述了请求路径和Servlet类之间的对照关系。-这个文件最好从其他的webapp中拷贝，最好别手写。没必要。复制粘贴" class="headerlink" title="开发步骤是怎样的？-  第一步：在webapps目录下新建一个目录，起名crm（这个crm就是webapp的名字）。当然，也可以是其它项目，比如银行项目，可以创建一个目录bank，办公系统可以创建一个oa。   - 注意：crm就是这个webapp的根-  第二步：在webapp的根下新建一个目录：WEB-INF   - 注意：这个目录的名字是Servlet规范中规定的，必须全部大写，必须一模一样。必须的必须。-  第三步：在WEB-INF目录下新建一个目录：classes   - 注意：这个目录的名字必须是全部小写的classes。这也是Servlet规范中规定的。另外这个目录下一定存放的是Java程序编译之后的class文件（这里存放的是字节码文件）。-  第四步：在WEB-INF目录下新建一个目录：lib   - 注意：这个目录不是必须的。但如果一个webapp需要第三方的jar包的话，这个jar包要放到这个lib目录下，这个目录的名字也不能随意编写，必须是全部小写的lib。例如java语言连接数据库需要数据库的驱动jar包。那么这个jar包就一定要放到lib目录下。这Servlet规范中规定的。-  第五步：在WEB-INF目录下新建一个文件：web.xml   -  注意：这个文件是必须的，这个文件名必须叫做web.xml。这个文件必须放在这里。一个合法的webapp，web.xml文件是必须的，这个web.xml文件就是一个配置文件，在这个配置文件中描述了请求路径和Servlet类之间的对照关系。   -  这个文件最好从其他的webapp中拷贝，最好别手写。没必要。复制粘贴 "></a>开发步骤是怎样的？<br>-  第一步：在webapps目录下新建一个目录，起名crm（这个crm就是webapp的名字）。当然，也可以是其它项目，比如银行项目，可以创建一个目录bank，办公系统可以创建一个oa。<br>   - 注意：crm就是这个webapp的根<br>-  第二步：在webapp的根下新建一个目录：WEB-INF<br>   - 注意：这个目录的名字是Servlet规范中规定的，必须全部大写，必须一模一样。必须的必须。<br>-  第三步：在WEB-INF目录下新建一个目录：classes<br>   - 注意：这个目录的名字必须是全部小写的classes。这也是Servlet规范中规定的。另外这个目录下一定存放的是Java程序编译之后的class文件（这里存放的是字节码文件）。<br>-  第四步：在WEB-INF目录下新建一个目录：lib<br>   - 注意：这个目录不是必须的。但如果一个webapp需要第三方的jar包的话，这个jar包要放到这个lib目录下，这个目录的名字也不能随意编写，必须是全部小写的lib。例如java语言连接数据库需要数据库的驱动jar包。那么这个jar包就一定要放到lib目录下。这Servlet规范中规定的。<br>-  第五步：在WEB-INF目录下新建一个文件：web.xml<br>   -  注意：这个文件是必须的，这个文件名必须叫做web.xml。这个文件必须放在这里。一个合法的webapp，web.xml文件是必须的，这个web.xml文件就是一个配置文件，在这个配置文件中描述了请求路径和Servlet类之间的对照关系。<br>   -  这个文件最好从其他的webapp中拷贝，最好别手写。没必要。复制粘贴 </h2></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第六步：编写一个Java程序，这个小Java程序也不能随意开发，这个小java程序必须实现Servlet接口。 <ul><li>这个Servlet接口不在JDK当中。（因为Servlet不是JavaSE了。Servlet属于JavaEE，是另外的一套类库。）</li><li>Servlet接口（Servlet.class文件）是Oracle提供的。（最原始的是sun公司提供的。）</li><li>Servlet接口是JavaEE的规范中的一员。</li><li>Tomcat服务器实现了Servlet规范，所以Tomcat服务器也需要使用Servlet接口。Tomcat服务器中应该有这个接口，Tomcat服务器的CATALINA_HOME\lib目录下有一个servlet-api.jar，解压这个servlet-api.jar之后，你会看到里面有一个Servlet.class文件。</li><li>重点：从JakartaEE9开始，Servlet接口的全名变了：jakarta.servlet.Servlet</li><li>注意：编写这个Java小程序的时候，java源代码你愿意在哪里就在哪里，位置无所谓，你只需要将java源代码编译之后的class文件放到classes目录下即可。</li></ul></li><li>第七步：编译我们编写的HelloServlet <ul><li>重点：你怎么能让你的HelloServlet编译通过呢？配置环境变量CLASSPATH<br>CLASSPATH&#x3D;.;C:\dev\apache-tomcat-10.0.12\lib\servlet-api.jar </li><li>思考问题：以上配置的CLASSPATH和Tomcat服务器运行有没有关系？ <ul><li>没有任何关系，以上配置这个环境变量只是为了让你的HelloServlet能够正常编译生成class文件。</li></ul></li></ul></li><li>第八步：将以上编译之后的HelloServlet.class文件拷贝到WEB-INF\classes目录下。 </li><li><h2 id="第九步：在web-xml文件中编写配置信息，让“请求路径”和“Servlet类名”关联在一起。-这一步用专业术语描述：在web-xml文件中注册Servlet类。"><a href="#第九步：在web-xml文件中编写配置信息，让“请求路径”和“Servlet类名”关联在一起。-这一步用专业术语描述：在web-xml文件中注册Servlet类。" class="headerlink" title="第九步：在web.xml文件中编写配置信息，让“请求路径”和“Servlet类名”关联在一起。-  这一步用专业术语描述：在web.xml文件中注册Servlet类。 "></a>第九步：在web.xml文件中编写配置信息，让“请求路径”和“Servlet类名”关联在一起。<br>-  这一步用专业术语描述：在web.xml文件中注册Servlet类。 </h2></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--servlet描述信息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--任何一个servlet都对应一个servlet-mapping --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>fdsafdsagfdsafdsa<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个位置必须是带有包名的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--servlet映射信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个也是随便的，不过这里写的内容要和上面的一样。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>fdsafdsagfdsafdsa<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里需要一个路径--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个路径唯一的要求是必须以 / 开始--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当前这个路径可以随便写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/fdsa/fd/saf/d/sa/fd/sa/fd<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第十步：启动Tomcat服务器 </li><li>第十一步：打开浏览器，在浏览器地址栏上输入一个url，这个URL必须是： <ul><li><a href="http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd">http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd</a></li><li>非常重要的一件事：浏览器上的请求路径不能随便写，这个请求路径必须和web.xml文件中的url-pattern一致。</li><li>注意：浏览器上的请求路径和web.xml文件中的url-pattern的唯一区别就是：浏览器上的请求路径带项目名：&#x2F;crm</li></ul></li><li>浏览器上编写的路径太复杂，可以使用超链接。（<strong>非常重要：html页面只能放到WEB-INF目录外面。</strong>） </li><li>以后不需要我们编写main方法了。tomcat服务器负责调用main方法，Tomcat服务器启动的时候执行的就是main方法。我们javaweb程序员只需要编写Servlet接口的实现类，然后将其注册到web.xml文件中，即可。 </li><li>总结一下：一个合法的webapp目录结构应该是怎样的？</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webapproot</span><br><span class="line">     |------WEB-INF</span><br><span class="line">       |------classes(存放字节码)</span><br><span class="line">       |------lib(第三方jar包)</span><br><span class="line">       |------web.xml(注册Servlet)</span><br><span class="line">     |------html</span><br><span class="line">     |------css</span><br><span class="line">     |------javascript</span><br><span class="line">     |------image</span><br><span class="line">     ....</span><br></pre></td></tr></table></figure><ul><li>浏览器发送请求，到最终服务器调用Servlet中的方法，是怎样的一个过程？（以下这个过程描述的很粗糙。其中还有很多步骤我省略了。） <ul><li>用户输入URL，或者直接点击超链接：<a href="http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd">http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd</a></li><li>然后Tomcat服务器接收到请求，截取路径：&#x2F;crm&#x2F;fdsa&#x2F;fd&#x2F;saf&#x2F;d&#x2F;sa&#x2F;fd&#x2F;sa&#x2F;fd</li><li>Tomcat服务器找到crm项目</li><li>Tomcat服务器在web.xml文件中查找&#x2F;fdsa&#x2F;fd&#x2F;saf&#x2F;d&#x2F;sa&#x2F;fd&#x2F;sa&#x2F;fd  对应的Servlet是：com.bjpowernode.servlet.HelloServlet</li><li>Tomcat服务器通过反射机制，创建com.bjpowernode.servlet.HelloServlet的对象。</li><li>Tomcat服务器调用com.bjpowernode.servlet.HelloServlet对象的service方法。</li></ul></li></ul><h2 id="关于JavaEE的版本"><a href="#关于JavaEE的版本" class="headerlink" title="关于JavaEE的版本"></a>关于JavaEE的版本</h2><ul><li>JavaEE目前最高版本是 JavaEE8</li><li>JavaEE被Oracle捐献了，Oracle将JavaEE规范捐献给Apache了。</li><li>Apache把JavaEE换名了，以后不叫JavaEE了，以后叫做 jakarta EE。</li><li>以后没有JavaEE了。以后都叫做Jakarta EE。</li><li>JavaEE8版本升级之后的”JavaEE 9”，不再是”JavaEE9”这个名字了，叫做JakartaEE9</li><li>JavaEE8的时候对应的Servlet类名是：javax.servlet.Servlet</li><li>JakartaEE9的时候对应的Servlet类名是：jakarta.servlet.Servlet （包名都换了）</li><li>如果你之前的项目还是在使用javax.servlet.Servlet，那么你的项目无法直接部署到Tomcat10+版本上。你只能部署到Tomcat9-版本上。在Tomcat9以及Tomcat9之前的版本中还是能够识别javax.servlet这个包。</li></ul><h2 id="解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）"><a href="#解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）" class="headerlink" title="解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）"></a>解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）</h2><p>将CATALINA_HOME&#x2F;conf&#x2F;logging.properties文件中的内容修改如下：</p><p>java.util.logging.ConsoleHandler.encoding &#x3D; GBK</p><h2 id="向浏览器响应一段HTML代码"><a href="#向浏览器响应一段HTML代码" class="headerlink" title="向浏览器响应一段HTML代码"></a>向浏览器响应一段HTML代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest request, ServletResponse response)</span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    out.print(<span class="string">&quot;&lt;h1&gt;hello servlet!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在Servlet中连接数据库，怎么做？"><a href="#在Servlet中连接数据库，怎么做？" class="headerlink" title="在Servlet中连接数据库，怎么做？"></a>在Servlet中连接数据库，怎么做？</h2><ul><li>Servlet是Java程序，所以在Servlet中完全可以编写JDBC代码连接数据库。</li><li>在一个webapp中去连接数据库，需要将驱动jar包放到WEB-INF&#x2F;lib目录下。（com.mysql.cj.jdbc.Driver 这个类就在驱动jar包当中。）</li></ul><h2 id="在集成开发环境当中开发Servlet程序"><a href="#在集成开发环境当中开发Servlet程序" class="headerlink" title="在集成开发环境当中开发Servlet程序"></a>在集成开发环境当中开发Servlet程序</h2><ul><li>集成开发工具很多，其中目前使用比较多的是： <ul><li>IntelliJ IDEA（这个居多，IDEA在提示功能方面要强于Eclipse，也就是说IDEA使用起来比Eclipse更加智能，更好用。JetBrain公司开发的。收费的。）</li><li>Eclipse（这个少一些），Eclipse目前还是有团队使用，只不过处于减少的趋势，自己从事工作之后，可能会遇到。Eclipse是IBM团队开发的。Eclipse寓意是“日食”。“日食”表示将太阳吃掉。太阳是SUN。IBM团队开发Eclipse的寓意是吞并SUN公司，但是2009年的时候SUN公司被Oracle公司并购了。IBM并没有成功并购SUN公司。</li></ul></li><li>使用IDEA集成开发工具开发Servlet <ul><li>第一步：New Project（我比较习惯先创建一个Empty Project【空工程】，然后在空工程下新建Module【模块】，这不是必须的，只是一种习惯，你可以直接新建非空的Project），这个Empty Project起名为：javaweb（不是必须的，只是一个名字而已。一般情况下新建的Project的名字最好和目录的名字一致。）</li><li>第二步：新建模块（File –&gt; new –&gt; Module…） <ul><li>这里新建的是一个普通的JavaSE模块（这里先不要新建Java Enterprise模块）</li><li>这个Module自动会被放在javaweb的project下面。</li><li>这个Module起名：servlet01</li></ul></li><li>第三步：让Module变成JavaEE的模块。（让Module变成webapp的模块。符合webapp规范。符合Servlet规范的Module） <ul><li>在Module上点击右键：Add Framework Support…（添加框架支持）</li><li>在弹出的窗口中，选择Web Application（选择的是webapp的支持）</li><li>选择了这个webapp的支持之后，IDEA会自动给你生成一个符合Servlet规范的webpp目录结构。</li><li><strong>重点，需要注意的：在IDEA工具中根据Web Application模板生成的目录中有一个web目录，这个目录就代表webapp的根</strong></li></ul></li><li>第四步（非必须）：根据Web Application生成的资源中有index.jsp文件，这里我选择删除这个index.jsp文件。</li><li>第五步：编写Servlet（StudentServlet） <ul><li>class StudentServlet implements Servlet</li><li>这个时候发现Servlet.class文件没有。怎么办？将CATALINA_HOME&#x2F;lib&#x2F;servlet-api.jar和jsp-api.jar添加到classpath当中（这里的classpath说的是IDEA的classpath） <ul><li>File –&gt; Project Structrue –&gt; Modules –&gt; + 加号 –&gt; Add JARS….</li></ul></li><li>实现jakarta.servlet.Servlet接口中的5个方法。</li></ul></li><li>第六步：在Servlet当中的service方法中编写业务代码（我们这里连接数据库了。）</li><li>第七步：在WEB-INF目录下新建了一个子目录：lib（这个目录名可不能随意，必须是全部小写的lib），并且将连接数据库的驱动jar包放到lib目录下。</li><li>第八步：在web.xml文件中完成StudentServlet类的注册。（请求路径和Servlet之间对应起来）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="line">         version=<span class="string">&quot;4.0&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.bjpowernode.javaweb.servlet.StudentServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/servlet/student&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><ul><li><h2 id="第九步：给一个html页面，在HTML页面中编写一个超链接，用户点击这个超链接，发送请求，Tomcat执行后台的StudentServlet。-student-html-这个文件不能放到WEB-INF目录里面，只能放到WEB-INF目录外面。-student-html文件的内容"><a href="#第九步：给一个html页面，在HTML页面中编写一个超链接，用户点击这个超链接，发送请求，Tomcat执行后台的StudentServlet。-student-html-这个文件不能放到WEB-INF目录里面，只能放到WEB-INF目录外面。-student-html文件的内容" class="headerlink" title="第九步：给一个html页面，在HTML页面中编写一个超链接，用户点击这个超链接，发送请求，Tomcat执行后台的StudentServlet。-  student.html-  这个文件不能放到WEB-INF目录里面，只能放到WEB-INF目录外面。-  student.html文件的内容 "></a>第九步：给一个html页面，在HTML页面中编写一个超链接，用户点击这个超链接，发送请求，Tomcat执行后台的StudentServlet。<br>-  student.html<br>-  这个文件不能放到WEB-INF目录里面，只能放到WEB-INF目录外面。<br>-  student.html文件的内容 </h2></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>student page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里的项目名是 /xmm ，无法动态获取，先写死--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/xmm/servlet/student&quot;</span>&gt;</span>student list<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第十步：让IDEA工具去关联Tomcat服务器。关联的过程当中将webapp部署到Tomcat服务器当中。 <ul><li>IDEA工具右上角，绿色小锤子右边有一个：Add Configuration</li><li>左上角加号，点击Tomcat Server –&gt; local</li><li>在弹出的界面中设置服务器Server的参数（基本上不用动）</li><li>在当前窗口中有一个Deployment（点击这个用来部署webapp），继续点击加号，部署即可。</li><li>修改 Application context为：&#x2F;xmm</li></ul></li><li>第十一步：启动Tomcat服务器 <ul><li>在右上角有绿色的箭头，或者绿色的小虫子，点击这个绿色的小虫子，可以采用debug的模式启动Tomcat服务器。</li><li>我们开发中建议适用debug模式启动Tomcat</li></ul></li><li>第十二步：打开浏览器，在浏览器地址栏上输入：<a href="http://localhost:8080/xmm/student.html">http://localhost:8080/xmm/student.html</a></li></ul><h2 id="Servlet对象的生命周期"><a href="#Servlet对象的生命周期" class="headerlink" title="Servlet对象的生命周期"></a>Servlet对象的生命周期</h2><ul><li><p>什么是Servlet对象生命周期？ </p><ul><li>Servlet对象什么时候被创建。</li><li>Servlet对象什么时候被销毁。</li><li>Servlet对象创建了几个？</li><li>Servlet对象的生命周期表示：一个Servlet对象从出生在最后的死亡，整个过程是怎样的。</li></ul></li><li><p>Servlet对象是由谁来维护的？ </p><ul><li>Servlet对象的创建，对象上方法的调用，对象最终的销毁，Javaweb程序员是无权干预的。</li><li>Servlet对象的生命周期是由Tomcat服务器（WEB Server）全权负责的。</li><li>Tomcat服务器通常我们又称为：WEB容器。（这个叫法你要知道【WEB Container】）</li><li>WEB容器来管理Servlet对象的死活。</li></ul></li><li><h2 id="思考：我们自己new的Servlet对象受WEB容器的管理吗？-我们自己new的Servlet对象是不受WEB容器管理的。-WEB容器创建的Servlet对象，这些Servlet对象都会被放到一个集合当中（HashMap），只有放到这个HashMap集合中的Servlet才能够被WEB容器管理，自己new的Servlet对象不会被WEB容器管理。（自己new的Servlet对象不在容器当中）-web容器底层应该有一个HashMap这样的集合，在这个集合当中存储了Servlet对象和请求路径之间的关系"><a href="#思考：我们自己new的Servlet对象受WEB容器的管理吗？-我们自己new的Servlet对象是不受WEB容器管理的。-WEB容器创建的Servlet对象，这些Servlet对象都会被放到一个集合当中（HashMap），只有放到这个HashMap集合中的Servlet才能够被WEB容器管理，自己new的Servlet对象不会被WEB容器管理。（自己new的Servlet对象不在容器当中）-web容器底层应该有一个HashMap这样的集合，在这个集合当中存储了Servlet对象和请求路径之间的关系" class="headerlink" title="思考：我们自己new的Servlet对象受WEB容器的管理吗？- 我们自己new的Servlet对象是不受WEB容器管理的。- WEB容器创建的Servlet对象，这些Servlet对象都会被放到一个集合当中（HashMap），只有放到这个HashMap集合中的Servlet才能够被WEB容器管理，自己new的Servlet对象不会被WEB容器管理。（自己new的Servlet对象不在容器当中）- web容器底层应该有一个HashMap这样的集合，在这个集合当中存储了Servlet对象和请求路径之间的关系"></a>思考：我们自己new的Servlet对象受WEB容器的管理吗？<br>- 我们自己new的Servlet对象是不受WEB容器管理的。<br>- WEB容器创建的Servlet对象，这些Servlet对象都会被放到一个集合当中（HashMap），只有放到这个HashMap集合中的Servlet才能够被WEB容器管理，自己new的Servlet对象不会被WEB容器管理。（自己new的Servlet对象不在容器当中）<br>- web容器底层应该有一个HashMap这样的集合，在这个集合当中存储了Servlet对象和请求路径之间的关系</h2></li><li><p>研究：服务器在启动的Servlet对象有没有被创建出来（默认情况下）？ </p><ul><li>在Servlet中提供一个无参数的构造方法，启动服务器的时候看看构造方法是否执行。</li><li>经过测试得出结论：默认情况下，服务器在启动的时候Servlet对象并不会被实例化。</li><li>这个设计是合理的。用户没有发送请求之前，如果提前创建出来所有的Servlet对象，必然是耗费内存的，并且创建出来的Servlet如果一直没有用户访问，显然这个Servlet对象是一个废物，没必要先创建。</li></ul></li><li><h2 id="怎么让服务器启动的时候创建Servlet对象呢？-在servlet标签中添加子标签，在该子标签中填写整数，越小的整数优先级越高。"><a href="#怎么让服务器启动的时候创建Servlet对象呢？-在servlet标签中添加子标签，在该子标签中填写整数，越小的整数优先级越高。" class="headerlink" title="怎么让服务器启动的时候创建Servlet对象呢？-  在servlet标签中添加子标签，在该子标签中填写整数，越小的整数优先级越高。 "></a>怎么让服务器启动的时候创建Servlet对象呢？<br>-  在servlet标签中添加子标签，在该子标签中填写整数，越小的整数优先级越高。 </h2></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>aservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.AServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>aservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/a<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Servlet对象生命周期 <ul><li>默认情况下服务器启动的时候AServlet对象并没有被实例化 </li><li>用户发送第一次请求的时候，控制台输出了以下内容：</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AServlet无参数构造方法执行了</span><br><span class="line">AServlet&#x27;s init method execute!</span><br><span class="line">AServlet&#x27;s service method execute!</span><br></pre></td></tr></table></figure><ul><li>根据以上输出内容得出结论： <ul><li>用户在发送第一次请求的时候Servlet对象被实例化（AServlet的构造方法被执行了。并且执行的是无参数构造方法。）</li><li>AServlet对象被创建出来之后，Tomcat服务器马上调用了AServlet对象的init方法。（init方法在执行的时候，AServlet对象已经存在了。已经被创建出来了。）</li><li>用户发送第一次请求的时候，init方法执行之后，Tomcat服务器马上调用AServlet对象的service方法。</li></ul></li><li>用户继续发送第二次请求，控制台输出了以下内容：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AServlet&#x27;s service method execute!</span><br></pre></td></tr></table></figure><ul><li>根据以上输出结果得知，用户在发送第二次，或者第三次，或者第四次请求的时候，Servlet对象并没有新建，还是使用之前创建好的Servlet对象，直接调用该Servlet对象的service方法，这说明： <ul><li>第一：Servlet对象是单例的（单实例的。但是要注意：Servlet对象是单实例的，但是Servlet类并不符合单例模式。我们称之为假单例。之所以单例是因为Servlet对象的创建我们javaweb程序员管不着，这个对象的创建只能是Tomcat来说了算，Tomcat只创建了一个，所以导致了单例，但是属于假单例。真单例模式，构造方法是私有化的。）</li><li>第二：无参数构造方法、init方法只在第一次用户发送请求的时候执行。也就是说无参数构造方法只执行一次。init方法也只被Tomcat服务器调用一次。</li><li>第三：只要用户发送一次请求：service方法必然会被Tomcat服务器调用一次。发送100次请求，service方法会被调用100次。</li></ul></li><li>关闭服务器的时候，控制台输出了以下内容：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AServlet&#x27;s destroy method execute!</span><br></pre></td></tr></table></figure><ul><li>通过以上输出内容，可以得出以下结论： <ul><li>Servlet的destroy方法只被Tomcat服务器调用一次。</li><li>destroy方法是在什么时候被调用的？ <ul><li>在服务器关闭的时候。</li><li>因为服务器关闭的时候要销毁AServlet对象的内存。</li><li>服务器在销毁AServlet对象内存之前，Tomcat服务器会自动调用AServlet对象的destroy方法。</li></ul></li></ul></li><li>请问：destroy方法调用的时候，对象销毁了还是没有销毁呢？ <ul><li>destroy方法执行的时候AServlet对象还在，没有被销毁。destroy方法执行结束之后，AServlet对象的内存才会被Tomcat释放。</li></ul></li><li>Servlet对象更像一个人的一生： <ul><li>Servlet的无参数构造方法执行：标志着你出生了。</li><li>Servlet对象的init方法的执行：标志着你正在接受教育。</li><li>Servlet对象的service方法的执行：标志着你已经开始工作了，已经开始为人类提供服务了。</li><li>Servlet对象的destroy方法的执行：标志着临终。有什么遗言，抓紧的。要不然，来不及了。</li></ul></li><li>关于Servlet类中方法的调用次数？ <ul><li>构造方法只执行一次。</li><li>init方法只执行一次。</li><li>service方法：用户发送一次请求则执行一次，发送N次请求则执行N次。</li><li>destroy方法只执行一次。</li></ul></li><li>当我们Servlet类中编写一个有参数的构造方法，如果没有手动编写无参数构造方法会出现什么问题？ <ul><li>报错了：500错误。</li><li>注意：500是一个HTTP协议的错误状态码。</li><li>500一般情况下是因为服务器端的Java程序出现了异常。（服务器端的错误都是500错误：服务器内部错误。）</li><li>如果没有无参数的构造方法，会导致出现500错误，无法实例化Servlet对象。</li><li>所以，一定要注意：在Servlet开发当中，不建议程序员来定义构造方法，因为定义不当，一不小心就会导致无法实例化Servlet对象。</li></ul></li><li>思考：Servlet的无参数构造方法是在对象第一次创建的时候执行，并且只执行一次。init方法也是在对象第一次创建的时候执行，并且只执行一次。那么这个无参数构造方法可以代替掉init方法吗？ <ul><li>不能。</li><li>Servlet规范中有要求，作为javaweb程序员，编写Servlet类的时候，不建议手动编写构造方法，因为编写构造方法，很容易让无参数构造方法消失，这个操作可能会导致Servlet对象无法实例化。所以init方法是有存在的必要的。</li></ul></li><li>init、service、destroy方法中使用最多的是哪个方法？ <ul><li>使用最多就是service方法，service方法是一定要实现的，因为service方法是处理用户请求的核心方法。</li><li>什么时候使用init方法呢？ <ul><li>init方法很少用。</li><li>通常在init方法当中做初始化操作，并且这个初始化操作只需要执行一次。例如：初始化数据库连接池，初始化线程池….</li></ul></li><li>什么时候使用destroy方法呢？ <ul><li>destroy方法也很少用。</li><li>通常在destroy方法当中，进行资源的关闭。马上对象要被销毁了，还有什么没有关闭的，抓紧时间关闭资源。还有什么资源没保存的，抓紧时间保存一下。</li></ul></li></ul></li></ul><h2 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h2><ul><li>我们编写一个Servlet类直接实现Servlet接口有什么缺点？ <ul><li>我们只需要service方法，其他方法大部分情况下是不需要使用的。代码很丑陋。</li></ul></li><li>适配器设计模式Adapter <ul><li>手机直接插到220V的电压上，手机直接就报废了。怎么办？可以找一个充电器。这个充电器就是一个适配器。手机连接适配器。适配器连接220V的电压。这样问题就解决了。</li></ul></li><li>编写一个GenericServlet类，这个类是一个抽象类，其中有一个抽象方法service。 <ul><li>GenericServlet实现Servlet接口。</li><li>GenericServlet是一个适配器。</li><li>以后编写的所有Servlet类继承GenericServlet，重写service方法即可。</li></ul></li><li><h2 id="思考：GenericServlet类是否需要改造一下？怎么改造？更利于子类程序的编写？-思考第一个问题：我提供了一个GenericServlet之后，init方法还会执行吗？-还会执行。会执行GenericServlet类中的init方法。-思考第二个问题：init方法是谁调用的？-Tomcat服务器调用的。-思考第三个问题：init方法中的ServletConfig对象是谁创建的？是谁传过来的？-都是Tomcat干的。-Tomcat服务器先创建了ServletConfig对象，然后调用init方法，将ServletConfig对象传给了init方法。-思考一下Tomcat服务器伪代码："><a href="#思考：GenericServlet类是否需要改造一下？怎么改造？更利于子类程序的编写？-思考第一个问题：我提供了一个GenericServlet之后，init方法还会执行吗？-还会执行。会执行GenericServlet类中的init方法。-思考第二个问题：init方法是谁调用的？-Tomcat服务器调用的。-思考第三个问题：init方法中的ServletConfig对象是谁创建的？是谁传过来的？-都是Tomcat干的。-Tomcat服务器先创建了ServletConfig对象，然后调用init方法，将ServletConfig对象传给了init方法。-思考一下Tomcat服务器伪代码：" class="headerlink" title="思考：GenericServlet类是否需要改造一下？怎么改造？更利于子类程序的编写？-  思考第一个问题：我提供了一个GenericServlet之后，init方法还会执行吗？   - 还会执行。会执行GenericServlet类中的init方法。-  思考第二个问题：init方法是谁调用的？   - Tomcat服务器调用的。-  思考第三个问题：init方法中的ServletConfig对象是谁创建的？是谁传过来的？   - 都是Tomcat干的。   - Tomcat服务器先创建了ServletConfig对象，然后调用init方法，将ServletConfig对象传给了init方法。-  思考一下Tomcat服务器伪代码： "></a>思考：GenericServlet类是否需要改造一下？怎么改造？更利于子类程序的编写？<br>-  思考第一个问题：我提供了一个GenericServlet之后，init方法还会执行吗？<br>   - 还会执行。会执行GenericServlet类中的init方法。<br>-  思考第二个问题：init方法是谁调用的？<br>   - Tomcat服务器调用的。<br>-  思考第三个问题：init方法中的ServletConfig对象是谁创建的？是谁传过来的？<br>   - 都是Tomcat干的。<br>   - Tomcat服务器先创建了ServletConfig对象，然后调用init方法，将ServletConfig对象传给了init方法。<br>-  思考一下Tomcat服务器伪代码： </h2></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tomcat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// .....</span></span><br><span class="line">        <span class="comment">// Tomcat服务器伪代码</span></span><br><span class="line">        <span class="comment">// 创建LoginServlet对象（通过反射机制，调用无参数构造方法来实例化LoginServlet对象）</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.bjpowernode.javaweb.servlet.LoginServlet&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        <span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> (Servlet)obj;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建ServletConfig对象</span></span><br><span class="line">        <span class="comment">// Tomcat服务器负责将ServletConfig对象实例化出来。</span></span><br><span class="line">        <span class="comment">// 多态（Tomcat服务器完全实现了Servlet规范）</span></span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">org</span>.apache.catalina.core.StandardWrapperFacade();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用Servlet的init方法</span></span><br><span class="line">        servlet.init(servletConfig);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用Servlet的service方法</span></span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><ul><li>什么是ServletConfig？ <ul><li>Servlet对象的配置信息对象。</li><li>ServletConfig对象中封装了标签中的配置信息。（web.xml文件中servlet的配置信息）</li></ul></li><li>一个Servlet对应一个ServletConfig对象。 </li><li>Servlet对象是Tomcat服务器创建，并且ServletConfig对象也是Tomcat服务器创建。并且默认情况下，他们都是在用户发送第一次请求的时候创建。 </li><li>Tomcat服务器调用Servlet对象的init方法的时候需要传一个ServletConfig对象的参数给init方法。 </li><li>ServletConfig接口的实现类是Tomcat服务器给实现的。（Tomcat服务器说的就是WEB服务器。） </li><li><h2 id="ServletConfig接口有哪些常用的方法？"><a href="#ServletConfig接口有哪些常用的方法？" class="headerlink" title="ServletConfig接口有哪些常用的方法？ "></a>ServletConfig接口有哪些常用的方法？ </h2></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getInitParameter</span><span class="params">(String name)</span>; <span class="comment">// 通过初始化参数的name获取value</span></span><br><span class="line"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title function_">getInitParameterNames</span><span class="params">()</span>; <span class="comment">// 获取所有的初始化参数的name</span></span><br><span class="line"><span class="keyword">public</span> ServletContext <span class="title function_">getServletContext</span><span class="params">()</span>; <span class="comment">// 获取ServletContext对象</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServletName</span><span class="params">()</span>; <span class="comment">// 获取Servlet的name</span></span><br></pre></td></tr></table></figure><ul><li>以上方法在Servlet类当中，都可以使用this去调用。因为GenericServlet实现了ServletConfig接口。</li></ul><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><ul><li>一个Servlet对象对应一个ServletConfig。100个Servlet对象则对应100个ServletConfig对象。 </li><li>只要在同一个webapp当中，只要在同一个应用当中，所有的Servlet对象都是共享同一个ServletContext对象的。 </li><li>ServletContext对象在服务器启动阶段创建，在服务器关闭的时候销毁。这就是ServletContext对象的生命周期。ServletContext对象是应用级对象。 </li><li>Tomcat服务器中有一个webapps，这个webapps下可以存放webapp，可以存放多个webapp，假设有100个webapp，那么就有100个ServletContext对象。但是，总之，一个应用，一个webapp肯定是只有一个ServletContext对象。 </li><li>ServletContext被称为Servlet上下文对象。（Servlet对象的四周环境对象。） </li><li>一个ServletContext对象通常对应的是一个web.xml文件。 </li><li>ServletContext对应显示生活中的什么例子呢？ <ul><li>一个教室里有多个学生，那么每一个学生就是一个Servlet，这些学生都在同一个教室当中，那么我们可以把这个教室叫做ServletContext对象。那么也就是说放在这个ServletContext对象（环境）当中的数据，在同一个教室当中，物品都是共享的。比如：教室中有一个空调，所有的学生都可以操作。可见，空调是共享的。因为空调放在教室当中。教室就是ServletContext对象。</li></ul></li><li>ServletContext是一个接口，Tomcat服务器对ServletContext接口进行了实现。 <ul><li>ServletContext对象的创建也是Tomcat服务器来完成的。启动webapp的时候创建的。</li></ul></li><li><h2 id="ServletContext接口中有哪些常用的方法？"><a href="#ServletContext接口中有哪些常用的方法？" class="headerlink" title="ServletContext接口中有哪些常用的方法？ "></a>ServletContext接口中有哪些常用的方法？ </h2></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getInitParameter</span><span class="params">(String name)</span>; <span class="comment">// 通过初始化参数的name获取value</span></span><br><span class="line"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title function_">getInitParameterNames</span><span class="params">()</span>; <span class="comment">// 获取所有的初始化参数的name</span></span><br></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--以上两个方法是ServletContext对象的方法，这个方法获取的是什么信息？是以下的配置信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pageSize<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>startIndex<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意：以上的配置信息属于应用级的配置信息，一般一个项目中共享的配置信息会放到以上的标签当中。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果你的配置信息只是想给某一个servlet作为参考，那么你配置到servlet标签当中即可，使用ServletConfig对象来获取。--&gt;</span></span><br></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取应用的根路径（非常重要），因为在java源代码当中有一些地方可能会需要应用的根路径，这个方法可以动态获取应用的根路径</span></span><br><span class="line"><span class="comment">// 在java源码当中，不要将应用的根路径写死，因为你永远都不知道这个应用在最终部署的时候，起一个什么名字。</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getContextPath</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//String contextPath = application.getContextPath();</span></span><br></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文件的绝对路径（真实路径）</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getRealPath</span><span class="params">(String path)</span>;</span><br></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过ServletContext对象也是可以记录日志的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String message)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String message, Throwable t)</span>;</span><br><span class="line"><span class="comment">// 这些日志信息记录到哪里了？</span></span><br><span class="line"><span class="comment">// localhost.2021-11-05.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tomcat服务器的logs目录下都有哪些日志文件？</span></span><br><span class="line"><span class="comment">//catalina.2021-11-05.log 服务器端的java程序运行的控制台信息。</span></span><br><span class="line"><span class="comment">//localhost.2021-11-05.log ServletContext对象的log方法记录的日志信息存储到这个文件中。</span></span><br><span class="line"><span class="comment">//localhost_access_log.2021-11-05.txt 访问日志</span></span><br></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ServletContext对象还有另一个名字：应用域（后面还有其他域，例如：请求域、会话域）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果所有的用户共享一份数据，并且这个数据很少的被修改，并且这个数据量很少，可以将这些数据放到ServletContext这个应用域中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么是所有用户共享的数据？ 不是共享的没有意义。因为ServletContext这个对象只有一个。只有共享的数据放进去才有意义。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么数据量要小？ 因为数据量比较大的话，太占用堆内存，并且这个对象的生命周期比较长，服务器关闭的时候，这个对象才会被销毁。大数据量会影响服务器的性能。占用内存较小的数据量可以考虑放进去。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么这些共享数据很少的修改，或者说几乎不修改？</span></span><br><span class="line"><span class="comment">// 所有用户共享的数据，如果涉及到修改操作，必然会存在线程并发所带来的安全问题。所以放在ServletContext对象中的数据一般都是只读的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据量小、所有用户共享、又不修改，这样的数据放到ServletContext这个应用域当中，会大大提升效率。因为应用域相当于一个缓存，放到缓存中的数据，下次在用的时候，不需要从数据库中再次获取，大大提升执行效率。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存（怎么向ServletContext应用域中存数据）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object value)</span>; <span class="comment">// map.put(k, v)</span></span><br><span class="line"><span class="comment">// 取（怎么从ServletContext应用域中取数据）</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getAttribute</span><span class="params">(String name)</span>; <span class="comment">// Object v = map.get(k)</span></span><br><span class="line"><span class="comment">// 删（怎么删除ServletContext应用域中的数据）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>; <span class="comment">// map.remove(k)</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="注意：以后我们编写Servlet类的时候，实际上是不会去直接继承GenericServlet类的，因为我们是B-S结构的系统，这种系统是基于HTTP超文本传输协议的，在Servlet规范当中，提供了一个类叫做HttpServlet，它是专门为HTTP协议准备的一个Servlet类。我们编写的Servlet类要继承HttpServlet。（HttpServlet是HTTP协议专用的。）使用HttpServlet处理HTTP协议更便捷。但是你需要直到它的继承结构："><a href="#注意：以后我们编写Servlet类的时候，实际上是不会去直接继承GenericServlet类的，因为我们是B-S结构的系统，这种系统是基于HTTP超文本传输协议的，在Servlet规范当中，提供了一个类叫做HttpServlet，它是专门为HTTP协议准备的一个Servlet类。我们编写的Servlet类要继承HttpServlet。（HttpServlet是HTTP协议专用的。）使用HttpServlet处理HTTP协议更便捷。但是你需要直到它的继承结构：" class="headerlink" title="注意：以后我们编写Servlet类的时候，实际上是不会去直接继承GenericServlet类的，因为我们是B&#x2F;S结构的系统，这种系统是基于HTTP超文本传输协议的，在Servlet规范当中，提供了一个类叫做HttpServlet，它是专门为HTTP协议准备的一个Servlet类。我们编写的Servlet类要继承HttpServlet。（HttpServlet是HTTP协议专用的。）使用HttpServlet处理HTTP协议更便捷。但是你需要直到它的继承结构： "></a>注意：以后我们编写Servlet类的时候，实际上是不会去直接继承GenericServlet类的，因为我们是B&#x2F;S结构的系统，这种系统是基于HTTP超文本传输协议的，在Servlet规范当中，提供了一个类叫做HttpServlet，它是专门为HTTP协议准备的一个Servlet类。我们编写的Servlet类要继承HttpServlet。（HttpServlet是HTTP协议专用的。）使用HttpServlet处理HTTP协议更便捷。但是你需要直到它的继承结构： </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jakarta.servlet.Servlet（接口）【爷爷】</span><br><span class="line">jakarta.servlet.GenericServlet implements Servlet（抽象类）【儿子】</span><br><span class="line">jakarta.servlet.http.HttpServlet extends GenericServlet（抽象类）【孙子】</span><br><span class="line"></span><br><span class="line">我们以后编写的Servlet要继承HttpServlet类。</span><br></pre></td></tr></table></figure><ul><li>大家到目前为止都接触过哪些缓存机制了？ <ul><li>堆内存当中的字符串常量池。 <ul><li>“abc” 先在字符串常量池中查找，如果有，直接拿来用。如果没有则新建，然后再放入字符串常量池。</li></ul></li><li>堆内存当中的整数型常量池。 <ul><li>[-128 ~ 127] 一共256个Integer类型的引用，放在整数型常量池中。没有超出这个范围的话，直接从常量池中取。</li></ul></li><li>连接池(Connection Cache) <ul><li>这里所说的连接池中的连接是java语言连接数据库的连接对象：java.sql.Connection对象。</li><li>JVM是一个进程。MySQL数据库是一个进程。进程和进程之间建立连接，打开通道是很费劲的。是很耗费资源的。怎么办？可以提前先创建好N个Connection连接对象，将连接对象放到一个集合当中，我们把这个放有Connection对象的集合称为连接池。每一次用户连接的时候不需要再新建连接对象，省去了新建的环节，直接从连接池中获取连接对象，大大提升访问效率。</li><li>连接池 <ul><li>最小连接数</li><li>最大连接数</li><li>连接池可以提高用户的访问效率。当然也可以保证数据库的安全性。</li></ul></li></ul></li><li>线程池 <ul><li>Tomcat服务器本身就是支持多线程的。</li><li>Tomcat服务器是在用户发送一次请求，就新建一个Thread线程对象吗？ <ul><li>当然不是，实际上是在Tomcat服务器启动的时候，会先创建好N多个线程Thread对象，然后将线程对象放到集合当中，称为线程池。用户发送请求过来之后，需要有一个对应的线程来处理这个请求，这个时候线程对象就会直接从线程池中拿，效率比较高。</li><li>所有的WEB服务器，或者应用服务器，都是支持多线程的，都有线程池机制。</li></ul></li></ul></li><li>redis <ul><li>NoSQL数据库。非关系型数据库。缓存数据库。</li></ul></li><li>向ServletContext应用域中存储数据，也等于是将数据存放到缓存cache当中了。</li></ul></li></ul><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><ul><li>什么是协议？ <ul><li>协议实际上是某些人，或者某些组织提前制定好的一套规范，大家都按照这个规范来，这样可以做到沟通无障碍。</li><li>协议就是一套规范，就是一套标准。由其他人或其他组织来负责制定的。</li><li>我说的话你能听懂，你说的话，我也能听懂，这说明我们之间是有一套规范的，一套协议的，这套协议就是：中国普通话协议。我们都遵守这套协议，我们之间就可以沟通无障碍。</li></ul></li><li>什么是HTTP协议？ <ul><li>HTTP协议：是W3C制定的一种超文本传输协议。（通信协议：发送消息的模板提前被制定好。）</li><li>W3C： <ul><li>万维网联盟组织</li><li>负责制定标准的：HTTP HTML4.0 HTML5 XML DOM等规范都是W3C制定的。</li><li>万维网之父：蒂姆·伯纳斯·李</li></ul></li><li>什么是超文本？ <ul><li>超文本说的就是：不是普通文本，比如流媒体：声音、视频、图片等。</li><li>HTTP协议支持：不但可以传送普通字符串，同样支持传递声音、视频、图片等流媒体信息。</li></ul></li><li>这种协议游走在B和S之间。B向S发数据要遵循HTTP协议。S向B发数据同样需要遵循HTTP协议。这样B和S才能解耦合。</li><li>什么是解耦合？ <ul><li>B不依赖S。</li><li>S也不依赖B。</li></ul></li><li>B&#x2F;S表示：B&#x2F;S结构的系统（浏览器访问WEB服务器的系统）</li><li>浏览器   向   WEB服务器发送数据，叫做：请求（request)</li><li>WEB服务器   向   浏览器发送数据，叫做：响应（response）</li><li>HTTP协议包括： <ul><li>请求协议 <ul><li>浏览器  向   WEB服务器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</li></ul></li><li>响应协议 <ul><li>WEB服务器  向  浏览器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</li></ul></li></ul></li><li>HTTP协议就是提前制定好的一种消息模板。 <ul><li>不管你是哪个品牌的浏览器，都是这么发。</li><li>不管你是哪个品牌的WEB服务器，都是这么发。</li><li>FF浏览器  可以向 Tomcat发送请求，也可以向Jetty服务器发送请求。浏览器不依赖具体的服务器品牌。</li><li>WEB服务器也不依赖具体的浏览器品牌。可以是FF浏览器，也可以是Chrome浏览器，可以是IE，都行。</li></ul></li></ul></li><li><h2 id="HTTP的请求协议（B-–-S）-HTTP的请求协议包括：4部分-请求行-请求头-空白行-请求体-HTTP请求协议的具体报文：GET请求"><a href="#HTTP的请求协议（B-–-S）-HTTP的请求协议包括：4部分-请求行-请求头-空白行-请求体-HTTP请求协议的具体报文：GET请求" class="headerlink" title="HTTP的请求协议（B –&gt; S）-  HTTP的请求协议包括：4部分   - 请求行   - 请求头   - 空白行   - 请求体-  HTTP请求协议的具体报文：GET请求 "></a>HTTP的请求协议（B –&gt; S）<br>-  HTTP的请求协议包括：4部分<br>   - 请求行<br>   - 请求头<br>   - 空白行<br>   - 请求体<br>-  HTTP请求协议的具体报文：GET请求 </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /servlet05/getServlet?username=lucy&amp;userpwd=1111 HTTP/1.1                           请求行</span><br><span class="line">Host: localhost:8080                                                                    请求头</span><br><span class="line">Connection: keep-alive</span><br><span class="line">sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http://localhost:8080/servlet05/index.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">                                                                                        空白行</span><br><span class="line">                                                                                        请求体</span><br></pre></td></tr></table></figure><ul><li><h2 id="HTTP请求协议的具体报文：POST请求"><a href="#HTTP请求协议的具体报文：POST请求" class="headerlink" title="HTTP请求协议的具体报文：POST请求 "></a>HTTP请求协议的具体报文：POST请求 </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">POST /servlet05/postServlet HTTP/1.1                                                  请求行</span><br><span class="line">Host: localhost:8080                                                                  请求头</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 25</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://localhost:8080</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http://localhost:8080/servlet05/index.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">                                                                                      空白行</span><br><span class="line">username=lisi&amp;userpwd=123                                                             请求体</span><br></pre></td></tr></table></figure><ul><li>请求行 <ul><li>包括三部分： <ul><li>第一部分：请求方式（7种） <ul><li>get（常用的）</li><li>post（常用的）</li><li>delete</li><li>put</li><li>head</li><li>options</li><li>trace</li></ul></li><li>第二部分：URI <ul><li>什么是URI？ 统一资源标识符。代表网络中某个资源的名字。但是通过URI是无法定位资源的。</li><li>什么是URL？统一资源定位符。代表网络中某个资源，同时，通过URL是可以定位到该资源的。</li><li>URI和URL什么关系，有什么区别？ <ul><li>URL包括URI</li><li><a href="http://localhost:8080/servlet05/index.html">http://localhost:8080/servlet05/index.html</a> 这是URL。</li><li>&#x2F;servlet05&#x2F;index.html 这是URI。</li></ul></li></ul></li><li>第三部分：HTTP协议版本号</li></ul></li></ul></li><li>请求头 <ul><li>请求的主机</li><li>主机的端口</li><li>浏览器信息</li><li>平台信息</li><li>cookie等信息</li><li>….</li></ul></li><li>空白行 <ul><li>空白行是用来区分“请求头”和“请求体”</li></ul></li><li>请求体 <ul><li>向服务器发送的具体数据。</li></ul></li><li><h2 id="HTTP的响应协议（S-–-B）-HTTP的响应协议包括：4部分-状态行-响应头-空白行-响应体-HTTP响应协议的具体报文："><a href="#HTTP的响应协议（S-–-B）-HTTP的响应协议包括：4部分-状态行-响应头-空白行-响应体-HTTP响应协议的具体报文：" class="headerlink" title="HTTP的响应协议（S –&gt; B）-  HTTP的响应协议包括：4部分   - 状态行   - 响应头   - 空白行   - 响应体-  HTTP响应协议的具体报文： "></a>HTTP的响应协议（S –&gt; B）<br>-  HTTP的响应协议包括：4部分<br>   - 状态行<br>   - 响应头<br>   - 空白行<br>   - 响应体<br>-  HTTP响应协议的具体报文： </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 ok                                     状态行</span><br><span class="line">Content-Type: text/html;charset=UTF-8               响应头</span><br><span class="line">Content-Length: 160</span><br><span class="line">Date: Mon, 08 Nov 2021 13:19:32 GMT</span><br><span class="line">Keep-Alive: timeout=20</span><br><span class="line">Connection: keep-alive</span><br><span class="line">                                                    空白行</span><br><span class="line">&lt;!doctype html&gt;                                     响应体</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;from get servlet&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;from get servlet&lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>状态行 <ul><li>三部分组成 <ul><li>第一部分：协议版本号（HTTP&#x2F;1.1）</li><li>第二部分：状态码（HTTP协议中规定的响应状态号。不同的响应结果对应不同的号码。） <ul><li>200 表示请求响应成功，正常结束。</li><li>404表示访问的资源不存在，通常是因为要么是你路径写错了，要么是路径写对了，但是服务器中对应的资源并没有启动成功。总之404错误是前端错误。</li><li>405表示前端发送的请求方式与后端请求的处理方式不一致时发生： <ul><li>比如：前端是POST请求，后端的处理方式按照get方式进行处理时，发生405</li><li>比如：前端是GET请求，后端的处理方式按照post方式进行处理时，发生405</li></ul></li><li>500表示服务器端的程序出现了异常。一般会认为是服务器端的错误导致的。</li><li>以4开始的，一般是浏览器端的错误导致的。</li><li>以5开始的，一般是服务器端的错误导致的。</li></ul></li><li>第三部分：状态的描述信息 <ul><li>ok 表示正常成功结束。</li><li>not found 表示资源找不到。</li></ul></li></ul></li></ul></li><li>响应头： <ul><li>响应的内容类型</li><li>响应的内容长度</li><li>响应的时间</li><li>….</li></ul></li><li>空白行： <ul><li>用来分隔“响应头”和“响应体”的。</li></ul></li><li>响应体： <ul><li>响应体就是响应的正文，这些内容是一个长的字符串，这个字符串被浏览器渲染，解释并执行，最终展示出效果。</li></ul></li><li>怎么查看的协议内容？ <ul><li>使用chrome浏览器：F12。然后找到network，通过这个面板可以查看协议的具体内容。</li></ul></li><li>怎么向服务器发送GET请求，怎么向服务器发送POST请求？ <ul><li>到目前为止，只有一种情况可以发送POST请求：使用form表单，并且form标签中的method属性值为：method&#x3D;”post”。</li><li>其他所有情况一律都是get请求： <ul><li>在浏览器地址栏上直接输入URL，敲回车，属于get请求。</li><li>在浏览器上直接点击超链接，属于get请求。</li><li>使用form表单提交数据时，form标签中没有写method属性，默认就是get</li><li>或者使用form的时候，form标签中method属性值为：method&#x3D;”get”</li><li>….</li></ul></li></ul></li><li>GET请求和POST请求有什么区别？ <ul><li>get请求发送数据的时候，数据会挂在URI的后面，并且在URI后面添加一个“?”，”?”后面是数据。这样会导致发送的数据回显在浏览器的地址栏上。（get请求在“请求行”上发送数据） <ul><li><a href="http://localhost:8080/servlet05/getServlet?username=zhangsan&userpwd=1111">http://localhost:8080/servlet05/getServlet?username=zhangsan&userpwd=1111</a></li></ul></li><li>post请求发送数据的时候，在请求体当中发送。不会回显到浏览器的地址栏上。也就是说post发送的数据，在浏览器地址栏上看不到。（post在“请求体”当中发送数据）</li><li>get请求只能发送普通的字符串。并且发送的字符串长度有限制，不同的浏览器限制不同。这个没有明确的规范。</li><li>get请求无法发送大数据量。</li><li>post请求可以发送任何类型的数据，包括普通字符串，流媒体等信息：视频、声音、图片。</li><li>post请求可以发送大数据量，理论上没有长度限制。</li><li>get请求在W3C中是这样说的：get请求比较适合从服务器端获取数据。</li><li>post请求在W3C中是这样说的：post请求比较适合向服务器端传送数据。</li><li>get请求是安全的。get请求是绝对安全的。为什么？因为get请求只是为了从服务器上获取数据。不会对服务器造成威胁。（get本身是安全的，你不要用错了。用错了之后又冤枉人家get不安全，你这样不好（太坏了），那是你自己的问题，不是get请求的问题。）</li><li>post请求是危险的。为什么？因为post请求是向服务器提交数据，如果这些数据通过后门的方式进入到服务器当中，服务器是很危险的。另外post是为了提交数据，所以一般情况下拦截请求的时候，大部分会选择拦截（监听）post请求。</li><li>get请求支持缓存。 <ul><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/b40c-b425eb67cabc342ff5b9dc018b4b00cc.jpg">https://n.sinaimg.cn/finance/590/w240h350/20211101/b40c-b425eb67cabc342ff5b9dc018b4b00cc.jpg</a></li><li>任何一个get请求最终的“响应结果”都会被浏览器缓存起来。在浏览器缓存当中： <ul><li>一个get请求的路径a  对应  一个资源。</li><li>一个get请求的路径b  对应  一个资源。</li><li>一个get请求的路径c  对应  一个资源。</li><li>……</li></ul></li><li>实际上，你只要发送get请求，浏览器做的第一件事都是先从本地浏览器缓存中找，找不到的时候才会去服务器上获取。这种缓存机制目的是为了提高用户的体验。</li><li>有没有这样一个需求：我们不希望get请求走缓存，怎么办？怎么避免走缓存？我希望每一次这个get请求都去服务器上找资源，我不想从本地浏览器的缓存中取。 <ul><li>只要每一次get请求的请求路径不同即可。</li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897898">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897898</a></li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897899">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897899</a></li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=%E7%B3%BB%E7%BB%9F%E6%AF%AB%E7%A7%92%E6%95%B0">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=系统毫秒数</a></li><li>怎么解决？可以在路径的后面添加一个每时每刻都在变化的“时间戳”，这样，每一次的请求路径都不一样，浏览器就不走缓存了。</li></ul></li></ul></li><li>post请求不支持缓存。（POST是用来修改服务器端的资源的。） <ul><li>post请求之后，服务器“响应的结果”不会被浏览器缓存起来。因为这个缓存没有意义。</li></ul></li></ul></li><li>GET请求和POST请求如何选择，什么时候使用GET请求，什么时候使用POST请求？ <ul><li>怎么选择GET请求和POST请求呢？衡量标准是什么呢？你这个请求是想获取服务器端的数据，还是想向服务器发送数据。如果你是想从服务器上获取资源，建议使用GET请求，如果你这个请求是为了向服务器提交数据，建议使用POST请求。</li><li>大部分的form表单提交，都是post方式，因为form表单中要填写大量的数据，这些数据是收集用户的信息，一般是需要传给服务器，服务器将这些数据保存&#x2F;修改等。</li><li>如果表单中有敏感信息，还是建议适用post请求，因为get请求会回显敏感信息到浏览器地址栏上。（例如：密码信息）</li><li>做文件上传，一定是post请求。要传的数据不是普通文本。</li><li>其他情况都可以使用get请求。</li></ul></li><li>不管你是get请求还是post请求，发送的请求数据格式是完全相同的，只不过位置不同，格式都是统一的： <ul><li>name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value</li><li>name是什么？ <ul><li>以form表单为例：form表单中input标签的name。</li></ul></li><li>value是什么？ <ul><li>以form表单为例：form表单中input标签的value。</li></ul></li></ul></li></ul><h2 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h2><ul><li>什么是设计模式？ <ul><li>某个问题的固定的解决方案。(可以被重复使用。)</li></ul></li><li>你知道哪些设计模式？ <ul><li>GoF设计模式： <ul><li>通常我们所说的23种设计模式。（Gang of Four：4人组提出的设计模式）</li><li>单例模式</li><li>工厂模式</li><li>代理模式</li><li>门面模式</li><li>责任链设计模式</li><li>观察者模式</li><li>模板方法设计模式</li><li>…..</li></ul></li><li>JavaEE设计模式： <ul><li>DAO</li><li>DTO</li><li>VO</li><li>PO</li><li>pojo</li><li>….</li></ul></li><li>….</li></ul></li><li>什么是模板方法设计模式？ <ul><li>在模板类的模板方法当中定义核心算法骨架，具体的实现步骤可以延迟到子类当中完成。</li></ul></li><li>模板类通常是一个抽象类，模板类当中的模板方法定义核心算法，这个方法通常是final的（但也可以不是final的）</li><li>模板类当中的抽象方法就是不确定实现的方法，这个不确定怎么实现的事儿交给子类去做。</li></ul><h2 id="HttpServlet源码分析"><a href="#HttpServlet源码分析" class="headerlink" title="HttpServlet源码分析"></a>HttpServlet源码分析</h2><ul><li>HttpServlet类是专门为HTTP协议准备的。比GenericServlet更加适合HTTP协议下的开发。</li><li>HttpServlet在哪个包下？ <ul><li>jakarta.servlet.http.HttpServlet</li></ul></li><li>到目前为止我们接触了servlet规范中哪些接口？ <ul><li>jakarta.servlet.Servlet  核心接口（接口）</li><li>jakarta.servlet.ServletConfig Servlet配置信息接口（接口）</li><li>jakarta.servlet.ServletContext Servlet上下文接口（接口）</li><li>jakarta.servlet.ServletRequest Servlet请求接口（接口）</li><li>jakarta.servlet.ServletResponse Servlet响应接口（接口）</li><li>jakarta.servlet.ServletException Servlet异常（类）</li><li>jakarta.servlet.GenericServlet 标准通用的Servlet类（抽象类）</li></ul></li><li>http包下都有哪些类和接口呢？jakarta.servlet.http.*; <ul><li>jakarta.servlet.http.HttpServlet （HTTP协议专用的Servlet类，抽象类）</li><li>jakarta.servlet.http.HttpServletRequest （HTTP协议专用的请求对象）</li><li>jakarta.servlet.http.HttpServletResponse （HTTP协议专用的响应对象）</li></ul></li><li>HttpServletRequest对象中封装了什么信息？ <ul><li>HttpServletRequest，简称request对象。</li><li>HttpServletRequest中封装了请求协议的全部内容。</li><li>Tomcat服务器（WEB服务器）将“请求协议”中的数据全部解析出来，然后将这些数据全部封装到request对象当中了。</li><li>也就是说，我们只要面向HttpServletRequest，就可以获取请求协议中的数据。</li></ul></li><li>HttpServletResponse对象是专门用来响应HTTP协议到浏览器的。</li><li>回忆Servlet生命周期？ <ul><li>用户第一次请求 <ul><li>Tomcat服务器通过反射机制，调用无参数构造方法。创建Servlet对象。(web.xml文件中配置的Servlet类对应的对象。)</li><li>Tomcat服务器调用Servlet对象的init方法完成初始化。</li><li>Tomcat服务器调用Servlet对象的service方法处理请求。</li></ul></li><li>用户第二次请求 <ul><li>Tomcat服务器调用Servlet对象的service方法处理请求。</li></ul></li><li>用户第三次请求 <ul><li>Tomcat服务器调用Servlet对象的service方法处理请求。</li></ul></li><li>…. <ul><li>Tomcat服务器调用Servlet对象的service方法处理请求。</li></ul></li><li>服务器关闭 <ul><li>Tomcat服务器调用Servlet对象的destroy方法，做销毁之前的准备工作。</li><li>Tomcat服务器销毁Servlet对象。</li></ul></li></ul></li><li>HttpServlet源码分析：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"><span class="comment">// 用户第一次请求，创建HelloServlet对象的时候，会执行这个无参数构造方法。</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HelloServlet</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//override 重写 doGet方法</span></span><br><span class="line">    <span class="comment">//override 重写 doPost方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">GenericServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span>, ServletConfig,</span><br><span class="line">        java.io.Serializable &#123;</span><br><span class="line">           </span><br><span class="line"><span class="comment">// 用户第一次请求的时候，HelloServlet对象第一次被创建之后，这个init方法会执行。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">this</span>.config = config;</span><br><span class="line">        <span class="built_in">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 用户第一次请求的时候，带有参数的init(ServletConfig config)执行之后，会执行这个没有参数的init()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// NOOP by default</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HttpServlet模板类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HttpServlet</span> <span class="keyword">extends</span> <span class="title class_">GenericServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 用户发送第一次请求的时候这个service会执行</span></span><br><span class="line">    <span class="comment">// 用户发送第N次请求的时候，这个service方法还是会执行。</span></span><br><span class="line">    <span class="comment">// 用户只要发送一次请求，这个service方法就会执行一次。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest  request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将ServletRequest和ServletResponse向下转型为带有Http的HttpServletRequest和HttpServletResponse</span></span><br><span class="line">            request = (HttpServletRequest) req;</span><br><span class="line">            response = (HttpServletResponse) res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(lStrings.getString(<span class="string">&quot;http.non_http&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用重载的service方法。</span></span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这个service方法的两个参数都是带有Http的。</span></span><br><span class="line">    <span class="comment">// 这个service是一个模板方法。</span></span><br><span class="line">    <span class="comment">// 在该方法中定义核心算法骨架，具体的实现步骤延迟到子类中去完成。</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取请求方式</span></span><br><span class="line">        <span class="comment">// 这个请求方式最终可能是：&quot;&quot;</span></span><br><span class="line">        <span class="comment">// 注意：request.getMethod()方法获取的是请求方式，可能是七种之一：</span></span><br><span class="line">        <span class="comment">// GET POST PUT DELETE HEAD OPTIONS TRACE</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果请求方式是GET请求，则执行doGet方法。</span></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> ifModifiedSince;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">                    <span class="comment">// Invalid date header - proceed as if none was set</span></span><br><span class="line">                    ifModifiedSince = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; (lastModified / <span class="number">1000</span> * <span class="number">1000</span>)) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            <span class="comment">// 如果请求方式是POST请求，则执行doPost方法。</span></span><br><span class="line">            doPost(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">errMsg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="comment">// 报405错误</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_get_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 报405错误</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_post_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过以上源代码分析：</span></span><br><span class="line"><span class="comment">假设前端发送的请求是get请求，后端程序员重写的方法是doPost</span></span><br><span class="line"><span class="comment">假设前端发送的请求是post请求，后端程序员重写的方法是doGet</span></span><br><span class="line"><span class="comment">会发生什么呢？</span></span><br><span class="line"><span class="comment">发生405这样的一个错误。</span></span><br><span class="line"><span class="comment">405表示前端的错误，发送的请求方式不对。和服务器不一致。不是服务器需要的请求方式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">通过以上源代码可以知道：只要HttpServlet类中的doGet方法或doPost方法执行了，必然405.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">怎么避免405的错误呢？</span></span><br><span class="line"><span class="comment">后端重写了doGet方法，前端一定要发get请求。</span></span><br><span class="line"><span class="comment">后端重写了doPost方法，前端一定要发post请求。</span></span><br><span class="line"><span class="comment">这样可以避免405错误。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这种前端到底需要发什么样的请求，其实应该后端说了算。后端让发什么方式，前端就得发什么方式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">有的人，你会看到为了避免405错误，在Servlet类当中，将doGet和doPost方法都进行了重写。</span></span><br><span class="line"><span class="comment">这样，确实可以避免405的发生，但是不建议，405错误还是有用的。该报错的时候就应该让他报错。</span></span><br><span class="line"><span class="comment">如果你要是同时重写了doGet和doPost，那还不如你直接重写service方法好了。这样代码还能</span></span><br><span class="line"><span class="comment">少写一点。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>我们编写的HelloServlet直接继承HttpServlet，直接重写HttpServlet类中的service()方法行吗？ <ul><li>可以，只不过你享受不到405错误。享受不到HTTP协议专属的东西。</li></ul></li><li>到今天我们终于得到了最终的一个Servlet类的开发步骤： <ul><li>第一步：编写一个Servlet类，直接继承HttpServlet</li><li>第二步：重写doGet方法或者重写doPost方法，到底重写谁，javaweb程序员说了算。</li><li>第三步：将Servlet类配置到web.xml文件当中。</li><li>第四步：准备前端的页面（form表单），form表单中指定请求路径即可。</li></ul></li></ul><h2 id="关于一个web站点的欢迎页面"><a href="#关于一个web站点的欢迎页面" class="headerlink" title="关于一个web站点的欢迎页面"></a>关于一个web站点的欢迎页面</h2><ul><li>什么是一个web站点的欢迎页面？ <ul><li>对于一个webapp来说，我们是可以设置它的欢迎页面的。</li><li>设置了欢迎页面之后，当你访问这个webapp的时候，或者访问这个web站点的时候，没有指定任何“资源路径”，这个时候会默认访问你的欢迎页面。</li><li>我们一般的访问方式是： <ul><li><a href="http://localhost:8080/servlet06/login.html">http://localhost:8080/servlet06/login.html</a> 这种方式是指定了要访问的就是login.html资源。</li></ul></li><li>如果我们访问的方式是： <ul><li><a href="http://localhost:8080/servlet06">http://localhost:8080/servlet06</a> 如果我们访问的就是这个站点，没有指定具体的资源路径。它默认会访问谁呢？</li><li>默认会访问你设置的欢迎页面。</li></ul></li></ul></li><li><h2 id="怎么设置欢迎页面呢？-第一步：我在IDEA工具的web目录下新建了一个文件login-html-第二步：在web-xml文件中进行了以下的配置"><a href="#怎么设置欢迎页面呢？-第一步：我在IDEA工具的web目录下新建了一个文件login-html-第二步：在web-xml文件中进行了以下的配置" class="headerlink" title="怎么设置欢迎页面呢？-  第一步：我在IDEA工具的web目录下新建了一个文件login.html-  第二步：在web.xml文件中进行了以下的配置 "></a>怎么设置欢迎页面呢？<br>-  第一步：我在IDEA工具的web目录下新建了一个文件login.html<br>-  第二步：在web.xml文件中进行了以下的配置 </h2></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>  -  注意：设置欢迎页面的时候，这个路径不需要以“/”开始。并且这个路径默认是从webapp的根下开始查找。 </code></pre><ul><li>第三步：启动服务器，浏览器地址栏输入地址 <ul><li><a href="http://localhost:8080/servlet07">http://localhost:8080/servlet07</a></li></ul></li><li><h2 id="如果在webapp的根下新建一个目录，目录中再给一个文件，那么这个欢迎页该如何设置呢？-在webapp根下新建page1-在page1下新建page2目录-在page2目录下新建page-html页面-在web-xml文件中应该这样配置"><a href="#如果在webapp的根下新建一个目录，目录中再给一个文件，那么这个欢迎页该如何设置呢？-在webapp根下新建page1-在page1下新建page2目录-在page2目录下新建page-html页面-在web-xml文件中应该这样配置" class="headerlink" title="如果在webapp的根下新建一个目录，目录中再给一个文件，那么这个欢迎页该如何设置呢？-  在webapp根下新建page1-  在page1下新建page2目录-  在page2目录下新建page.html页面-  在web.xml文件中应该这样配置 "></a>如果在webapp的根下新建一个目录，目录中再给一个文件，那么这个欢迎页该如何设置呢？<br>-  在webapp根下新建page1<br>-  在page1下新建page2目录<br>-  在page2目录下新建page.html页面<br>-  在web.xml文件中应该这样配置 </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;welcome-file-list&gt;</span><br><span class="line">    &lt;welcome-file&gt;page1/page2/page.html&lt;/welcome-file&gt;</span><br><span class="line">&lt;/welcome-file-list&gt;</span><br></pre></td></tr></table></figure><pre><code>  -  注意：路径不需要以“/”开始，并且路径默认从webapp的根下开始找。 </code></pre><ul><li><h2 id="一个webapp是可以设置多个欢迎页面的"><a href="#一个webapp是可以设置多个欢迎页面的" class="headerlink" title="一个webapp是可以设置多个欢迎页面的 "></a>一个webapp是可以设置多个欢迎页面的 </h2></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>page1/page2/page.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：越靠上的优先级越高。找不到的继续向下找。 </li><li>你有没有注意一件事：当我的文件名设置为index.html的时候，不需要在web.xml文件中进行配置欢迎页面。这是为什么？ <ul><li>这是因为小猫咪Tomcat服务器已经提前配置好了。 </li><li><h2 id="实际上配置欢迎页面有两个地方可以配置：-一个是在webapp内部的web-xml文件中。（在这个地方配置的属于局部配置）-一个是在CATALINA-HOME-conf-web-xml文件中进行配置。（在这个地方配置的属于全局配置）"><a href="#实际上配置欢迎页面有两个地方可以配置：-一个是在webapp内部的web-xml文件中。（在这个地方配置的属于局部配置）-一个是在CATALINA-HOME-conf-web-xml文件中进行配置。（在这个地方配置的属于全局配置）" class="headerlink" title="实际上配置欢迎页面有两个地方可以配置：-  一个是在webapp内部的web.xml文件中。（在这个地方配置的属于局部配置）-  一个是在CATALINA_HOME&#x2F;conf&#x2F;web.xml文件中进行配置。（在这个地方配置的属于全局配置） "></a>实际上配置欢迎页面有两个地方可以配置：<br>-  一个是在webapp内部的web.xml文件中。（在这个地方配置的属于局部配置）<br>-  一个是在CATALINA_HOME&#x2F;conf&#x2F;web.xml文件中进行配置。（在这个地方配置的属于全局配置） </h2></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>     -  Tomcat服务器的全局欢迎页面是：index.html index.htm index.jsp。如果你一个web站点没有设置局部的欢迎页面，Tomcat服务器就会以index.html index.htm index.jsp作为一个web站点的欢迎页面。   -  注意原则：局部优先原则。（就近原则） </code></pre><ul><li>欢迎页可以是一个Servlet吗？ <ul><li>当然可以。 </li><li>你不要多想，欢迎页就是一个资源，既然是一个资源，那么可以是静态资源，也可以是动态资源。 </li><li>静态资源：index.html welcome.html ….. </li><li>动态资源：Servlet类。 </li><li><h2 id="步骤：-第一步：写一个Servlet"><a href="#步骤：-第一步：写一个Servlet" class="headerlink" title="步骤：-  第一步：写一个Servlet "></a>步骤：<br>-  第一步：写一个Servlet </h2></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WelcomeServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;&lt;h1&gt;welcome to bjpowernode!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>  -  第二步：在web.xml文件中配置servlet      -  </code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>welcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.WelcomeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>welcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/fdsa/fds/a/fds/af/ds/af/dsafdsafdsa<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>  -  第三步：在web.xml文件中配置欢迎页      -  </code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>fdsa/fds/a/fds/af/ds/af/dsafdsafdsa<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关于WEB-INF目录"><a href="#关于WEB-INF目录" class="headerlink" title="关于WEB-INF目录"></a>关于WEB-INF目录</h2><ul><li>在WEB-INF目录下新建了一个文件：welcome.html</li><li>打开浏览器访问：<a href="http://localhost:8080/servlet07/WEB-INF/welcome.html">http://localhost:8080/servlet07/WEB-INF/welcome.html</a> 出现了404错误。</li><li>注意：放在WEB-INF目录下的资源是受保护的。在浏览器上不能够通过路径直接访问。所以像HTML、CSS、JS、image等静态资源一定要放到WEB-INF目录之外。</li></ul><h2 id="HttpServletRequest接口详解"><a href="#HttpServletRequest接口详解" class="headerlink" title="HttpServletRequest接口详解"></a>HttpServletRequest接口详解</h2><ul><li>HttpServletRequest是一个接口，全限定名称：jakarta.servlet.http.HttpServletRequest </li><li>HttpServletRequest接口是Servlet规范中的一员。 </li><li><h2 id="HttpServletRequest接口的父接口：ServletRequest"><a href="#HttpServletRequest接口的父接口：ServletRequest" class="headerlink" title="HttpServletRequest接口的父接口：ServletRequest "></a>HttpServletRequest接口的父接口：ServletRequest </h2></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HttpServletRequest</span> <span class="keyword">extends</span> <span class="title class_">ServletRequest</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><h2 id="HttpServletRequest接口的实现类谁写的-HttpServletRequest对象是谁给创建的？-通过测试：org-apache-catalina-connector-RequestFacade-实现了-HttpServletRequest接口"><a href="#HttpServletRequest接口的实现类谁写的-HttpServletRequest对象是谁给创建的？-通过测试：org-apache-catalina-connector-RequestFacade-实现了-HttpServletRequest接口" class="headerlink" title="HttpServletRequest接口的实现类谁写的? HttpServletRequest对象是谁给创建的？-  通过测试：org.apache.catalina.connector.RequestFacade 实现了 HttpServletRequest接口 "></a>HttpServletRequest接口的实现类谁写的? HttpServletRequest对象是谁给创建的？<br>-  通过测试：org.apache.catalina.connector.RequestFacade 实现了 HttpServletRequest接口 </h2></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestFacade</span> <span class="keyword">implements</span> <span class="title class_">HttpServletRequest</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果说明：Tomcat服务器（WEB服务器、WEB容器）实现了HttpServletRequest接口，还是说明了Tomcat服务器实现了Servlet规范。而对于我们javaweb程序员来说，实际上不需要关心这个，我们只需要面向接口编程即可。我们关心的是HttpServletRequest接口中有哪些方法，这些方法可以完成什么功能！！！！ </li><li>HttpServletRequest对象中都有什么信息？都包装了什么信息？ <ul><li>HttpServletRequest对象是Tomcat服务器负责创建的。这个对象中封装了什么信息？封装了HTTP的请求协议。</li><li>实际上是用户发送请求的时候，遵循了HTTP协议，发送的是HTTP的请求协议，Tomcat服务器将HTTP协议中的信息以及数据全部解析出来，然后Tomcat服务器把这些信息封装到HttpServletRequest对象当中，传给了我们javaweb程序员。</li><li>javaweb程序员面向HttpServletRequest接口编程，调用方法就可以获取到请求的信息了。</li></ul></li><li>request和response对象的生命周期？ <ul><li>request对象和response对象，一个是请求对象，一个是响应对象。这两个对象只在当前请求中有效。</li><li>一次请求对应一个request。</li><li>两次请求则对应两个request。</li><li>…..</li></ul></li><li><h2 id="HttpServletRequest接口中有哪些常用的方法？-怎么获取前端浏览器用户提交的数据？"><a href="#HttpServletRequest接口中有哪些常用的方法？-怎么获取前端浏览器用户提交的数据？" class="headerlink" title="HttpServletRequest接口中有哪些常用的方法？-  怎么获取前端浏览器用户提交的数据？ "></a>HttpServletRequest接口中有哪些常用的方法？<br>-  怎么获取前端浏览器用户提交的数据？ </h2></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; getParameterMap() 这个是获取Map</span><br><span class="line">Enumeration&lt;String&gt; <span class="title function_">getParameterNames</span><span class="params">()</span> 这个是获取Map集合中所有的key</span><br><span class="line">String[] getParameterValues(String name) 根据key获取Map集合的value</span><br><span class="line">String <span class="title function_">getParameter</span><span class="params">(String name)</span>  获取value这个一维数组当中的第一个元素。这个方法最常用。</span><br><span class="line"><span class="comment">// 以上的4个方法，和获取用户提交的数据有关系。</span></span><br></pre></td></tr></table></figure><pre><code>  -  思考：如果是你，前端的form表单提交了数据之后，你准备怎么存储这些数据，你准备采用什么样的数据结构去存储这些数据呢？      -  前端提交的数据格式：username=abc&amp;userpwd=111&amp;aihao=s&amp;aihao=d&amp;aihao=tt      -  我会采用Map集合来存储：         -  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt;</span><br><span class="line">    key存储String</span><br><span class="line">    value存储String</span><br><span class="line">    这种想法对吗？不对。</span><br><span class="line">    如果采用以上的数据结构存储会发现key重复的时候value覆盖。</span><br><span class="line">    key         value</span><br><span class="line">    ---------------------</span><br><span class="line">    username    abc</span><br><span class="line">    userpwd     <span class="number">111</span></span><br><span class="line">    aihao       s</span><br><span class="line">    aihao       d</span><br><span class="line">    aihao       tt</span><br><span class="line">    这样是不行的，因为map的key不能重复。</span><br><span class="line">Map&lt;String, String[]&gt;</span><br><span class="line">    key存储String</span><br><span class="line">    value存储String[]</span><br><span class="line">    keyvalue</span><br><span class="line">    -------------------------------</span><br><span class="line">    username&#123;<span class="string">&quot;abc&quot;</span>&#125;</span><br><span class="line">    userpwd&#123;<span class="string">&quot;111&quot;</span>&#125;</span><br><span class="line">    aihao&#123;<span class="string">&quot;s&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;tt&quot;</span>&#125;</span><br></pre></td></tr></table></figure><pre><code>     -  注意：前端表单提交数据的时候，假设提交了120这样的“数字”，其实是以字符串&quot;120&quot;的方式提交的，所以服务器端获取到的一定是一个字符串的&quot;120&quot;，而不是一个数字。（前端永远提交的是字符串，后端获取的也永远是字符串。） </code></pre><ul><li><h2 id="手工开发一个webapp。测试HttpServletRequest接口中的相关方法。-先测试了4个常用的方法，获取请求参数的四个方法。"><a href="#手工开发一个webapp。测试HttpServletRequest接口中的相关方法。-先测试了4个常用的方法，获取请求参数的四个方法。" class="headerlink" title="手工开发一个webapp。测试HttpServletRequest接口中的相关方法。-  先测试了4个常用的方法，获取请求参数的四个方法。 "></a>手工开发一个webapp。测试HttpServletRequest接口中的相关方法。<br>-  先测试了4个常用的方法，获取请求参数的四个方法。 </h2></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">Enumeration&lt;String&gt; names = request.getParameterNames();</span><br><span class="line">String[] values = request.getParameterValues(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure><pre><code>  -  request对象实际上又称为“请求域”对象。      -  应用域对象是什么？         -  ServletContext （Servlet上下文对象。）         -  什么情况下会考虑向ServletContext这个应用域当中绑定数据呢？            - 第一：所有用户共享的数据。           - 第二：这个共享的数据量很小。           - 第三：这个共享的数据很少的修改操作。           - 在以上三个条件都满足的情况下，使用这个应用域对象，可以大大提高我们程序执行效率。           - 实际上向应用域当中绑定数据，就相当于把数据放到了缓存（Cache）当中，然后用户访问的时候直接从缓存中取，减少IO的操作，大大提升系统的性能，所以缓存技术是提高系统性能的重要手段。        -  你见过哪些缓存技术呢？            - 字符串常量池           - 整数型常量池 [-128~127]，但凡是在这个范围当中的Integer对象不再创建新对象，直接从这个整数型常量池中获取。大大提升系统性能。           - 数据库连接池（提前创建好N个连接对象，将连接对象放到集合当中，使用连接对象的时候，直接从缓存中拿。省去了连接对象的创建过程。效率提升。）           - 线程池（Tomcat服务器就是支持多线程的。所谓的线程池就是提前先创建好N个线程对象，将线程对象存储到集合中，然后用户请求过来之后，直接从线程池中获取线程对象，直接拿来用。提升系统性能）           - 后期你还会学习更多的缓存技术，例如：redis、mongoDB.....        -  ServletContext当中有三个操作域的方法：            -  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object obj)</span>; <span class="comment">// 向域当中绑定数据。</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(String name)</span>; <span class="comment">// 从域当中根据name获取数据。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>; <span class="comment">// 将域当中绑定的数据移除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上的操作类似于Map集合的操作。</span></span><br><span class="line">Map&lt;String, Object&gt; map;</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>, obj); <span class="comment">// 向map集合中放key和value</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> map.get(<span class="string">&quot;name&quot;</span>); <span class="comment">// 通过map集合的key获取value</span></span><br><span class="line">map.remove(<span class="string">&quot;name&quot;</span>); <span class="comment">// 通过Map集合的key删除key和value这个键值对。</span></span><br></pre></td></tr></table></figure><pre><code>     -  “请求域”对象         -  “请求域”对象要比“应用域”对象范围小很多。生命周期短很多。请求域只在一次请求内有效。         -  一个请求对象request对应一个请求域对象。一次请求结束之后，这个请求域就销毁了。         -  请求域对象也有这三个方法：            -  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object obj)</span>; <span class="comment">// 向域当中绑定数据。</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(String name)</span>; <span class="comment">// 从域当中根据name获取数据。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>; <span class="comment">// 将域当中绑定的数据移除</span></span><br></pre></td></tr></table></figure><pre><code>        -  请求域和应用域的选用原则？            - 尽量使用小的域对象，因为小的域对象占用的资源较少。     -  跳转         -  转发（一次请求）            -  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步：获取请求转发器对象</span></span><br><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/b&quot;</span>);</span><br><span class="line"><span class="comment">// 第二步：调用转发器的forward方法完成跳转/转发</span></span><br><span class="line">dispatcher.forward(request,response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步和第二步代码可以联合在一起。</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/b&quot;</span>).forward(request,response);</span><br></pre></td></tr></table></figure><pre><code>     -  两个Servlet怎么共享数据？         - 将数据放到ServletContext应用域当中，当然是可以的，但是应用域范围太大，占用资源太多。不建议使用。        - 可以将数据放到request域当中，然后AServlet转发到BServlet，保证AServlet和BServlet在同一次请求当中，这样就可以做到两个Servlet，或者多个Servlet共享同一份数据。     -  转发的下一个资源必须是一个Servlet吗？         - 不一定，只要是Tomcat服务器当中的合法资源，都是可以转发的。例如：html....        - 注意：转发的时候，路径的写法要注意，转发的路径以“/”开始，不加项目名。     -  关于request对象中两个非常容易混淆的方法：         -  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// uri?username=zhangsan&amp;userpwd=123&amp;sex=1</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前一定是执行过：request.setAttribute(&quot;name&quot;, new Object())</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上两个方法的区别是什么？</span></span><br><span class="line"><span class="comment">// 第一个方法：获取的是用户在浏览器上提交的数据。</span></span><br><span class="line"><span class="comment">// 第二个方法：获取的是请求域当中绑定的数据。</span></span><br></pre></td></tr></table></figure><pre><code>     -  HttpServletRequest接口的其他常用方法：         -  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取客户端的IP地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">remoteAddr</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line"></span><br><span class="line"><span class="comment">// get请求在请求行上提交数据。</span></span><br><span class="line"><span class="comment">// post请求在请求体中提交数据。</span></span><br><span class="line"><span class="comment">// 设置请求体的字符集。（显然这个方法是处理POST请求的乱码问题。这种方式并不能解决get请求的乱码问题。）</span></span><br><span class="line"><span class="comment">// Tomcat10之后，request请求体当中的字符集默认就是UTF-8，不需要设置字符集，不会出现乱码问题。</span></span><br><span class="line"><span class="comment">// Tomcat9前（包括9在内），如果前端请求体提交的是中文，后端获取之后出现乱码，怎么解决这个乱码？执行以下代码。</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Tomcat9之前（包括9），响应中文也是有乱码的，怎么解决这个响应的乱码？</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 在Tomcat10之后，包括10在内，响应中文的时候就不在出现乱码问题了。以上代码就不需要设置UTF-8了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意一个细节</span></span><br><span class="line"><span class="comment">// 在Tomcat10包括10在内之后的版本，中文将不再出现乱码。（这也体现了中文地位的提升。）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// get请求乱码问题怎么解决？</span></span><br><span class="line"><span class="comment">// get请求发送的时候，数据是在请求行上提交的，不是在请求体当中提交的。</span></span><br><span class="line"><span class="comment">// get请求乱码怎么解决</span></span><br><span class="line"><span class="comment">// 方案：修改CATALINA_HOME/conf/server.xml配置文件</span></span><br><span class="line">&lt;Connector URIEncoding=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 注意：从Tomcat8之后，URIEncoding的默认值就是UTF-8，所以GET请求也没有乱码问题了。</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 获取应用的根路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求方式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求的URI</span></span><br><span class="line"><span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();  <span class="comment">// /aaa/testRequest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取servlet path</span></span><br><span class="line"><span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> request.getServletPath(); <span class="comment">//   /testRequest</span></span><br></pre></td></tr></table></figure><h2 id="使用纯Servlet做一个单表的CRUD操作"><a href="#使用纯Servlet做一个单表的CRUD操作" class="headerlink" title="使用纯Servlet做一个单表的CRUD操作"></a>使用纯Servlet做一个单表的CRUD操作</h2><ul><li>使用纯粹的Servlet完成单表【对部门的】的增删改查操作。（B&#x2F;S结构的。） </li><li><h2 id="实现步骤-第一步：准备一张数据库表。（sql脚本）"><a href="#实现步骤-第一步：准备一张数据库表。（sql脚本）" class="headerlink" title="实现步骤-  第一步：准备一张数据库表。（sql脚本） "></a>实现步骤<br>-  第一步：准备一张数据库表。（sql脚本） </h2></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 部门表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> dept;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">deptno <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    dname <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    loc <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">10</span>, <span class="string">&#x27;XiaoShouBu&#x27;</span>, <span class="string">&#x27;BEIJING&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">20</span>, <span class="string">&#x27;YanFaBu&#x27;</span>, <span class="string">&#x27;SHANGHAI&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">30</span>, <span class="string">&#x27;JiShuBu&#x27;</span>, <span class="string">&#x27;GUANGZHOU&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">40</span>, <span class="string">&#x27;MeiTiBu&#x27;</span>, <span class="string">&#x27;SHENZHEN&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br></pre></td></tr></table></figure><ul><li>第二步：准备一套HTML页面（项目原型）【前端开发工具使用HBuilder】 <ul><li>把HTML页面准备好</li><li>然后将HTML页面中的链接都能够跑通。（页面流转没问题。）</li><li>应该设计哪些页面呢？ <ul><li>欢迎页面：index.html</li><li>列表页面：list.html（以列表页面为核心，展开其他操作。）</li><li>新增页面：add.html</li><li>修改页面：edit.html</li><li>详情页面：detail.html</li></ul></li></ul></li><li>第三步：分析我们这个系统包括哪些功能？ <ul><li>什么叫做一个功能呢？ <ul><li>只要 这个操作连接了数据库，就表示一个独立的功能。</li></ul></li><li>包括哪些功能？ <ul><li>查看部门列表</li><li>新增部门</li><li>删除部门</li><li>查看部门详细信息</li><li>跳转到修改页面</li><li>修改部门</li></ul></li></ul></li><li>第四步：在IDEA当中搭建开发环境 <ul><li>创建一个webapp（给这个webapp添加servlet-api.jar和jsp-api.jar到classpath当中。）</li><li>向webapp中添加连接数据库的jar包（mysql驱动） <ul><li>必须在WEB-INF目录下新建lib目录，然后将mysql的驱动jar包拷贝到这个lib目录下。这个目录名必须叫做lib，全部小写的。</li></ul></li><li>JDBC的工具类</li><li>将所有HTML页面拷贝到web目录下。</li></ul></li><li><h2 id="第五步：实现第一个功能：查看部门列表-我们应该怎么去实现一个功能呢？-建议：你可以从后端往前端一步一步写。也可以从前端一步一步往后端写。都可以。但是千万要记住不要想起来什么写什么。你写代码的过程最好是程序的执行过程。也就是说：程序执行到哪里，你就写哪里。这样一个顺序流下来之后，基本上不会出现什么错误、意外。-从哪里开始？-假设从前端开始，那么一定是从用户点击按钮那里开始的。-第一：先修改前端页面的超链接，因为用户先点击的就是这个超链接。"><a href="#第五步：实现第一个功能：查看部门列表-我们应该怎么去实现一个功能呢？-建议：你可以从后端往前端一步一步写。也可以从前端一步一步往后端写。都可以。但是千万要记住不要想起来什么写什么。你写代码的过程最好是程序的执行过程。也就是说：程序执行到哪里，你就写哪里。这样一个顺序流下来之后，基本上不会出现什么错误、意外。-从哪里开始？-假设从前端开始，那么一定是从用户点击按钮那里开始的。-第一：先修改前端页面的超链接，因为用户先点击的就是这个超链接。" class="headerlink" title="第五步：实现第一个功能：查看部门列表-  我们应该怎么去实现一个功能呢？   - 建议：你可以从后端往前端一步一步写。也可以从前端一步一步往后端写。都可以。但是千万要记住不要想起来什么写什么。你写代码的过程最好是程序的执行过程。也就是说：程序执行到哪里，你就写哪里。这样一个顺序流下来之后，基本上不会出现什么错误、意外。   - 从哪里开始？     - 假设从前端开始，那么一定是从用户点击按钮那里开始的。-  第一：先修改前端页面的超链接，因为用户先点击的就是这个超链接。 "></a>第五步：实现第一个功能：查看部门列表<br>-  我们应该怎么去实现一个功能呢？<br>   - 建议：你可以从后端往前端一步一步写。也可以从前端一步一步往后端写。都可以。但是千万要记住不要想起来什么写什么。你写代码的过程最好是程序的执行过程。也就是说：程序执行到哪里，你就写哪里。这样一个顺序流下来之后，基本上不会出现什么错误、意外。<br>   - 从哪里开始？<br>     - 假设从前端开始，那么一定是从用户点击按钮那里开始的。<br>-  第一：先修改前端页面的超链接，因为用户先点击的就是这个超链接。 </h2></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oa/dept/list&quot;</span>&gt;</span>查看部门列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>  -  第二：编写web.xml文件      -  </code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>list<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.oa.web.action.DeptListServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>list<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web.xml文件中的这个路径也是以“/”开始的，但是不需要加项目名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dept/list<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>  -  第三：编写DeptListServlet类继承HttpServlet类。然后重写doGet方法。      -  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptListServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>  -  第四：在DeptListServlet类的doGet方法中连接数据库，查询所有的部门，动态的展示部门列表页面.      -  分析list.html页面中哪部分是固定死的，哪部分是需要动态展示的。      -  list.html页面中的内容所有的双引号要替换成单引号，因为out.print(&quot;&quot;)这里有一个双引号，容易冲突。      -  现在写完这个功能之后，你会有一种感觉，感觉开发很繁琐，只使用servlet写代码太繁琐了。      -  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">deptno</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">dname</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">loc</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;loc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    out.print(<span class="string">&quot;&lt;tr&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;&lt;td&gt;&quot;</span>+(++i)+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;&lt;td&gt;&quot;</span>+deptno+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;&lt;td&gt;&quot;</span>+dname+<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;&lt;td&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;&lt;a href=&#x27;&#x27;&gt;删除&lt;/a&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;&lt;a href=&#x27;edit.html&#x27;&gt;修改&lt;/a&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;&lt;a href=&#x27;detail.html&#x27;&gt;详情&lt;/a&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;&lt;/tr&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第六步：查看部门详情。 <ul><li><h2 id="建议：从前端往后端一步一步实现。首先要考虑的是，用户点击的是什么？用户点击的东西在哪里？-一定要先找到用户点的“详情”在哪里。找了半天，终于在后端的java程序中找到了"><a href="#建议：从前端往后端一步一步实现。首先要考虑的是，用户点击的是什么？用户点击的东西在哪里？-一定要先找到用户点的“详情”在哪里。找了半天，终于在后端的java程序中找到了" class="headerlink" title="建议：从前端往后端一步一步实现。首先要考虑的是，用户点击的是什么？用户点击的东西在哪里？-  一定要先找到用户点的“详情”在哪里。找了半天，终于在后端的java程序中找到了 "></a>建议：从前端往后端一步一步实现。首先要考虑的是，用户点击的是什么？用户点击的东西在哪里？<br>-  一定要先找到用户点的“详情”在哪里。找了半天，终于在后端的java程序中找到了 </h2></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;写一个路径&#x27;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>        -  详情  是需要连接数据库的，所以这个超链接点击之后也是需要执行一段java代码的。所以要将这个超链接的路径修改一下。         -  注意：修改路径之后，这个路径是需要加项目名的。&quot;/oa/dept/detail&quot;      -  技巧：         -  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out.print(<span class="string">&quot;&lt;a href=&#x27;&quot;</span>+contextPath+<span class="string">&quot;/dept/detail?deptno=&quot;</span>+deptno+<span class="string">&quot;&#x27;&gt;详情&lt;/a&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><pre><code>        -  重点：向服务器提交数据的格式：uri?name=value&amp;name=value&amp;name=value&amp;name=value         -  这里的问号，必须是英文的问号。不能中文的问号。   -  解决404的问题。写web.xml文件。      -  </code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.oa.web.action.DeptDetailServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dept/detail<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>  -  编写一个类：DeptDetailServlet继承HttpServlet，重写doGet方法。      -  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptDetailServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//中文思路（思路来源于：你要做什么？目标：查看部门详细信息。）</span></span><br><span class="line">        <span class="comment">// 第一步：获取部门编号</span></span><br><span class="line">        <span class="comment">// 第二步：根据部门编号查询数据库，获取该部门编号对应的部门信息。</span></span><br><span class="line">        <span class="comment">// 第三步：将部门信息响应到浏览器上。（显示一个详情。）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>  -  在doGet方法当中：连接数据库，根据部门编号查询该部门的信息。动态展示部门详情页。 </code></pre><ul><li><h2 id="第七步：删除部门-怎么开始？从哪里开始？从前端页面开始，用户点击删除按钮的时候，应该提示用户是否删除。因为删除这个动作是比较危险的。任何系统在进行删除操作之前，是必须要提示用户的，因为这个删除的动作有可能是用户误操作。（在前端页面上写JS代码，来提示用户是否删除。）"><a href="#第七步：删除部门-怎么开始？从哪里开始？从前端页面开始，用户点击删除按钮的时候，应该提示用户是否删除。因为删除这个动作是比较危险的。任何系统在进行删除操作之前，是必须要提示用户的，因为这个删除的动作有可能是用户误操作。（在前端页面上写JS代码，来提示用户是否删除。）" class="headerlink" title="第七步：删除部门-  怎么开始？从哪里开始？从前端页面开始，用户点击删除按钮的时候，应该提示用户是否删除。因为删除这个动作是比较危险的。任何系统在进行删除操作之前，是必须要提示用户的，因为这个删除的动作有可能是用户误操作。（在前端页面上写JS代码，来提示用户是否删除。） "></a>第七步：删除部门<br>-  怎么开始？从哪里开始？从前端页面开始，用户点击删除按钮的时候，应该提示用户是否删除。因为删除这个动作是比较危险的。任何系统在进行删除操作之前，是必须要提示用户的，因为这个删除的动作有可能是用户误操作。（在前端页面上写JS代码，来提示用户是否删除。） </h2></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;del(30)&quot;</span> &gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">del</span>(<span class="params">dno</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;亲，删了不可恢复哦！&quot;</span>))&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;/oa/dept/delete?deptno=&quot;</span> + dno;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>  -  以上的前端程序要写到后端的java代码当中：      - DeptListServlet类的doGet方法当中，使用out.print()方法，将以上的前端代码输出到浏览器上。  -  解决404的问题：      -  [http://localhost:8080/oa/dept/delete?deptno=30](http://localhost:8080/oa/dept/delete?deptno=30)      -  web.xml文件         -  </code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjpowernode.oa.web.action.DeptDelServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dept/delete<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>     -  编写DeptDelServlet继承HttpServlet，重写doGet方法。      -  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.oa.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptDelServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 根据部门编号，删除部门。</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>     -  删除成功或者失败的时候的一个处理（这里我们选择了转发，并没有使用重定向机制。）         -  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断删除成功了还是失败了。</span></span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//删除成功</span></span><br><span class="line">    <span class="comment">//仍然跳转到部门列表页面</span></span><br><span class="line">    <span class="comment">//部门列表页面的显示需要执行另一个Servlet。怎么办？转发。</span></span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/dept/list&quot;</span>).forward(request, response);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 删除失败</span></span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/error.html&quot;</span>).forward(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第八步：新增部门 <ul><li>注意：最后保存成功之后，转发到 &#x2F;dept&#x2F;list 的时候，会出现405，为什么？ <ul><li>第一：保存用的是post请求。底层要执行doPost方法。</li><li>第二：转发是一次请求，之前是post，之后还是post，因为它是一次请求。</li><li>第三：&#x2F;dept&#x2F;list Servlet当中只有一个doGet方法。</li><li>怎么解决？两种方案 <ul><li>第一种：在&#x2F;dept&#x2F;list Servlet中添加doPost方法，然后在doPost方法中调用doGet。</li><li>第二种：重定向。</li></ul></li></ul></li></ul></li><li>第九步：跳转到修改部门的页面 </li><li>第十步：修改部门</li></ul><h2 id="在一个web应用中应该如何完成资源的跳转"><a href="#在一个web应用中应该如何完成资源的跳转" class="headerlink" title="在一个web应用中应该如何完成资源的跳转"></a>在一个web应用中应该如何完成资源的跳转</h2><ul><li>在一个web应用中通过两种方式，可以完成资源的跳转： <ul><li>第一种方式：转发</li><li>第二种方式：重定向</li></ul></li><li>转发和重定向有什么区别？ <ul><li><h2 id="代码上有什么区别？-转发"><a href="#代码上有什么区别？-转发" class="headerlink" title="代码上有什么区别？-  转发 "></a>代码上有什么区别？<br>-  转发 </h2></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取请求转发器对象</span></span><br><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/dept/list&quot;</span>);</span><br><span class="line"><span class="comment">// 调用请求转发器对象的forward方法完成转发</span></span><br><span class="line">dispatcher.forward(request, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并一行代码</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/dept/list&quot;</span>).forward(request, response);</span><br><span class="line"><span class="comment">// 转发的时候是一次请求，不管你转发了多少次。都是一次请求。</span></span><br><span class="line"><span class="comment">// AServlet转发到BServlet，再转发到CServlet，再转发到DServlet，不管转发了多少次，都在同一个request当中。</span></span><br><span class="line"><span class="comment">// 这是因为调用forward方法的时候，会将当前的request和response对象传递给下一个Servlet。</span></span><br></pre></td></tr></table></figure><pre><code>  -  重定向      -  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：路径上要加一个项目名。为什么？</span></span><br><span class="line"><span class="comment">// 浏览器发送请求，请求路径上是需要添加项目名的。</span></span><br><span class="line"><span class="comment">// 以下这一行代码会将请求路径“/oa/dept/list”发送给浏览器</span></span><br><span class="line"><span class="comment">// 浏览器会自发的向服务器发送一次全新的请求：/oa/dept/list</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;/oa/dept/list&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>形式上有什么区别？ <ul><li>转发（一次请求） <ul><li>在浏览器地址栏上发送的请求是：<a href="http://localhost:8080/servlet10/a">http://localhost:8080/servlet10/a</a> ，最终请求结束之后，浏览器地址栏上的地址还是这个。没变。</li></ul></li><li>重定向（两次请求） <ul><li>在浏览器地址栏上发送的请求是：<a href="http://localhost:8080/servlet10/a">http://localhost:8080/servlet10/a</a> ，最终在浏览器地址栏上显示的地址是：<a href="http://localhost:8080/servlet10/b">http://localhost:8080/servlet10/b</a></li></ul></li></ul></li><li>转发和重定向的本质区别？ <ul><li>转发：是由WEB服务器来控制的。A资源跳转到B资源，这个跳转动作是Tomcat服务器内部完成的。</li><li>重定向：是浏览器完成的。具体跳转到哪个资源，是浏览器说了算。</li></ul></li><li>使用一个例子去描述这个转发和重定向 <ul><li>借钱（转发：发送了一次请求） <ul><li>杜老师没钱了，找张三借钱，其实张三没有钱，但是张三够义气，张三自己找李四借了钱，然后张三把这个钱给了杜老师，杜老师不知道这个钱是李四的，杜老师只求了一个人。杜老师以为这个钱就是张三的。</li></ul></li><li>借钱（重定向：发送了两次请求） <ul><li>杜老师没钱了，找张三借钱，张三没有钱，张三有一个好哥们，叫李四，李四是个富二代，于是张三将李四的家庭住址告诉了杜老师，杜老师按照这个地址去找到李四，然后从李四那里借了钱。显然杜老师在这个过程中，求了两个人。并且杜老师知道最终这个钱是李四借给俺的。</li></ul></li></ul></li><li>转发和重定向应该如何选择？什么时候使用转发，什么时候使用重定向？ <ul><li>如果在上一个Servlet当中向request域当中绑定了数据，希望从下一个Servlet当中把request域里面的数据取出来，使用转发机制。</li><li>剩下所有的请求均使用重定向。（重定向使用较多。）</li></ul></li><li>跳转的下一个资源有没有要求呢？必须是一个Servlet吗？ <ul><li>不一定，跳转的资源只要是服务器内部合法的资源即可。包括：Servlet、JSP、HTML…..</li></ul></li><li>转发会存在浏览器的刷新问题。</li></ul><h2 id="将oa项目中的资源跳转修改为合适的跳转方式"><a href="#将oa项目中的资源跳转修改为合适的跳转方式" class="headerlink" title="将oa项目中的资源跳转修改为合适的跳转方式"></a>将oa项目中的资源跳转修改为合适的跳转方式</h2><ul><li>删除之后，重定向</li><li>修改之后，重定向</li><li>保存之后，重定向</li><li>重定向： <ul><li>成功</li><li>失败</li></ul></li></ul><h2 id="Servlet注解，简化配置"><a href="#Servlet注解，简化配置" class="headerlink" title="Servlet注解，简化配置"></a>Servlet注解，简化配置</h2><ul><li>分析oa项目中的web.xml文件 <ul><li>现在只是一个单标的CRUD，没有复杂的业务逻辑，很简单的一丢丢功能。web.xml文件中就有如此多的配置信息。如果采用这种方式，对于一个大的项目来说，这样的话web.xml文件会非常庞大，有可能最终会达到几十兆。</li><li>在web.xml文件中进行servlet信息的配置，显然开发效率比较低，每一个都需要配置一下。</li><li>而且在web.xml文件中的配置是很少被修改的，所以这种配置信息能不能直接写到java类当中呢？可以的。</li></ul></li><li>Servlet3.0版本之后，推出了各种Servlet基于注解式开发。优点是什么？ <ul><li>开发效率高，不需要编写大量的配置信息。直接在java类上使用注解进行标注。</li><li>web.xml文件体积变小了。</li></ul></li><li>并不是说注解有了之后，web.xml文件就不需要了： <ul><li>有一些需要变化的信息，还是要配置到web.xml文件中。一般都是 注解+配置文件 的开发模式。</li><li>一些不会经常变化修改的配置建议使用注解。一些可能会被修改的建议写到配置文件中。</li></ul></li><li><h2 id="我们的第一个注解："><a href="#我们的第一个注解：" class="headerlink" title="我们的第一个注解： "></a>我们的第一个注解： </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jakarta.servlet.annotation.WebServlet</span><br></pre></td></tr></table></figure><ul><li>在Servlet类上使用：@WebServlet，WebServlet注解中有哪些属性呢？ <ul><li>name属性：用来指定Servlet的名字。等同于：</li><li>urlPatterns属性：用来指定Servlet的映射路径。可以指定多个字符串。</li><li>loadOnStartUp属性：用来指定在服务器启动阶段是否加载该Servlet。等同于：</li><li>value属性：当注解的属性名是value的时候，使用注解的时候，value属性名是可以省略的。</li><li>注意：不是必须将所有属性都写上，只需要提供需要的。（需要什么用什么。）</li><li>注意：属性是一个数组，如果数组中只有一个元素，使用该注解的时候，属性值的大括号可以省略。</li></ul></li><li>注解对象的使用格式： <ul><li>@注解名称(属性名&#x3D;属性值, 属性名&#x3D;属性值, 属性名&#x3D;属性值….)</li></ul></li></ul><h2 id="使用模板方法设计模式优化oa项目"><a href="#使用模板方法设计模式优化oa项目" class="headerlink" title="使用模板方法设计模式优化oa项目"></a>使用模板方法设计模式优化oa项目</h2><ul><li>上面的注解解决了配置文件的问题。但是现在的oa项目仍然存在一个比较臃肿的问题。 <ul><li>一个单标的CRUD，就写了6个Servlet。如果一个复杂的业务系统，这种开发方式，显然会导致类爆炸。（类的数量太大。）</li><li>怎么解决这个类爆炸问题？可以使用模板方法设计模式。</li></ul></li><li>怎么解决类爆炸问题？ <ul><li>以前的设计是一个请求一个Servlet类。1000个请求对应1000个Servlet类。导致类爆炸。</li><li>可以这样做：一个请求对应一个方法。一个业务对应一个Servlet类。</li><li>处理部门相关业务的对应一个DeptServlet。处理用户相关业务的对应一个UserServlet。处理银行卡卡片业务对应一个CardServlet。</li></ul></li></ul><h2 id="分析使用纯粹Servlet开发web应用的缺陷"><a href="#分析使用纯粹Servlet开发web应用的缺陷" class="headerlink" title="分析使用纯粹Servlet开发web应用的缺陷"></a>分析使用纯粹Servlet开发web应用的缺陷</h2><ul><li>在Servlet当中编写HTML&#x2F;CSS&#x2F;JavaScript等前端代码。存在什么问题？ <ul><li>java程序中编写前端代码，编写难度大。麻烦。</li><li>java程序中编写前端代码，显然程序的耦合度非常高。</li><li>java程序中编写前端代码，代码非常不美观。</li><li>java程序中编写前端代码，维护成本太高。（非常难于维护） <ul><li>修改小小的一个前端代码，只要有改动，就需要重新编译java代码，生成新的class文件，打一个新的war包，重新发布。</li></ul></li></ul></li><li>思考一下，如果是你的话，你准备怎么解决这个问题？ <ul><li>思路很重要。使用什么样的思路去做、去解决这个问题 <ul><li>上面的那个Servlet（Java程序）能不能不写了，让机器自动生成。我们程序员只需要写这个Servlet程序中的“前端的那段代码”，然后让机器将我们写的“前端代码”自动翻译生成“Servlet这种java程序”。然后机器再自动将“java”程序编译生成”class”文件。然后再使用JVM调用这个class中的方法。</li></ul></li></ul></li></ul><h2 id="关于B-S结构系统的会话机制（session机制）"><a href="#关于B-S结构系统的会话机制（session机制）" class="headerlink" title="关于B&#x2F;S结构系统的会话机制（session机制）"></a>关于B&#x2F;S结构系统的会话机制（session机制）</h2><ul><li>什么是会话？ <ul><li>会话对应的英语单词：session</li><li>用户打开浏览器，进行一系列操作，然后最终将浏览器关闭，这个整个过程叫做：一次会话。会话在服务器端也有一个对应的java对象，这个java对象叫做：session。</li><li>什么是一次请求：用户在浏览器上点击了一下，然后到页面停下来，可以粗略认为是一次请求。请求对应的服务器端的java对象是：request。</li><li>一个会话当中包含多次请求。（一次会话对应N次请求。）</li></ul></li><li>在java的servlet规范当中，session对应的类名：HttpSession（jarkata.servlet.http.HttpSession） </li><li>session机制属于B&#x2F;S结构的一部分。如果使用php语言开发WEB项目，同样也是有session这种机制的。session机制实际上是一个规范。然后不同的语言对这种会话机制都有实现。 </li><li>session对象最主要的作用是：保存会话状态。（用户登录成功了，这是一种登录成功的状态，你怎么把登录成功的状态一直保存下来呢？使用session对象可以保留会话状态。） </li><li>为什么需要session对象来保存会话状态呢？ <ul><li>因为HTTP协议是一种无状态协议。</li><li>什么是无状态：请求的时候，B和S是连接的，但是请求结束之后，连接就断了。为什么要这么做？HTTP协议为什么要设计成这样？因为这样的无状态协议，可以降低服务器的压力。请求的瞬间是连接的，请求结束之后，连接断开，这样服务器压力小。</li><li>只要B和S断开了，那么关闭浏览器这个动作，服务器知道吗？ <ul><li>不知道。服务器是不知道浏览器关闭的。</li></ul></li></ul></li><li>张三打开一个浏览器A，李四打开一个浏览器B，访问服务器之后，在服务器端会生成： <ul><li>张三专属的session对象</li><li>李四专属的session对象</li></ul></li><li>为什么不使用request对象保存会话状态？为什么不使用ServletContext对象保存会话状态？ <ul><li>request.setAttribute()存，request.getAttribute()取，ServletContext也有这个方法。request是请求域。ServletContext是应用域。</li><li>request是一次请求一个对象。</li><li>ServletContext对象是服务器启动的时候创建，服务器关闭的时候销毁，这个ServletContext对象只有一个。</li><li>ServletContext对象的域太大。</li><li>request请求域（HttpServletRequest）、session会话域（HttpSession）、application域（ServletContext）</li><li>request &lt; session &lt; application</li></ul></li><li>思考一下：session对象的实现原理。 <ul><li>HttpSession session &#x3D; request.getSession();</li><li>这行代码很神奇。张三访问的时候获取的session对象就是张三的。李四访问的时候获取的session对象就是李四的。</li></ul></li><li>session的实现原理： <ul><li>JSESSIONID&#x3D;xxxxxx  这个是以Cookie的形式保存在浏览器的内存中的。浏览器只要关闭。这个cookie就没有了。</li><li>session列表是一个Map，map的key是sessionid，map的value是session对象。</li><li>用户第一次请求，服务器生成session对象，同时生成id，将id发送给浏览器。</li><li>用户第二次请求，自动将浏览器内存中的id发送给服务器，服务器根据id查找session对象。</li><li>关闭浏览器，内存消失，cookie消失，sessionid消失，会话等同于结束。</li></ul></li><li>Cookie禁用了，session还能找到吗？ <ul><li>cookie禁用是什么意思？服务器正常发送cookie给浏览器，但是浏览器不要了。拒收了。并不是服务器不发了。</li><li>找不到了。每一次请求都会获取到新的session对象。</li><li>cookie禁用了，session机制还能实现吗？ <ul><li>可以。需要使用URL重写机制。</li><li><a href="http://localhost:8080/servlet12/test/session;jsessionid=19D1C99560DCBF84839FA43D58F56E16">http://localhost:8080/servlet12/test/session;jsessionid=19D1C99560DCBF84839FA43D58F56E16</a></li><li>URL重写机制会提高开发者的成本。开发人员在编写任何请求路径的时候，后面都要添加一个sessionid，给开发带来了很大的难度，很大的成本。所以大部分的网站都是这样设计的：你要是禁用cookie，你就别用了。</li></ul></li></ul></li><li>总结一下到目前位置我们所了解的域对象： <ul><li>request（对应的类名：HttpServletRequest） <ul><li>请求域（请求级别的）</li></ul></li><li>session（对应的类名：HttpSession） <ul><li>会话域（用户级别的）</li></ul></li><li>application（对应的类名：ServletContext） <ul><li>应用域（项目级别的，所有用户共享的。）</li></ul></li><li>这三个域对象的大小关系 <ul><li>request &lt; session &lt; application</li></ul></li><li>他们三个域对象都有以下三个公共的方法： <ul><li>setAttribute（向域当中绑定数据）</li><li>getAttribute（从域当中获取数据）</li><li>removeAttribute（删除域当中的数据）</li></ul></li><li>使用原则：尽量使用小的域。</li></ul></li><li>session掌握之后，我们怎么解决oa项目中的登录问题，怎么能让登录起作用。 <ul><li>登录成功之后，可以将用户的登录信息存储到session当中。也就是说session中如果有用户的信息就代表用户登录成功了。session中没有用户信息，表示用户没有登录过。则跳转到登录页面。</li></ul></li><li><h2 id="销毁session对象："><a href="#销毁session对象：" class="headerlink" title="销毁session对象： "></a>销毁session对象： </h2></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ul><li>session的实现原理中，每一个session对象都会关联一个sessionid，例如： <ul><li>JSESSIONID&#x3D;41C481F0224664BDB28E95081D23D5B8</li><li>以上的这个键值对数据其实就是cookie对象。</li><li>对于session关联的cookie来说，这个cookie是被保存在浏览器的“运行内存”当中。</li><li>只要浏览器不关闭，用户再次发送请求的时候，会自动将运行内存中的cookie发送给服务器。</li><li>例如，这个Cookie: JSESSIONID&#x3D;41C481F0224664BDB28E95081D23D5B8就会再次发送给服务器。</li><li>服务器就是根据41C481F0224664BDB28E95081D23D5B8这个值来找到对应的session对象的。</li></ul></li><li>cookie怎么生成？cookie保存在什么地方？cookie有啥用？浏览器什么时候会发送cookie，发送哪些cookie给服务器？？？？？？？ </li><li>cookie最终是保存在浏览器客户端上的。 <ul><li>可以保存在运行内存中。（浏览器只要关闭cookie就消失了。）</li><li>也可以保存在硬盘文件中。（永久保存。）</li></ul></li><li>cookie有啥用呢？ <ul><li>cookie和session机制其实都是为了保存会话的状态。</li><li>cookie是将会话的状态保存在浏览器客户端上。（cookie数据存储在浏览器客户端上的。）</li><li>session是将会话的状态保存在服务器端上。（session对象是存储在服务器上。）</li><li>为什么要有cookie和session机制呢？因为HTTP协议是无状态 无连接协议。</li></ul></li><li>cookie的经典案例 <ul><li>京东商城，在未登录的情况下，向购物车中放几件商品。然后关闭商城，再次打开浏览器，访问京东商城的时候，购物车中的商品还在，这是怎么做的？我没有登录，为什么购物车中还有商品呢？ <ul><li>将购物车中的商品编号放到cookie当中，cookie保存在硬盘文件当中。这样即使关闭浏览器。硬盘上的cookie还在。下一次再打开京东商城的时候，查看购物车的时候，会自动读取本地硬盘中存储的cookie，拿到商品编号，动态展示购物车中的商品。 <ul><li>京东存储购物车中商品的cookie可能是这样的：productIds&#x3D;xxxxx,yyyy,zzz,kkkk</li><li>注意：cookie如果清除掉，购物车中的商品就消失了。</li></ul></li></ul></li><li>126邮箱中有一个功能：十天内免登录 <ul><li>这个功能也是需要cookie来实现的。</li><li>怎么实现的呢？ <ul><li>用户输入正确的用户名和密码，并且同时选择十天内免登录。登录成功后。浏览器客户端会保存一个cookie，这个cookie中保存了用户名和密码等信息，这个cookie是保存在硬盘文件当中的，十天有效。在十天内用户再次访问126的时候，浏览器自动提交126的关联的cookie给服务器，服务器接收到cookie之后，获取用户名和密码，验证，通过之后，自动登录成功。</li><li>怎么让cookie失效？ <ul><li>十天过后自动失效。</li><li>或者改密码。</li><li>或者在客户端浏览器上清除cookie。</li></ul></li></ul></li></ul></li></ul></li><li>cookie机制和session机制其实都不属于java中的机制，实际上cookie机制和session机制都是HTTP协议的一部分。php开发中也有cookie和session机制，只要是你是做web开发，不管是什么编程语言，cookie和session机制都是需要的。 </li><li>HTTP协议中规定：任何一个cookie都是由name和value组成的。name和value都是字符串类型的。 </li><li>在java的servlet中，对cookie提供了哪些支持呢？ <ul><li>提供了一个Cookie类来专门表示cookie数据。jakarta.servlet.http.Cookie;</li><li>java程序怎么把cookie数据发送给浏览器呢？response.addCookie(cookie);</li></ul></li><li>在HTTP协议中是这样规定的：当浏览器发送请求的时候，会自动携带该path下的cookie数据给服务器。（URL。） </li><li>关于cookie的有效时间 <ul><li>怎么用java设置cookie的有效时间 <ul><li>cookie.setMaxAge(60 * 60); 设置cookie在一小时之后失效。</li></ul></li><li>没有设置有效时间：默认保存在浏览器的运行内存中，浏览器关闭则cookie消失。</li><li>只要设置cookie的有效时间 &gt; 0，这个cookie一定会存储到硬盘文件当中。</li><li>设置cookie的有效时间 &#x3D; 0 呢？ <ul><li>cookie被删除，同名cookie被删除。</li></ul></li><li>设置cookie的有效时间 &lt; 0 呢？ <ul><li>保存在运行内存中。和不设置一样。</li></ul></li></ul></li><li>关于cookie的path，cookie关联的路径： <ul><li>假设现在发送的请求路径是“<a href="http://localhost:8080/servlet13/cookie/generate%E2%80%9D%E7%94%9F%E6%88%90%E7%9A%84cookie%EF%BC%8C%E5%A6%82%E6%9E%9Ccookie%E6%B2%A1%E6%9C%89%E8%AE%BE%E7%BD%AEpath%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84path%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">http://localhost:8080/servlet13/cookie/generate”生成的cookie，如果cookie没有设置path，默认的path是什么？</a> <ul><li>默认的path是：<a href="http://localhost:8080/servlet13/cookie">http://localhost:8080/servlet13/cookie</a> 以及它的子路径。</li><li>也就是说，以后只要浏览器的请求路径是<a href="http://localhost:8080/servlet13/cookie">http://localhost:8080/servlet13/cookie</a> 这个路径以及这个路径下的子路径，cookie都会被发送到服务器。</li></ul></li><li>手动设置cookie的path <ul><li>cookie.setPath(“&#x2F;servlet13”); 表示只要是这个servlet13项目的请求路径，都会提交这个cookie给服务器。</li></ul></li></ul></li><li><h2 id="浏览器发送cookie给服务器了，服务器中的java程序怎么接收？"><a href="#浏览器发送cookie给服务器了，服务器中的java程序怎么接收？" class="headerlink" title="浏览器发送cookie给服务器了，服务器中的java程序怎么接收？ "></a>浏览器发送cookie给服务器了，服务器中的java程序怎么接收？ </h2></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies(); <span class="comment">// 这个方法可能返回null</span></span><br><span class="line"><span class="keyword">if</span>(cookies != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">        <span class="comment">// 获取cookie的name</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">        <span class="comment">// 获取cookie的value</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用cookie实现一下十天内免登录功能。 <ul><li>先实现登录功能 <ul><li>登录成功 <ul><li>跳转到部门列表页面</li></ul></li><li>登录失败 <ul><li>跳转到登录失败页面</li></ul></li></ul></li><li>修改前端页面 <ul><li>在登录页面给一个复选框，复选框后面给一句话：十天内免登录。</li><li>用户选择了复选框：表示要支持十天内免登录。</li><li>用户没有选择复选框：表示用户不想使用十天内免登录功能。</li></ul></li><li>修改Servlet中的login方法 <ul><li>如果用户登录成功了，并且用户登录时选择了十天内免登录功能，这个时候应该在Servlet的login方法中创建cookie，用来存储用户名和密码，并且设置路径，设置有效期，将cookie响应给浏览器。（浏览器将其自动保存在硬盘文件当中10天）</li></ul></li><li>用户再次访问该网站的时候，访问这个网站的首页的时候，有两个走向: <ul><li>要么跳转到部门列表页面</li><li>要么跳转到登录页面</li><li>以上分别有两个走向，这显然是需要编写java程序进行控制的。</li></ul></li></ul></li></ul><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><ul><li>我的第一个JSP程序： <ul><li>在WEB-INF目录之外创建一个index.jsp文件，然后这个文件中没有任何内容。</li></ul></li><li>将上面的项目部署之后，启动服务器，打开浏览器，访问以下地址： <ul><li><a href="http://localhost:8080/jsp/index.jsp">http://localhost:8080/jsp/index.jsp</a> 展现在大家面前的是一个空白。</li><li>实际上访问以上的这个：index.jsp，底层执行的是：index_jsp.class 这个java程序。</li><li>这个index.jsp会被tomcat翻译生成index_jsp.java文件，然后tomcat服务器又会将index_jsp.java编译生成index_jsp.class文件</li><li>访问index.jsp，实际上执行的是index_jsp.class中的方法。</li></ul></li><li>JSP实际上就是一个Servlet。 <ul><li>index.jsp访问的时候，会自动翻译生成index_jsp.java，会自动编译生成index_jsp.class，那么index_jsp 这就是一个类。</li><li>index_jsp 类继承 HttpJspBase，而HttpJspBase类继承的是HttpServlet。所以index_jsp类就是一个Servlet类。</li><li>jsp的生命周期和Servlet的生命周期完全相同。完全就是一个东西。没有任何区别。</li><li>jsp和servlet一样，都是单例的。（假单例。）</li></ul></li><li>jsp文件第一次访问的时候是比较慢的，为什么？ <ul><li>为什么大部分的运维人员在给客户演示项目的时候，为什么提前先把所有的jsp文件先访问一遍。</li><li>第一次比较麻烦： <ul><li>要把jsp文件翻译生成java源文件</li><li>java源文件要编译生成class字节码文件</li><li>然后通过class去创建servlet对象</li><li>然后调用servlet对象的init方法</li><li>最后调用servlet对象的service方法。</li></ul></li><li>第二次就比较快了，为什么？ <ul><li>因为第二次直接调用单例servlet对象的service方法即可。</li></ul></li></ul></li><li>JSP是什么？ <ul><li>JSP是java程序。（JSP本质还是一个Servlet）</li><li>JSP是：JavaServer Pages的缩写。（基于Java语言实现的服务器端的页面。）</li><li>Servlet是JavaEE的13个子规范之一，那么JSP也是JavaEE的13个子规范之一。</li><li>JSP是一套规范。所有的web容器&#x2F;web服务器都是遵循这套规范的，都是按照这套规范进行的“翻译”</li><li>每一个web容器&#x2F;web服务器都会内置一个JSP翻译引擎。</li></ul></li><li>对JSP进行错误调试的时候，还是要直接打开JSP文件对应的java文件，检查java代码。 </li><li>开发JSP的最高境界： <ul><li>眼前是JSP代码，但是脑袋中呈现的是java代码。</li></ul></li><li>JSP既然本质上是一个Servlet，那么JSP和Servlet到底有什么区别呢？ <ul><li>职责不同： <ul><li>Servlet的职责是什么：收集数据。（Servlet的强项是逻辑处理，业务处理，然后链接数据库，获取&#x2F;收集数据。）</li><li>JSP的职责是什么：展示数据。（JSP的强项是做数据的展示）</li></ul></li></ul></li><li><h2 id="JSP的基础语法-在jsp文件中直接编写文字，都会自动被翻译到哪里？-翻译到servlet类的service方法的out-write-“翻译到这里”-，直接翻译到双引号里，被java程序当做普通字符串打印输出到浏览器。-在JSP中编写的HTML-CSS-JS代码，这些代码对于JSP来说只是一个普通的字符串。但是JSP把这个普通的字符串一旦输出到浏览器，浏览器就会对HTML-CSS-JS进行解释执行。展现一个效果。-JSP的page指令（这个指令后面再详细说，这里先解决一下中文乱码问题），解决响应时的中文乱码问题：-通过page指令来设置响应的内容类型，在内容类型的最后面添加：charset-UTF-8-，表示响应的内容类型是text-html，采用的字符集UTF-8-怎么在JSP中编写Java程序：-在这个符号当中编写的被视为java程序，被翻译到Servlet类的service方法内部。-这里你要细心点，你要思考，在这个符号里面写java代码的时候，你要时时刻刻的记住你正在“方法体”当中写代码，方法体中可以写什么，不可以写什么，你心里是否明白呢？-在service方法当中编写的代码是有顺序的，方法体当中的代码要遵循自上而下的顺序依次逐行执行。-service方法当中不能写静态代码块，不能写方法，不能定义成员变量。。。。。。-在同一个JSP当中-这个符号可以出现多个。-在这个符号当中编写的java程序会自动翻译到service方法之外。-这个语法很少用，为什么？不建议使用，因为在service方法外面写静态变量和实例变量，都会存在线程安全问题，因为JSP就是servlet，servlet是单例的，多线程并发的环境下，这个静态变量和实例变量一旦有修改操作，必然会存在线程安全问题。-JSP的输出语句-怎么向浏览器上输出一个java变量。-注意：以上代码中的out是JSP的九大内置对象之一。可以直接拿来用。当然，必须只能在service方法内部使用。-如果向浏览器上输出的内容中没有“java代码”，例如输出的字符串是一个固定的字符串，可以直接在jsp中编写，不需要写到-这里。-如果输出的内容中含有“java代码”，这个时候可以使用以下语法格式：-注意：在-的后面编写要输出的内容。-这个符号会被翻译到哪里？最终翻译成什么？-翻译成了这个java代码：-out-print-翻译到service方法当中了。-什么时候使用-输出呢？输出的内容中含有java的变量，输出的内容是一个动态的内容，不是一个死的字符串。如果输出的是一个固定的字符串，直接在JSP文件中编写即可。-在JSP中如何编写JSP的专业注释"><a href="#JSP的基础语法-在jsp文件中直接编写文字，都会自动被翻译到哪里？-翻译到servlet类的service方法的out-write-“翻译到这里”-，直接翻译到双引号里，被java程序当做普通字符串打印输出到浏览器。-在JSP中编写的HTML-CSS-JS代码，这些代码对于JSP来说只是一个普通的字符串。但是JSP把这个普通的字符串一旦输出到浏览器，浏览器就会对HTML-CSS-JS进行解释执行。展现一个效果。-JSP的page指令（这个指令后面再详细说，这里先解决一下中文乱码问题），解决响应时的中文乱码问题：-通过page指令来设置响应的内容类型，在内容类型的最后面添加：charset-UTF-8-，表示响应的内容类型是text-html，采用的字符集UTF-8-怎么在JSP中编写Java程序：-在这个符号当中编写的被视为java程序，被翻译到Servlet类的service方法内部。-这里你要细心点，你要思考，在这个符号里面写java代码的时候，你要时时刻刻的记住你正在“方法体”当中写代码，方法体中可以写什么，不可以写什么，你心里是否明白呢？-在service方法当中编写的代码是有顺序的，方法体当中的代码要遵循自上而下的顺序依次逐行执行。-service方法当中不能写静态代码块，不能写方法，不能定义成员变量。。。。。。-在同一个JSP当中-这个符号可以出现多个。-在这个符号当中编写的java程序会自动翻译到service方法之外。-这个语法很少用，为什么？不建议使用，因为在service方法外面写静态变量和实例变量，都会存在线程安全问题，因为JSP就是servlet，servlet是单例的，多线程并发的环境下，这个静态变量和实例变量一旦有修改操作，必然会存在线程安全问题。-JSP的输出语句-怎么向浏览器上输出一个java变量。-注意：以上代码中的out是JSP的九大内置对象之一。可以直接拿来用。当然，必须只能在service方法内部使用。-如果向浏览器上输出的内容中没有“java代码”，例如输出的字符串是一个固定的字符串，可以直接在jsp中编写，不需要写到-这里。-如果输出的内容中含有“java代码”，这个时候可以使用以下语法格式：-注意：在-的后面编写要输出的内容。-这个符号会被翻译到哪里？最终翻译成什么？-翻译成了这个java代码：-out-print-翻译到service方法当中了。-什么时候使用-输出呢？输出的内容中含有java的变量，输出的内容是一个动态的内容，不是一个死的字符串。如果输出的是一个固定的字符串，直接在JSP文件中编写即可。-在JSP中如何编写JSP的专业注释" class="headerlink" title="JSP的基础语法- 在jsp文件中直接编写文字，都会自动被翻译到哪里？  - 翻译到servlet类的service方法的out.write(“翻译到这里”)，直接翻译到双引号里，被java程序当做普通字符串打印输出到浏览器。  - 在JSP中编写的HTML CSS JS代码，这些代码对于JSP来说只是一个普通的字符串。但是JSP把这个普通的字符串一旦输出到浏览器，浏览器就会对HTML CSS JS进行解释执行。展现一个效果。- JSP的page指令（这个指令后面再详细说，这里先解决一下中文乱码问题），解决响应时的中文乱码问题：  - 通过page指令来设置响应的内容类型，在内容类型的最后面添加：charset&#x3D;UTF-8    - &lt;%@page  contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8”%&gt;，表示响应的内容类型是text&#x2F;html，采用的字符集UTF-8    - &lt;%@page  import&#x3D;”java.util.List,java.util.ArrayList”%&gt;- 怎么在JSP中编写Java程序：  - &lt;% java语句; %&gt;    - 在这个符号当中编写的被视为java程序，被翻译到Servlet类的service方法内部。    - 这里你要细心点，你要思考，在&lt;% %&gt;这个符号里面写java代码的时候，你要时时刻刻的记住你正在“方法体”当中写代码，方法体中可以写什么，不可以写什么，你心里是否明白呢？    - 在service方法当中编写的代码是有顺序的，方法体当中的代码要遵循自上而下的顺序依次逐行执行。    - service方法当中不能写静态代码块，不能写方法，不能定义成员变量。。。。。。    - 在同一个JSP当中 &lt;%%&gt; 这个符号可以出现多个。  - &lt;%! %&gt;    - 在这个符号当中编写的java程序会自动翻译到service方法之外。    - 这个语法很少用，为什么？不建议使用，因为在service方法外面写静态变量和实例变量，都会存在线程安全问题，因为JSP就是servlet，servlet是单例的，多线程并发的环境下，这个静态变量和实例变量一旦有修改操作，必然会存在线程安全问题。  - JSP的输出语句    - 怎么向浏览器上输出一个java变量。    - &lt;% String name &#x3D; “jack”;  out.write(“name &#x3D; “ + name); %&gt;    - 注意：以上代码中的out是JSP的九大内置对象之一。可以直接拿来用。当然，必须只能在service方法内部使用。    - 如果向浏览器上输出的内容中没有“java代码”，例如输出的字符串是一个固定的字符串，可以直接在jsp中编写，不需要写到&lt;%%&gt; 这里。    - 如果输出的内容中含有“java代码”，这个时候可以使用以下语法格式：      - &lt;%&#x3D; %&gt; 注意：在&#x3D;的后面编写要输出的内容。      - &lt;%&#x3D; %&gt; 这个符号会被翻译到哪里？最终翻译成什么？        - 翻译成了这个java代码：   out.print();        - 翻译到service方法当中了。      - 什么时候使用&lt;%&#x3D;%&gt; 输出呢？输出的内容中含有java的变量，输出的内容是一个动态的内容，不是一个死的字符串。如果输出的是一个固定的字符串，直接在JSP文件中编写即可。- 在JSP中如何编写JSP的专业注释  - &lt;%–JSP的专业注释，不会被翻译到java源代码当中。–%&gt;"></a>JSP的基础语法<br>- 在jsp文件中直接编写文字，都会自动被翻译到哪里？<br>  - 翻译到servlet类的service方法的out.write(“翻译到这里”)，直接翻译到双引号里，被java程序当做普通字符串打印输出到浏览器。<br>  - 在JSP中编写的HTML CSS JS代码，这些代码对于JSP来说只是一个普通的字符串。但是JSP把这个普通的字符串一旦输出到浏览器，浏览器就会对HTML CSS JS进行解释执行。展现一个效果。<br>- JSP的page指令（这个指令后面再详细说，这里先解决一下中文乱码问题），解决响应时的中文乱码问题：<br>  - 通过page指令来设置响应的内容类型，在内容类型的最后面添加：charset&#x3D;UTF-8<br>    - &lt;%<a href="/page">@page </a> contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8”%&gt;，表示响应的内容类型是text&#x2F;html，采用的字符集UTF-8<br>    - &lt;%<a href="/page">@page </a> import&#x3D;”java.util.List,java.util.ArrayList”%&gt;<br>- 怎么在JSP中编写Java程序：<br>  - &lt;% java语句; %&gt;<br>    - 在这个符号当中编写的被视为java程序，被翻译到Servlet类的service方法内部。<br>    - 这里你要细心点，你要思考，在&lt;% %&gt;这个符号里面写java代码的时候，你要时时刻刻的记住你正在“方法体”当中写代码，方法体中可以写什么，不可以写什么，你心里是否明白呢？<br>    - 在service方法当中编写的代码是有顺序的，方法体当中的代码要遵循自上而下的顺序依次逐行执行。<br>    - service方法当中不能写静态代码块，不能写方法，不能定义成员变量。。。。。。<br>    - 在同一个JSP当中 &lt;%%&gt; 这个符号可以出现多个。<br>  - &lt;%! %&gt;<br>    - 在这个符号当中编写的java程序会自动翻译到service方法之外。<br>    - 这个语法很少用，为什么？不建议使用，因为在service方法外面写静态变量和实例变量，都会存在线程安全问题，因为JSP就是servlet，servlet是单例的，多线程并发的环境下，这个静态变量和实例变量一旦有修改操作，必然会存在线程安全问题。<br>  - JSP的输出语句<br>    - 怎么向浏览器上输出一个java变量。<br>    - &lt;% String name &#x3D; “jack”;  out.write(“name &#x3D; “ + name); %&gt;<br>    - 注意：以上代码中的out是JSP的九大内置对象之一。可以直接拿来用。当然，必须只能在service方法内部使用。<br>    - 如果向浏览器上输出的内容中没有“java代码”，例如输出的字符串是一个固定的字符串，可以直接在jsp中编写，不需要写到&lt;%%&gt; 这里。<br>    - 如果输出的内容中含有“java代码”，这个时候可以使用以下语法格式：<br>      - &lt;%&#x3D; %&gt; 注意：在&#x3D;的后面编写要输出的内容。<br>      - &lt;%&#x3D; %&gt; 这个符号会被翻译到哪里？最终翻译成什么？<br>        - 翻译成了这个java代码：   out.print();<br>        - 翻译到service方法当中了。<br>      - 什么时候使用&lt;%&#x3D;%&gt; 输出呢？输出的内容中含有java的变量，输出的内容是一个动态的内容，不是一个死的字符串。如果输出的是一个固定的字符串，直接在JSP文件中编写即可。<br>- 在JSP中如何编写JSP的专业注释<br>  - &lt;%–JSP的专业注释，不会被翻译到java源代码当中。–%&gt;</h2><ul><li>JSP基础语法总结： <ul><li>JSP中直接编写普通字符串 <ul><li>翻译到service方法的out.write(“这里”)</li></ul></li><li>&lt;%%&gt; <ul><li>翻译到service方法体内部，里面是一条一条的java语句。</li></ul></li><li>&lt;%! %&gt; <ul><li>翻译到service方法之外。</li></ul></li><li>&lt;%&#x3D; %&gt; <ul><li>翻译到service方法体内部，翻译为：out.print();</li></ul></li><li>&lt;%<a href="/page">@page </a>  contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8”%&gt;  <ul><li>page指令，通过contentType属性用来设置响应的内容类型。</li></ul></li></ul></li><li><h2 id="使用Servlet-JSP完成oa项目的改造。-使用Servlet处理业务，收集数据。-使用JSP展示数据。-将之前原型中的html文件，全部修改为jsp，然后在jsp文件头部添加page指令（指定contentType防止中文乱码），将所有的JSP直接拷贝到web目录下。-完成所有页面的正常流转。（页面仍然能够正常的跳转。修改超链接的请求路径。）-在JSP中动态的获取应用的根路径。-Servlet中连接数据库，查询所有的部门，遍历结果集。-遍历结果集的过程中，取出部门编号、部门名、位置等信息，封装成java对象。-将java对象存放到List集合中。-将List集合存储到request域当中。-转发forward到jsp。-在JSP中：-从request域当中取出List集合。-遍历List集合，取出每个部门对象。动态生成tr。-思考一个问题：如果我只用JSP这一个技术，能不能开发web应用？-当然可以使用JSP来完成所有的功能。因为JSP就是Servlet，在JSP的里面写的代码就是在service方法当中的，所以在当中完全可以编写JDBC代码，连接数据库，查询数据，也可以在这个方法当中编写业务逻辑代码，处理业务，都是可以的，所以使用单独的JSP开发web应用完全没问题。-虽然JSP一个技术就可以完成web应用，但是不建议，还是建议采用servlet-jsp的方式进行开发。这样都能将各自的优点发挥出来。JSP就是做数据展示。Servlet就是做数据的收集。（JSP中编写的Java代码越少越好。）一定要职责分明。-JSP文件的扩展名必须是xxx-jsp吗？-jsp文件的扩展名是可以配置的。不是固定的。-在CATALINA-HOME-conf-web-xml，在这个文件当中配置jsp文件的扩展名。"><a href="#使用Servlet-JSP完成oa项目的改造。-使用Servlet处理业务，收集数据。-使用JSP展示数据。-将之前原型中的html文件，全部修改为jsp，然后在jsp文件头部添加page指令（指定contentType防止中文乱码），将所有的JSP直接拷贝到web目录下。-完成所有页面的正常流转。（页面仍然能够正常的跳转。修改超链接的请求路径。）-在JSP中动态的获取应用的根路径。-Servlet中连接数据库，查询所有的部门，遍历结果集。-遍历结果集的过程中，取出部门编号、部门名、位置等信息，封装成java对象。-将java对象存放到List集合中。-将List集合存储到request域当中。-转发forward到jsp。-在JSP中：-从request域当中取出List集合。-遍历List集合，取出每个部门对象。动态生成tr。-思考一个问题：如果我只用JSP这一个技术，能不能开发web应用？-当然可以使用JSP来完成所有的功能。因为JSP就是Servlet，在JSP的里面写的代码就是在service方法当中的，所以在当中完全可以编写JDBC代码，连接数据库，查询数据，也可以在这个方法当中编写业务逻辑代码，处理业务，都是可以的，所以使用单独的JSP开发web应用完全没问题。-虽然JSP一个技术就可以完成web应用，但是不建议，还是建议采用servlet-jsp的方式进行开发。这样都能将各自的优点发挥出来。JSP就是做数据展示。Servlet就是做数据的收集。（JSP中编写的Java代码越少越好。）一定要职责分明。-JSP文件的扩展名必须是xxx-jsp吗？-jsp文件的扩展名是可以配置的。不是固定的。-在CATALINA-HOME-conf-web-xml，在这个文件当中配置jsp文件的扩展名。" class="headerlink" title="使用Servlet + JSP完成oa项目的改造。-  使用Servlet处理业务，收集数据。 使用JSP展示数据。-  将之前原型中的html文件，全部修改为jsp，然后在jsp文件头部添加page指令（指定contentType防止中文乱码），将所有的JSP直接拷贝到web目录下。-  完成所有页面的正常流转。（页面仍然能够正常的跳转。修改超链接的请求路径。）   - &lt;%&#x3D;request.getContextPath() %&gt;  在JSP中动态的获取应用的根路径。-  Servlet中连接数据库，查询所有的部门，遍历结果集。   - 遍历结果集的过程中，取出部门编号、部门名、位置等信息，封装成java对象。   - 将java对象存放到List集合中。   - 将List集合存储到request域当中。   - 转发forward到jsp。-  在JSP中：   - 从request域当中取出List集合。   - 遍历List集合，取出每个部门对象。动态生成tr。-  思考一个问题：如果我只用JSP这一个技术，能不能开发web应用？   - 当然可以使用JSP来完成所有的功能。因为JSP就是Servlet，在JSP的&lt;%%&gt;里面写的代码就是在service方法当中的，所以在&lt;%%&gt;当中完全可以编写JDBC代码，连接数据库，查询数据，也可以在这个方法当中编写业务逻辑代码，处理业务，都是可以的，所以使用单独的JSP开发web应用完全没问题。   - 虽然JSP一个技术就可以完成web应用，但是不建议，还是建议采用servlet + jsp的方式进行开发。这样都能将各自的优点发挥出来。JSP就是做数据展示。Servlet就是做数据的收集。（JSP中编写的Java代码越少越好。）一定要职责分明。-  JSP文件的扩展名必须是xxx.jsp吗？   -  jsp文件的扩展名是可以配置的。不是固定的。   -  在CATALINA_HOME&#x2F;conf&#x2F;web.xml，在这个文件当中配置jsp文件的扩展名。 "></a>使用Servlet + JSP完成oa项目的改造。<br>-  使用Servlet处理业务，收集数据。 使用JSP展示数据。<br>-  将之前原型中的html文件，全部修改为jsp，然后在jsp文件头部添加page指令（指定contentType防止中文乱码），将所有的JSP直接拷贝到web目录下。<br>-  完成所有页面的正常流转。（页面仍然能够正常的跳转。修改超链接的请求路径。）<br>   - &lt;%&#x3D;request.getContextPath() %&gt;  在JSP中动态的获取应用的根路径。<br>-  Servlet中连接数据库，查询所有的部门，遍历结果集。<br>   - 遍历结果集的过程中，取出部门编号、部门名、位置等信息，封装成java对象。<br>   - 将java对象存放到List集合中。<br>   - 将List集合存储到request域当中。<br>   - 转发forward到jsp。<br>-  在JSP中：<br>   - 从request域当中取出List集合。<br>   - 遍历List集合，取出每个部门对象。动态生成tr。<br>-  思考一个问题：如果我只用JSP这一个技术，能不能开发web应用？<br>   - 当然可以使用JSP来完成所有的功能。因为JSP就是Servlet，在JSP的&lt;%%&gt;里面写的代码就是在service方法当中的，所以在&lt;%%&gt;当中完全可以编写JDBC代码，连接数据库，查询数据，也可以在这个方法当中编写业务逻辑代码，处理业务，都是可以的，所以使用单独的JSP开发web应用完全没问题。<br>   - 虽然JSP一个技术就可以完成web应用，但是不建议，还是建议采用servlet + jsp的方式进行开发。这样都能将各自的优点发挥出来。JSP就是做数据展示。Servlet就是做数据的收集。（JSP中编写的Java代码越少越好。）一定要职责分明。<br>-  JSP文件的扩展名必须是xxx.jsp吗？<br>   -  jsp文件的扩展名是可以配置的。不是固定的。<br>   -  在CATALINA_HOME&#x2F;conf&#x2F;web.xml，在这个文件当中配置jsp文件的扩展名。 </h2></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>     -  xxx.jsp文件对于小猫咪来说，只是一个普通的文本文件，web容器会将xxx.jsp文件最终生成java程序，最终调用的是java对象相关的方法，真正执行的时候，和jsp文件就没有关系了。      -  小窍门：JSP如果看不懂，建议把jsp翻译成java代码，就能看懂了。   -  同学问：包名bean是什么意思？      - javabean（java的logo是一杯冒着热气的咖啡。javabean被翻译为：咖啡豆）     - java是一杯咖啡，咖啡又是由一粒一粒的咖啡豆研磨而成。     - 整个java程序中有很多bean的存在。由很多bean组成。     - 什么是javabean？实际上javabean你可以理解为符合某种规范的java类，比如：         - 有无参数构造方法        - 属性私有化        - 对外提供公开的set和get方法        - 实现java.io.Serializable接口        - 重写toString        - 重写hashCode+equals        - ....     - javabean其实就是java中的实体类。负责数据的封装。     - 由于javabean符合javabean规范，具有更强的通用性。  -  完成剩下所有功能的改造。 </code></pre><ul><li>当前的oa应用存在的问题： <ul><li>任何一个用户都可以访问这个系统，都可以对这个系统当中的数据进行增删改这些危险的操作。我只想让合法的用户去使用这个系统，不合法的用户不能访问这个系统，怎么办？ <ul><li>加一个登录功能。登录成功的可以访问该系统，登录失败不能访问。</li></ul></li><li>实现登录功能： <ul><li>步骤1：数据库当中添加一个用户表：t_user <ul><li>t_user表当中存储的是用户的登录信息，最基本的也包括：登录的用户名和登录的密码。</li><li>密码一般在数据库表当中存储的是密文。一般不以明文的形式存储。（这里先使用明文方式。）</li><li>向t_user表中插入数据。</li></ul></li><li>步骤2：再实现一个登录页面。 <ul><li>登录页面上应该有一个登录的表单。有用户名和密码输入的框。</li><li>用户点击登录，提交表单，提交用户名和密码。form是post方式提交。</li></ul></li><li>步骤3：后台要有一个对应的Servlet来处理登录的请求。 <ul><li>登录成功：跳转到部门列表页面。</li><li>登录失败：跳转到失败的页面。</li></ul></li><li>步骤4：再提供一个登录失败的页面。</li></ul></li></ul></li><li>登录功能实现了，目前存在的最大的问题： <ul><li>这个登录功能目前只是一个摆设，没有任何作用。只要用户知道后端的请求路径，照样可以在不登录的情况下访问。</li><li>这个登录没有真正起到拦截的作用。怎么解决？</li></ul></li><li><h2 id="JSP的指令-指令的作用：指导JSP的翻译引擎如何工作（指导当前的JSP翻译引擎如何翻译JSP文件。）-指令包括哪些呢？-include指令：包含指令，在JSP中完成静态包含，很少用了。（这里不讲）-taglib指令：引入标签库的指令。这个到JJSTL标签库的时候再学习。现在先不管。-page指令：目前重点学习一个page指令。-指令的使用语法是什么？-关于page指令当中都有哪些常用的属性呢？"><a href="#JSP的指令-指令的作用：指导JSP的翻译引擎如何工作（指导当前的JSP翻译引擎如何翻译JSP文件。）-指令包括哪些呢？-include指令：包含指令，在JSP中完成静态包含，很少用了。（这里不讲）-taglib指令：引入标签库的指令。这个到JJSTL标签库的时候再学习。现在先不管。-page指令：目前重点学习一个page指令。-指令的使用语法是什么？-关于page指令当中都有哪些常用的属性呢？" class="headerlink" title="JSP的指令-  指令的作用：指导JSP的翻译引擎如何工作（指导当前的JSP翻译引擎如何翻译JSP文件。）-  指令包括哪些呢？   - include指令：包含指令，在JSP中完成静态包含，很少用了。（这里不讲）   - taglib指令：引入标签库的指令。这个到JJSTL标签库的时候再学习。现在先不管。   - page指令：目前重点学习一个page指令。-  指令的使用语法是什么？   - &lt;%@指令名  属性名&#x3D;属性值  属性名&#x3D;属性值  属性名&#x3D;属性值….%&gt;-  关于page指令当中都有哪些常用的属性呢？ "></a>JSP的指令<br>-  指令的作用：指导JSP的翻译引擎如何工作（指导当前的JSP翻译引擎如何翻译JSP文件。）<br>-  指令包括哪些呢？<br>   - include指令：包含指令，在JSP中完成静态包含，很少用了。（这里不讲）<br>   - taglib指令：引入标签库的指令。这个到JJSTL标签库的时候再学习。现在先不管。<br>   - page指令：目前重点学习一个page指令。<br>-  指令的使用语法是什么？<br>   - &lt;%@指令名  属性名&#x3D;属性值  属性名&#x3D;属性值  属性名&#x3D;属性值….%&gt;<br>-  关于page指令当中都有哪些常用的属性呢？ </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page session=&quot;true|false&quot; %&gt;</span><br><span class="line">true表示启用JSP的内置对象session，表示一定启动session对象。没有session对象会创建。</span><br><span class="line">如果没有设置，默认值就是session=&quot;true&quot;</span><br><span class="line">session=&quot;false&quot; 表示不启动内置对象session。当前JSP页面中无法使用内置对象session。</span><br></pre></td></tr></table></figure><pre><code>  -  </code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/json&quot; %&gt;</span><br><span class="line">contentType属性用来设置响应的内容类型</span><br><span class="line">但同时也可以设置字符集。</span><br><span class="line">&lt;%@page contentType=&quot;text/json;charset=UTF-8&quot; %&gt;</span><br></pre></td></tr></table></figure><pre><code>  -  </code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page pageEncoding=&quot;UTF-8&quot; %&gt;</span><br><span class="line">pageEncoding=&quot;UTF-8&quot; 表示设置响应时采用的字符集。</span><br></pre></td></tr></table></figure><pre><code>  -  </code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page import=&quot;java.util.List, java.util.Date, java.util.ArrayList&quot; %&gt;</span><br><span class="line">&lt;%@page import=&quot;java.util.*&quot; %&gt;</span><br><span class="line">import语句，导包。</span><br></pre></td></tr></table></figure><pre><code>  -  </code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page errorPage=&quot;/error.jsp&quot; %&gt;</span><br><span class="line">当前页面出现异常之后，跳转到error.jsp页面。</span><br><span class="line">errorPage属性用来指定出错之后的跳转位置。</span><br></pre></td></tr></table></figure><pre><code>  -  </code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page isErrorPage=&quot;true&quot; %&gt;</span><br><span class="line">表示启用JSP九大内置对象之一：exception</span><br><span class="line">默认值是false。</span><br></pre></td></tr></table></figure><ul><li>JSP的九大内置对象 <ul><li>jakarta.servlet.jsp.PageContext pageContext       页面作用域 </li><li>jakarta.servlet.http.HttpServletRequest request 请求作用域 </li><li>jakarta.servlet.http.HttpSession session  会话作用域 </li><li>jakarta.servlet.ServletContext application 应用作用域 <ul><li>pageContext &lt; request &lt; session &lt; application</li><li>以上四个作用域都有：setAttribute、getAttribute、removeAttribute方法。</li><li>以上作用域的使用原则：尽可能使用小的域。</li></ul></li><li>java.lang.Throwable exception </li><li>jakarta.servlet.ServletConfig config </li><li>java.lang.Object page  （其实是this，当前的servlet对象） </li><li>jakarta.servlet.jsp.JspWriter out  （负责输出） </li><li>jakarta.servlet.http.HttpServletResponse response （负责响应）</li></ul></li></ul><h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h1><ul><li>EL表达式是干什么用的？ <ul><li>Expression Language（表达式语言）</li><li>EL表达式可以代替JSP中的java代码，让JSP文件中的程序看起来更加整洁，美观。</li><li>JSP中夹杂着各种java代码，例如&lt;% java代码 %&gt;、&lt;%&#x3D;%&gt;等，导致JSP文件很混乱，不好看，不好维护。所以才有了后期的EL表达式。</li><li>EL表达式可以算是JSP语法的一部分。EL表达式归属于JSP。</li></ul></li><li>EL表达式出现在JSP中主要是： <ul><li>从某个作用域中取数据，然后将其转换成字符串，然后将其输出到浏览器。这就是EL表达式的功效。三大功效： <ul><li>第一功效：从某个域中取数据。 <ul><li>四个域： <ul><li>pageContext</li><li>request</li><li>session</li><li>application</li></ul></li></ul></li><li>第二功效：将取出的数据转成字符串。 <ul><li>如果是一个java对象，也会自动调用java对象的toString方法将其转换成字符串。</li></ul></li><li>第三功效：将字符串输出到浏览器。 <ul><li>和这个一样：&lt;%&#x3D; %&gt;，将其输出到浏览器。</li></ul></li></ul></li></ul></li><li>EL表达式很好用，基本的语法格式： <ul><li>${表达式}</li></ul></li><li><h2 id="EL表达式的使用："><a href="#EL表达式的使用：" class="headerlink" title="EL表达式的使用： "></a>EL表达式的使用： </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">// 创建User对象</span><br><span class="line">User user = new User();</span><br><span class="line">user.setUsername(&quot;jackson&quot;);</span><br><span class="line">user.setPassword(&quot;1234&quot;);</span><br><span class="line">user.setAge(50);</span><br><span class="line"></span><br><span class="line">// 将User对象存储到某个域当中。一定要存，因为EL表达式只能从某个范围中取数据。</span><br><span class="line">// 数据是必须存储到四大范围之一的。</span><br><span class="line">request.setAttribute(&quot;userObj&quot;, user);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--使用EL表达式取--%&gt;</span><br><span class="line">$&#123;这个位置写什么？？？？这里写的一定是存储到域对象当中时的name&#125;</span><br><span class="line">要这样写：</span><br><span class="line">$&#123;userObj&#125;</span><br><span class="line">等同于java代码：&lt;%=request.getAttribute(&quot;userObj&quot;)%&gt;</span><br><span class="line">你不要这样写：$&#123;&quot;userObj&quot;&#125;</span><br><span class="line"></span><br><span class="line">面试题：</span><br><span class="line">$&#123;abc&#125; 和 $&#123;&quot;abc&quot;&#125;的区别是什么？</span><br><span class="line">$&#123;abc&#125;表示从某个域中取出数据，并且被取的这个数据的name是&quot;abc&quot;，之前一定有这样的代码: 域.setAttribute(&quot;abc&quot;, 对象);</span><br><span class="line">$&#123;&quot;abc&quot;&#125; 表示直接将&quot;abc&quot;当做普通字符串输出到浏览器。不会从某个域中取数据了。</span><br><span class="line"></span><br><span class="line">$&#123;userObj&#125; 底层是怎么做的？从域中取数据，取出user对象，然后调用user对象的toString方法，转换成字符串，输出到浏览器。</span><br><span class="line"></span><br><span class="line">&lt;%--如果想输出对象的属性值，怎么办？--%&gt;</span><br><span class="line">$&#123;userObj.username&#125; 使用这个语法的前提是：User对象有getUsername()方法。</span><br><span class="line">$&#123;userObj.password&#125; 使用这个语法的前提是：User对象有getPassword()方法。</span><br><span class="line">$&#123;userObj.age&#125; 使用这个语法的前提是：User对象有getAge()方法。</span><br><span class="line">$&#123;userObj.email&#125; 使用这个语法的前提是：User对象有getEmail()方法。</span><br><span class="line">EL表达式中的. 这个语法，实际上调用了底层的getXxx()方法。</span><br><span class="line">注意：如果没有对应的get方法，则出现异常。报500错误。</span><br><span class="line"></span><br><span class="line">$&#123;userObj.addr222.zipcode&#125;</span><br><span class="line">以上EL表达式对应的java代码：</span><br><span class="line">user.getAddr222().getZipcode()</span><br></pre></td></tr></table></figure><ul><li>EL表达式优先从小范围中读取数据。 <ul><li>pageContext &lt; request &lt; session &lt; application</li></ul></li><li>EL表达式中有四个隐含的隐式的范围： <ul><li>pageScope 对应的是 pageContext范围。</li><li>requestScope 对应的是 request范围。</li><li>sessionScope 对应的是 session范围。</li><li>applicationScope 对应的是 application范围。</li></ul></li><li>EL表达式对null进行了预处理。如果是null，则向浏览器输出一个空字符串。 </li><li>EL表达式取数据的时候有两种形式： <ul><li>第一种：.  （大部分使用这种方式）</li><li>第二种：[ ] （如果存储到域的时候，这个name中含有特殊字符，可以使用 [ ]） <ul><li>request.setAttribute(“abc.def”, “zhangsan”);</li><li>${requestScope.abc.def} 这样是无法取值的。</li><li>应该这样：${requestScope[“abc.def”]}</li></ul></li></ul></li><li>掌握使用EL表达式，怎么从Map集合中取数据： <ul><li>${map.key}</li></ul></li><li>掌握使用EL表达式，怎么从数组和List集合中取数据： <ul><li>${数组[0]}</li><li>${数组[1]}</li><li>${list[0]}</li></ul></li><li><h2 id="page指令当中，有一个属性，可以忽略EL表达式"><a href="#page指令当中，有一个属性，可以忽略EL表达式" class="headerlink" title="page指令当中，有一个属性，可以忽略EL表达式 "></a>page指令当中，有一个属性，可以忽略EL表达式 </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page contentType=&quot;text/html;charset=UTF-8&quot; isELIgnored=&quot;true&quot; %&gt;</span><br><span class="line">isELIgnored=&quot;true&quot; 表示忽略EL表达式</span><br><span class="line">isELIgnored=&quot;false&quot; 表示不忽略EL表达式。（这是默认值）</span><br><span class="line"></span><br><span class="line">isELIgnored=&quot;true&quot; 这个是全局的控制。</span><br><span class="line"></span><br><span class="line">可以使用反斜杠进行局部控制：\$&#123;username&#125; 这样也可以忽略EL表达式。</span><br></pre></td></tr></table></figure><ul><li>通过EL表达式获取应用的根： <ul><li>${pageContext.request.contextPath}</li></ul></li><li>EL表达式中其他的隐式对象： <ul><li>pageContext</li><li>param</li><li>paramValues</li><li>initParam</li></ul></li><li>EL表达式的运算符 <ul><li>算术运算符 <ul><li>+、-、*、&#x2F;、%</li></ul></li><li>关系运算符</li></ul></li><li><input disabled="" type="checkbox"> &#x3D;&#x3D; eq !&#x3D; &gt; &gt;&#x3D; &lt; &lt;&#x3D;<br>- 逻辑运算符 </li><li><input disabled="" type="checkbox"> !  &amp;&amp; ||  not and or<br>- 条件运算符 </li><li><input disabled="" type="checkbox"> ? :<br>- 取值运算符 </li><li><input disabled="" type="checkbox"> 和.<br>- empty运算符 </li><li><input disabled="" type="checkbox"> empty运算符的结果是boolean类型</li><li><input disabled="" type="checkbox"> ${empty param.username}</li><li><input disabled="" type="checkbox"> ${not empty param.username}</li><li><input disabled="" type="checkbox"> ${!empty param.password}</li></ul><h1 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h1><ul><li>什么是JSTL标签库？ <ul><li>Java Standard Tag Lib（Java标准的标签库）</li><li>JSTL标签库通常结合EL表达式一起使用。目的是让JSP中的java代码消失。</li><li>标签是写在JSP当中的，但实际上最终还是要执行对应的java程序。（java程序在jar包当中。）</li></ul></li><li><h2 id="使用JSTL标签库的步骤：-第一步：引入JSTL标签库对应的jar包。-tomcat10之后引入的jar包是：-jakarta-servlet-jsp-jstl-2-0-0-jar-jakarta-servlet-jsp-jstl-api-2-0-0-jar-在IDEA当中怎么引入？-在WEB-INF下新建lib目录，然后将jar包拷贝到lib当中。然后将其“Add-Lib…”-一定是要和mysql的数据库驱动一样，都是放在WEB-INF-lib目录下的。-什么时候需要将jar包放到WEB-INF-lib目录下？如果这个jar是tomcat服务器没有的。-第二步：在JSP中引入要使用标签库。（使用taglib指令引入标签库。）-JSTL提供了很多种标签，你要引入哪个标签？？？？重点掌握核心标签库。"><a href="#使用JSTL标签库的步骤：-第一步：引入JSTL标签库对应的jar包。-tomcat10之后引入的jar包是：-jakarta-servlet-jsp-jstl-2-0-0-jar-jakarta-servlet-jsp-jstl-api-2-0-0-jar-在IDEA当中怎么引入？-在WEB-INF下新建lib目录，然后将jar包拷贝到lib当中。然后将其“Add-Lib…”-一定是要和mysql的数据库驱动一样，都是放在WEB-INF-lib目录下的。-什么时候需要将jar包放到WEB-INF-lib目录下？如果这个jar是tomcat服务器没有的。-第二步：在JSP中引入要使用标签库。（使用taglib指令引入标签库。）-JSTL提供了很多种标签，你要引入哪个标签？？？？重点掌握核心标签库。" class="headerlink" title="使用JSTL标签库的步骤：-  第一步：引入JSTL标签库对应的jar包。   - tomcat10之后引入的jar包是：     - jakarta.servlet.jsp.jstl-2.0.0.jar     - jakarta.servlet.jsp.jstl-api-2.0.0.jar   - 在IDEA当中怎么引入？     - 在WEB-INF下新建lib目录，然后将jar包拷贝到lib当中。然后将其“Add Lib…”     - 一定是要和mysql的数据库驱动一样，都是放在WEB-INF&#x2F;lib目录下的。     - 什么时候需要将jar包放到WEB-INF&#x2F;lib目录下？如果这个jar是tomcat服务器没有的。-  第二步：在JSP中引入要使用标签库。（使用taglib指令引入标签库。）   -  JSTL提供了很多种标签，你要引入哪个标签？？？？重点掌握核心标签库。 "></a>使用JSTL标签库的步骤：<br>-  第一步：引入JSTL标签库对应的jar包。<br>   - tomcat10之后引入的jar包是：<br>     - jakarta.servlet.jsp.jstl-2.0.0.jar<br>     - jakarta.servlet.jsp.jstl-api-2.0.0.jar<br>   - 在IDEA当中怎么引入？<br>     - 在WEB-INF下新建lib目录，然后将jar包拷贝到lib当中。然后将其“Add Lib…”<br>     - 一定是要和mysql的数据库驱动一样，都是放在WEB-INF&#x2F;lib目录下的。<br>     - 什么时候需要将jar包放到WEB-INF&#x2F;lib目录下？如果这个jar是tomcat服务器没有的。<br>-  第二步：在JSP中引入要使用标签库。（使用taglib指令引入标签库。）<br>   -  JSTL提供了很多种标签，你要引入哪个标签？？？？重点掌握核心标签库。 </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">这个就是核心标签库。</span><br><span class="line">prefix=&quot;这里随便起一个名字就行了，核心标签库，大家默认的叫做c，你随意。&quot;</span><br></pre></td></tr></table></figure><ul><li>第三步：在需要使用标签的位置使用即可。表面使用的是标签，底层实际上还是java程序。 </li><li><h2 id="JSTL标签的原理"><a href="#JSTL标签的原理" class="headerlink" title="JSTL标签的原理 "></a>JSTL标签的原理 </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">以上uri后面的路径实际上指向了一个xxx.tld文件。</span><br><span class="line">tld文件实际上是一个xml配置文件。</span><br><span class="line">在tld文件中描述了“标签”和“java类”之间的关系。</span><br><span class="line">以上核心标签库对应的tld文件是：c.tld文件。它在哪里。</span><br><span class="line">在jakarta.servlet.jsp.jstl-2.0.0.jar里面META-INF目录下，有一个c.tld文件。</span><br></pre></td></tr></table></figure><ul><li><h2 id="源码解析：配置文件tld解析"><a href="#源码解析：配置文件tld解析" class="headerlink" title="源码解析：配置文件tld解析 "></a>源码解析：配置文件tld解析 </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;tag&gt;</span><br><span class="line">    &lt;description&gt;对该标签的描述&lt;/description&gt;</span><br><span class="line">    &lt;name&gt;catch&lt;/name&gt; 标签的名字</span><br><span class="line">    &lt;tag-class&gt;org.apache.taglibs.standard.tag.common.core.CatchTag&lt;/tag-class&gt; 标签对应的java类。</span><br><span class="line">    &lt;body-content&gt;JSP&lt;/body-content&gt; 标签体当中可以出现的内容，如果是JSP，就表示标签体中可以出现符合JSP所有语法的代码。例如EL表达式。</span><br><span class="line">    &lt;attribute&gt;</span><br><span class="line">        &lt;description&gt;</span><br><span class="line">        对这个属性的描述</span><br><span class="line">        &lt;/description&gt;</span><br><span class="line">        &lt;name&gt;var&lt;/name&gt; 属性名</span><br><span class="line">        &lt;required&gt;false&lt;/required&gt; false表示该属性不是必须的。true表示该属性是必须的。</span><br><span class="line">        &lt;rtexprvalue&gt;false&lt;/rtexprvalue&gt; 这个描述说明了该属性是否支持EL表达式。false表示不支持。true表示支持EL表达式。</span><br><span class="line">    &lt;/attribute&gt;</span><br><span class="line">  &lt;/tag&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:catch var=&quot;&quot;&gt;</span><br><span class="line">JSP....</span><br><span class="line">&lt;/c:catch&gt;</span><br></pre></td></tr></table></figure><ul><li><h2 id="jstl中的核心标签库core当中有哪些常用的标签呢？-c-if-c-forEach-元素状态对象-count-i-c-choose-c-when-c-otherwise"><a href="#jstl中的核心标签库core当中有哪些常用的标签呢？-c-if-c-forEach-元素状态对象-count-i-c-choose-c-when-c-otherwise" class="headerlink" title="jstl中的核心标签库core当中有哪些常用的标签呢？-  c:if   - &lt;c:if test&#x3D;”boolean类型，支持EL表达式”&gt;&lt;&#x2F;c: if&gt;-  c:forEach   - &lt;c:forEach items&#x3D;”集合，支持EL表达式” var&#x3D;”集合中的元素” varStatus&#x3D;”元素状态对象”&gt; ${元素状态对象.count} &lt;&#x2F;c: forEach&gt;   - &lt;c:forEach var&#x3D;”i” begin&#x3D;”1” end&#x3D;”10” step&#x3D;”2”&gt; ${i} &lt;&#x2F;c: forEach&gt;-  c:choose c:when c:otherwise "></a>jstl中的核心标签库core当中有哪些常用的标签呢？<br>-  c:if<br>   - &lt;c:if test&#x3D;”boolean类型，支持EL表达式”&gt;&lt;&#x2F;c: if&gt;<br>-  c:forEach<br>   - &lt;c:forEach items&#x3D;”集合，支持EL表达式” var&#x3D;”集合中的元素” varStatus&#x3D;”元素状态对象”&gt; ${元素状态对象.count} &lt;&#x2F;c: forEach&gt;<br>   - &lt;c:forEach var&#x3D;”i” begin&#x3D;”1” end&#x3D;”10” step&#x3D;”2”&gt; ${i} &lt;&#x2F;c: forEach&gt;<br>-  c:choose c:when c:otherwise </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;param.age &lt; 18&#125;&quot;&gt;</span><br><span class="line">        青少年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;param.age &lt; 35&#125;&quot;&gt;</span><br><span class="line">        青年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;param.age &lt; 55&#125;&quot;&gt;</span><br><span class="line">        中年</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        老年</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><h2 id="改造OA"><a href="#改造OA" class="headerlink" title="改造OA"></a>改造OA</h2><ul><li>使用什么技术改造呢？ <ul><li>Servlet + JSP + EL表达式 + JSTL标签。进行改造。</li></ul></li><li><h2 id="在前端HTML代码中，有一个标签，叫做base标签，这个标签可以设置整个网页的基础路径。-这是Java的语法，也不是JSP的语法。是HTML中的一个语法。HTML中的一个标签。通常出现在head标签中。-base-href-”http-localhost-8080-oa-“-在当前页面中，凡是路径没有以“-”开始的，都会自动将base中的路径添加到这些路径之前。-a-href-”ab-def”-等同于：-a-href-”http-localhost-8080-oa-ab-def“-需要注意：在JS代码中的路径，保险起见，最好不要依赖base标签。JS代码中的路径最好写上全路径。"><a href="#在前端HTML代码中，有一个标签，叫做base标签，这个标签可以设置整个网页的基础路径。-这是Java的语法，也不是JSP的语法。是HTML中的一个语法。HTML中的一个标签。通常出现在head标签中。-base-href-”http-localhost-8080-oa-“-在当前页面中，凡是路径没有以“-”开始的，都会自动将base中的路径添加到这些路径之前。-a-href-”ab-def”-等同于：-a-href-”http-localhost-8080-oa-ab-def“-需要注意：在JS代码中的路径，保险起见，最好不要依赖base标签。JS代码中的路径最好写上全路径。" class="headerlink" title="在前端HTML代码中，有一个标签，叫做base标签，这个标签可以设置整个网页的基础路径。-  这是Java的语法，也不是JSP的语法。是HTML中的一个语法。HTML中的一个标签。通常出现在head标签中。-  &lt; base href&#x3D;”http://localhost:8080/oa/“&gt;-  在当前页面中，凡是路径没有以“&#x2F;”开始的，都会自动将base中的路径添加到这些路径之前。   - &lt; a href&#x3D;”ab&#x2F;def”&gt;&lt;&#x2F; a&gt;   - 等同于：&lt; a href&#x3D;”http://localhost:8080/oa/ab/def“&gt;&lt;&#x2F; a&gt;-  需要注意：在JS代码中的路径，保险起见，最好不要依赖base标签。JS代码中的路径最好写上全路径。 "></a>在前端HTML代码中，有一个标签，叫做base标签，这个标签可以设置整个网页的基础路径。<br>-  这是Java的语法，也不是JSP的语法。是HTML中的一个语法。HTML中的一个标签。通常出现在head标签中。<br>-  &lt; base href&#x3D;”<a href="http://localhost:8080/oa/">http://localhost:8080/oa/</a>“&gt;<br>-  在当前页面中，凡是路径没有以“&#x2F;”开始的，都会自动将base中的路径添加到这些路径之前。<br>   - &lt; a href&#x3D;”ab&#x2F;def”&gt;&lt;&#x2F; a&gt;<br>   - 等同于：&lt; a href&#x3D;”<a href="http://localhost:8080/oa/ab/def">http://localhost:8080/oa/ab/def</a>“&gt;&lt;&#x2F; a&gt;<br>-  需要注意：在JS代码中的路径，保险起见，最好不要依赖base标签。JS代码中的路径最好写上全路径。 </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;base href=&quot;$&#123;pageContext.request.scheme&#125;://$&#123;pageContext.request.serverName&#125;:$&#123;pageContext.request.serverPort&#125;$&#123;pageContext.request.contextPath&#125;/&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h1><ul><li>当前的OA项目存在什么缺陷？ <ul><li>DeptServlet、EmpServlet、OrderServlet。每一个Servlet都是处理自己相关的业务。在这些Servlet执行之前都是需要判断用户是否登录了。如果用户登录了，可以继续操作，如果没有登录，需要用户登录。这段判断用户是否登录的代码是固定的，并且在每一个Servlet类当中都需要编写，显然代码没有得到重复利用。包括每一个Servlet都要解决中文乱码问题，也有公共的代码。这些代码目前都是重复编写，并没有达到复用。怎么解决这个问题? <ul><li>可以使用Servlet规范中的Filter过滤器来解决这个问题。</li></ul></li></ul></li><li>Filter是什么，有什么用，执行原理是什么？ <ul><li>Filter是过滤器。</li><li>Filter可以在Servlet这个目标程序执行之前添加代码。也可以在目标Servlet执行之后添加代码。之前之后都可以添加过滤规则。</li><li>一般情况下，都是在过滤器当中编写公共代码。</li></ul></li><li><h2 id="一个过滤器怎么写呢？-第一步：编写一个Java类实现一个接口：jarkata-servlet-Filter。并且实现这个接口当中所有的方法。-init方法：在Filter对象第一次被创建之后调用，并且只调用一次。-doFilter方法：只要用户发送一次请求，则执行一次。发送N次请求，则执行N次。在这个方法中编写过滤规则。-destroy方法：在Filter对象被释放-销毁之前调用，并且只调用一次。-第二步：在web-xml文件中对Filter进行配置。这个配置和Servlet很像。"><a href="#一个过滤器怎么写呢？-第一步：编写一个Java类实现一个接口：jarkata-servlet-Filter。并且实现这个接口当中所有的方法。-init方法：在Filter对象第一次被创建之后调用，并且只调用一次。-doFilter方法：只要用户发送一次请求，则执行一次。发送N次请求，则执行N次。在这个方法中编写过滤规则。-destroy方法：在Filter对象被释放-销毁之前调用，并且只调用一次。-第二步：在web-xml文件中对Filter进行配置。这个配置和Servlet很像。" class="headerlink" title="一个过滤器怎么写呢？-  第一步：编写一个Java类实现一个接口：jarkata.servlet.Filter。并且实现这个接口当中所有的方法。   - init方法：在Filter对象第一次被创建之后调用，并且只调用一次。   - doFilter方法：只要用户发送一次请求，则执行一次。发送N次请求，则执行N次。在这个方法中编写过滤规则。   - destroy方法：在Filter对象被释放&#x2F;销毁之前调用，并且只调用一次。-  第二步：在web.xml文件中对Filter进行配置。这个配置和Servlet很像。 "></a>一个过滤器怎么写呢？<br>-  第一步：编写一个Java类实现一个接口：jarkata.servlet.Filter。并且实现这个接口当中所有的方法。<br>   - init方法：在Filter对象第一次被创建之后调用，并且只调用一次。<br>   - doFilter方法：只要用户发送一次请求，则执行一次。发送N次请求，则执行N次。在这个方法中编写过滤规则。<br>   - destroy方法：在Filter对象被释放&#x2F;销毁之前调用，并且只调用一次。<br>-  第二步：在web.xml文件中对Filter进行配置。这个配置和Servlet很像。 </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;filter2&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;com.bjpowernode.javaweb.servlet.Filter2&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;filter2&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><pre><code>  -  或者使用注解：@WebFilter(&#123;&quot;*.do&quot;&#125;) </code></pre><ul><li>注意： <ul><li>Servlet对象默认情况下，在服务器启动的时候是不会新建对象的。</li><li>Filter对象默认情况下，在服务器启动的时候会新建对象。</li><li>Servlet是单例的。Filter也是单例的。（单实例。）</li></ul></li><li>目标Servlet是否执行，取决于两个条件： <ul><li>第一：在过滤器当中是否编写了：chain.doFilter(request, response); 代码。</li><li>第二：用户发送的请求路径是否和Servlet的请求路径一致。</li></ul></li><li>chain.doFilter(request, response); 这行代码的作用： <ul><li>执行下一个过滤器，如果下面没有过滤器了，执行最终的Servlet。</li></ul></li><li>注意：Filter的优先级，天生的就比Servlet优先级高。 <ul><li>&#x2F;a.do 对应一个Filter，也对应一个Servlet。那么一定是先执行Filter，然后再执行Servlet。</li></ul></li><li>关于Filter的配置路径： <ul><li>&#x2F;a.do、&#x2F;b.do、&#x2F;dept&#x2F;save。这些配置方式都是精确匹配。</li><li>&#x2F;* 匹配所有路径。</li><li>*.do 后缀匹配。不要以 &#x2F; 开始</li><li>&#x2F;dept&#x2F;*  前缀匹配。</li></ul></li><li>在web.xml文件中进行配置的时候，Filter的执行顺序是什么？ <ul><li>依靠filter-mapping标签的配置位置，越靠上优先级越高。</li></ul></li><li>过滤器的调用顺序，遵循栈数据结构。 </li><li>使用@WebFilter的时候，Filter的执行顺序是怎样的呢？ <ul><li>执行顺序是：比较Filter这个类名。</li><li>比如：FilterA和FilterB，则先执行FilterA。</li><li>比如：Filter1和Filter2，则先执行Filter1.</li></ul></li><li>Filter的生命周期？ <ul><li>和Servlet对象生命周期一致。</li><li>唯一的区别：Filter默认情况下，在服务器启动阶段就实例化。Servlet不会。</li></ul></li><li>Filter过滤器这里有一个设计模式： <ul><li>责任链设计模式。</li><li>过滤器最大的优点： <ul><li>在程序编译阶段不会确定调用顺序。因为Filter的调用顺序是配置到web.xml文件中的，只要修改web.xml配置文件中filter-mapping的顺序就可以调整Filter的执行顺序。显然Filter的执行顺序是在程序运行阶段动态组合的。那么这种设计模式被称为责任链设计模式。</li></ul></li><li>责任链设计模式最大的核心思想： <ul><li>在程序运行阶段，动态的组合程序的调用顺序。</li></ul></li></ul></li><li>使用过滤器改造OA项目。</li></ul><h1 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h1><ul><li>什么是监听器？ <ul><li>监听器是Servlet规范中的一员。就像Filter一样。Filter也是Servlet规范中的一员。</li><li>在Servlet中，所有的监听器接口都是以“Listener”结尾。</li></ul></li><li>监听器有什么用？ <ul><li>监听器实际上是Servlet规范留给我们javaweb程序员的特殊时机。</li><li>特殊的时刻如果想执行这段代码，你需要想到使用对应的监听器。</li></ul></li><li>Servlet规范中提供了哪些监听器？ <ul><li>jakarta.servlet包下： <ul><li>ServletContextListener</li><li>ServletContextAttributeListener</li><li>ServletRequestListener</li><li>ServletRequestAttributeListener</li></ul></li><li>jakarta.servlet.http包下： <ul><li>HttpSessionListener</li><li>HttpSessionAttributeListener <ul><li>该监听器需要使用@WebListener注解进行标注。</li><li>该监听器监听的是什么？是session域中数据的变化。只要数据变化，则执行相应的方法。主要监测点在session域对象上。</li></ul></li><li>HttpSessionBindingListener <ul><li>该监听器不需要使用@WebListener进行标注。</li><li>假设User类实现了该监听器，那么User对象在被放入session的时候触发bind事件，User对象从session中删除的时候，触发unbind事件。</li><li>假设Customer类没有实现该监听器，那么Customer对象放入session或者从session删除的时候，不会触发bind和unbind事件。</li></ul></li><li>HttpSessionIdListener <ul><li>session的id发生改变的时候，监听器中的唯一一个方法就会被调用。</li></ul></li><li>HttpSessionActivationListener <ul><li>监听session对象的钝化和活化的。</li><li>钝化：session对象从内存存储到硬盘文件。</li><li>活化：从硬盘文件把session恢复到内存。</li></ul></li></ul></li></ul></li><li><h2 id="实现一个监听器的步骤：以ServletContextListener为例。-第一步：编写一个类实现ServletContextListener接口。并且实现里面的方法。"><a href="#实现一个监听器的步骤：以ServletContextListener为例。-第一步：编写一个类实现ServletContextListener接口。并且实现里面的方法。" class="headerlink" title="实现一个监听器的步骤：以ServletContextListener为例。-  第一步：编写一个类实现ServletContextListener接口。并且实现里面的方法。 "></a>实现一个监听器的步骤：以ServletContextListener为例。<br>-  第一步：编写一个类实现ServletContextListener接口。并且实现里面的方法。 </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void contextInitialized(ServletContextEvent event)</span><br><span class="line">void contextDestroyed(ServletContextEvent event)</span><br></pre></td></tr></table></figure><ul><li><h2 id="第二步：在web-xml文件中对ServletContextListener进行配置，如下："><a href="#第二步：在web-xml文件中对ServletContextListener进行配置，如下：" class="headerlink" title="第二步：在web.xml文件中对ServletContextListener进行配置，如下： "></a>第二步：在web.xml文件中对ServletContextListener进行配置，如下： </h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">    &lt;listener-class&gt;com.bjpowernode.javaweb.listener.MyServletContextListener&lt;/listener-class&gt;</span><br><span class="line">&lt;/listener&gt;</span><br></pre></td></tr></table></figure><pre><code>  -  当然，第二步也可以不使用配置文件，也可以用注解，例如：[@WebListener ](/WebListener )  </code></pre><ul><li>注意：所有监听器中的方法都是不需要javaweb程序员调用的，由服务器来负责调用？什么时候被调用呢？ <ul><li>当某个特殊的事件发生（特殊的事件发生其实就是某个时机到了。）之后，被web服务器自动调用。</li></ul></li><li>思考一个业务场景： <ul><li>请编写一个功能，记录该网站实时的在线用户的个数。</li><li>我们可以通过服务器端有没有分配session对象，因为一个session代表了一个用户。有一个session就代表有一个用户。如果你采用这种逻辑去实现的话，session有多少个，在线用户就有多少个。这种方式的话：HttpSessionListener够用了。session对象只要新建，则count++，然后将count存储到ServletContext域当中，在页面展示在线人数即可。</li><li>业务发生改变了，只统计登录的用户的在线数量，这个该怎么办？ <ul><li>session.setAttribute(“user”, userObj);</li><li>用户登录的标志是什么？session中曾经存储过User类型的对象。那么这个时候可以让User类型的对象实现HttpSessionBindingListener监听器，只要User类型对象存储到session域中，则count++，然后将count++存储到ServletContext对象中。页面展示在线人数即可。</li></ul></li></ul></li><li>实现oa项目中当前登录在线的人数。 <ul><li>什么代表着用户登录了？ <ul><li>session.setAttribute(“user”, userObj); User类型的对象只要往session中存储过，表示有新用户登录。</li></ul></li><li>什么代表着用户退出了？ <ul><li>session.removeAttribute(“user”); User类型的对象从session域中移除了。</li><li>或者有可能是session销毁了。（session超时）</li></ul></li></ul></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2 学习笔记</title>
      <link href="/2023/07/10/Vue2%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/10/Vue2%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Vue核心"><a href="#1-Vue核心" class="headerlink" title="1 Vue核心"></a>1 Vue核心</h2><h3 id="1-1-Vue简介"><a href="#1-1-Vue简介" class="headerlink" title="1.1 Vue简介"></a>1.1 Vue简介</h3><h4 id="1-1-1-官网"><a href="#1-1-1-官网" class="headerlink" title="1.1.1 官网"></a>1.1.1 官网</h4><ul><li>英文官网：<a href="https://vuejs.org/">https://vuejs.org/</a></li><li>中文官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></li></ul><h4 id="1-1-2-简介"><a href="#1-1-2-简介" class="headerlink" title="1.1.2 简介"></a>1.1.2 简介</h4><ul><li>动态构建用户界面的渐进式<code>JavaScript</code>框架</li></ul><h4 id="1-1-3-Vue特点"><a href="#1-1-3-Vue特点" class="headerlink" title="1.1.3 Vue特点"></a>1.1.3 Vue特点</h4><ol><li>采用<strong>组件化</strong>模式，提高代码复用率、且让代码更好维护<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%89%B9%E7%82%B9.png#id=ez83U&originHeight=538&originWidth=1086&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="> </li><li><strong>声明式</strong>编码，让编码人员无需直接操作DOM，提高开发效率<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/Vue%E5%A3%B0%E6%98%8E%E5%BC%8F%E7%BC%96%E7%A0%81%E7%89%B9%E7%82%B9.png#id=JEVc6&originHeight=242&originWidth=579&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="> </li><li>使用<strong>虚拟DOM</strong>+优秀的<strong>Diff算法</strong>,京可能复用节点<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/Vue%E8%99%9A%E6%8B%9FDom.png#id=vsaxi&originHeight=783&originWidth=1502&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li></ol><h3 id="1-2-初始Vue"><a href="#1-2-初始Vue" class="headerlink" title="1.2 初始Vue"></a>1.2 初始Vue</h3><h4 id="1-2-1-小结"><a href="#1-2-1-小结" class="headerlink" title="1.2.1 小结"></a>1.2.1 小结</h4><ul><li>使用<code>Vue</code> <ul><li>创建<code>Vue</code>实例，传入配置对象</li><li>容器内代码符合<code>html</code>规范</li><li>容器内代码称之为【Vue模板】</li></ul></li><li>注意事项 <ul><li>Vue实例和容器一一对应</li><li>开发中Vue和组件配合使用</li><li><code>&#123;&#123;XXX&#125;&#125;</code>中<code>XXX</code>写的是<strong>Js表达式</strong>，且<code>XXX</code>可以自动读取到<code>data</code>中的所有属性</li><li><code>data</code>中的数据发生改变，页面中使用该数据的地方会自动更新</li></ul></li></ul><blockquote><p><strong>区分Js代码 &amp;&amp; Js表达式</strong></p></blockquote><blockquote><ol><li>Js表达式：</li><li>一个表达式会产生一个值，可以放在任何一个需要值的地方</li><li>示例 <ol><li>a</li><li>a + b</li><li>demo(a)</li><li>x &#x3D;&#x3D;&#x3D; y ?  ‘a’  :  ‘b’</li></ol></li></ol></blockquote><blockquote><ol start="4"><li>Js代码（语句）</li><li>if(){}</li><li>for(){}</li></ol></blockquote><h4 id="1-2-2-代码实例"><a href="#1-2-2-代码实例" class="headerlink" title="1.2.2 代码实例"></a>1.2.2 代码实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>初始Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器准备 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello: &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>age: &#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//创建Vue实例 =&gt; 传入配置对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//el =&gt; 指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//data =&gt; 存储数据，数据供el所指定的容器使用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;Vue&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">19</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-模板语法"><a href="#1-3-模板语法" class="headerlink" title="1.3 模板语法"></a>1.3 模板语法</h3><h4 id="1-3-1-分类"><a href="#1-3-1-分类" class="headerlink" title="1.3.1 分类"></a>1.3.1 分类</h4><ol><li>插值语法 <ol><li>功能：用于解析<strong>标签体</strong>内容</li><li>写法：<code>&#123;&#123;XXX&#125;&#125;</code>,<code>XXX</code>写的是<strong>Js表达式</strong>，且<code>XXX</code>可以自动读取到<code>data</code>中的所有属性</li></ol></li><li>指令语法 <ol><li>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件） </li><li>举例</li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--等价于--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">xxx写js表达式，且可以读取data中的所有属性</span></span><br><span class="line"><span class="comment">Vue将xxx当成js表达式执行</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>代码实例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模板语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器准备 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 标签体内 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 标签属性 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;school.url.toUpperCase()&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习啦1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;school.url&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习啦2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&quot;Jack&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">school</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;bilibili&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;https://www.bilibili.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-数据绑定"><a href="#1-4-数据绑定" class="headerlink" title="1.4 数据绑定"></a>1.4 数据绑定</h3><ol><li>分类 <ol><li>单向绑定（v-bind）:数据只能从data流向页面</li><li>双向绑定（v-model):数据不仅能从data流向页面，还可以从页面流向data。</li></ol></li><li>注意事项 <ol><li>双向绑定一般都应用在表单类元素上（如：input、select等）</li><li>v-model:value可以简写为v-model,因为v-model默认收集的就是value值。</li></ol></li><li>代码实例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器准备 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 普通写法 --&gt;</span></span><br><span class="line">        单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-model只能应用在表单类元素上（输入类元素上） --&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">        单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&quot;Jack&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>el 和 data的两种写法</p></blockquote><ol><li>el的两种写法 <ol><li><code>new Vue()</code>的时候配置el属性</li><li>先创建Vue实例，随后通过<code>vm.$mount(’挂载的容器‘)</code>指定el的值</li></ol></li><li>data的两种写法 <ol><li>对象式</li><li>函数式（写成<strong>普通函数</strong> &#x3D;&gt; this对象是当前的Vue实例）</li></ol></li><li>代码实例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器准备 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// el的两种写法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* const v = new Vue(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        //更换写法使用Vue自身的属性$mount()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        // 写法一：el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    //   el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      data:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        name:&#x27;Jack&#x27;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    // 写法二：$mount()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    // $mount()写法更灵活</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    v.$mount(&quot;#root&quot;) */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//data的两种写法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   第一种写法：对象式写法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   data:&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     name:&#x27;jack&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第二种写法：函数式写法(写成普通函数)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// data:function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;Jack&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>小插曲（tip)</p><ul><li>VsCode自定义代码片段 </li><li>步骤：左下角设置 &#x3D;&gt; 配置用户代码片段 &#x3D;&gt; 创建代码片段 &#x3D;&gt; 根据提供的注释创建代码片段 </li><li>示例</li></ul></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">// Place your VueBasic 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and </span></span><br><span class="line"><span class="comment">// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope </span></span><br><span class="line"><span class="comment">// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is </span></span><br><span class="line"><span class="comment">// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: </span></span><br><span class="line"><span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. </span></span><br><span class="line"><span class="comment">// Placeholders with the same ids are connected.</span></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="comment">// &quot;Print to console&quot;: &#123;</span></span><br><span class="line"><span class="comment">// &quot;scope&quot;: &quot;javascript,typescript&quot;,</span></span><br><span class="line"><span class="comment">// &quot;prefix&quot;: &quot;log&quot;,</span></span><br><span class="line"><span class="comment">// &quot;body&quot;: [</span></span><br><span class="line"><span class="comment">// &quot;console.log(&#x27;$1&#x27;);&quot;,</span></span><br><span class="line"><span class="comment">// &quot;$2&quot;</span></span><br><span class="line"><span class="comment">// ],</span></span><br><span class="line"><span class="comment">// &quot;description&quot;: &quot;Log output to console&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">                                                         </span><br><span class="line"><span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;javascript,typescript&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;new Vue(&#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;  el:&#x27;#root&#x27;,&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;  data:&#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;    name:&#x27;$0&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;  &#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;)&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote></blockquote><hr><h3 id="1-5-MVVM模型"><a href="#1-5-MVVM模型" class="headerlink" title="1.5 MVVM模型"></a>1.5 MVVM模型</h3><ol><li>MVVM模型解释 <ol><li>M: 模型（Model）&#x3D;&gt; data中的数据</li><li>V: 视图（View) &#x3D;&gt; 模板</li><li>VM: 视图模型（ViewModel) &#x3D;&gt; Vue实例对象</li></ol></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/MVVM%E6%A8%A1%E5%9E%8B.png#id=P8LB8&originHeight=319&originWidth=597&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ol start="2"><li>注意事项 <ol><li>data中的所有属性，最后都出现在vm上</li><li>vm上的所有属性及Vue原型上的所有属性，在Vue模板中都可以直接使用</li></ol></li></ol><h3 id="1-6-数据代理"><a href="#1-6-数据代理" class="headerlink" title="1.6 数据代理"></a>1.6 数据代理</h3><ol><li>理解：通过一个对象代理对拎一个对象中的属性的操作（读&#x2F;写） </li><li>原理解析图<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/Vue%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86.png#id=PNI03&originHeight=790&originWidth=1413&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="> </li><li>Vm中的数据代理 <ol><li>通过vm对象来代理data对象中属性的操作（读&#x2F;写）</li></ol></li><li>Vue中数据代理的好处 <ol><li>更加方便的操作data中的数据</li></ol></li><li>基本原理 <ol><li>通过<code>Object.definePorperty()</code>把data对象中所有属性添加到vm上</li><li>为每一个添加到vm上的属性指定一个<code>getter/setter</code></li><li>在<code>getter/setter</code>内部去操作（读&#x2F;写）data中对应的属性</li></ol></li></ol><h3 id="1-7-事件处理"><a href="#1-7-事件处理" class="headerlink" title="1.7 事件处理"></a>1.7 事件处理</h3><h4 id="1-7-1-事件的基本使用"><a href="#1-7-1-事件的基本使用" class="headerlink" title="1.7.1 事件的基本使用"></a>1.7.1 事件的基本使用</h4><ol><li>使用<code>v-on:XXX</code> 或者<code>@XXX</code>绑定事件，其中<code>XXX</code>是事件名 </li><li>事件的回调需要配置在<strong>methods</strong>对象中，最终会在<strong>vm</strong>上 </li><li>methods中配置的函数，使用普通函数，若使用箭头函数 &#x3D;&gt; this 不再是vm </li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象 </li><li><code>@click=&quot;demo&quot;</code>和<code>@click=&quot;demo($event)&quot;</code>效果一致，但是后者可以传参 </li><li>代码示例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息(不传参)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2(666,$event)&quot;</span>&gt;</span>点我提示信息(传参)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;hhu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo1</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">//此处普通函数的this是vm</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;Hello Student!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo2</span>(<span class="params">number,event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(number)</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;Hello Student!!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-7-2-事件修饰符"><a href="#1-7-2-事件修饰符" class="headerlink" title="1.7.2 事件修饰符"></a>1.7.2 事件修饰符</h4><ol><li><code>prevent</code>: 阻止默认事件 </li><li><code>stop</code>: 阻止事件冒泡 </li><li><code>once</code>: 事件只触发一次 </li><li><code>capture</code>: 使用事件的捕获模式 </li><li><code>self</code>: 只有<code>event.target</code>是当前操作元素时才触发事件 </li><li><code>passive</code>: 事件的默认行为立即执行，无需等待事件回调执行完毕 </li><li>代码示例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">*&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: peru;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1.prevent：阻止默认事件（常用）；</span></span><br><span class="line"><span class="comment">2.stop：阻止事件冒泡（常用）；</span></span><br><span class="line"><span class="comment">3.once：事件只触发一次（常用）；</span></span><br><span class="line"><span class="comment">4.capture：使用事件的捕获模式；</span></span><br><span class="line"><span class="comment">5.self：只有event.target是当前操作的元素时才触发事件；</span></span><br><span class="line"><span class="comment">6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认事件（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止事件冒泡（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以连续写 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;a href=&quot;http://www.bilibili.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件只触发一次（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用事件的捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;showMsg(1)&quot;</span>&gt;</span></span><br><span class="line">div1</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showMsg(2)&quot;</span>&gt;</span></span><br><span class="line">div2</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> @<span class="attr">wheel.passive</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;hhu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;Hello Student！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(e.target)</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showMsg</span>(<span class="params">msg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;#&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;累坏了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-7-3-键盘事件"><a href="#1-7-3-键盘事件" class="headerlink" title="1.7.3 键盘事件"></a>1.7.3 键盘事件</h4><ol><li>Vue中常用的案件别名 <ol><li>回车 &#x3D;&gt; <code>enter</code></li><li>删除 &#x3D;&gt; <code>delete</code>(捕获“删除”和“退格”键)</li><li>退出 &#x3D;&gt; <code>esc</code></li><li>空格 &#x3D;&gt; <code>space</code></li><li>换行 &#x3D;&gt; <code>tab</code>(特殊，必须配合keydown去使用)</li><li>上 &#x3D;&gt; <code>up</code></li><li>下 &#x3D;&gt; <code>down</code></li><li>左 &#x3D;&gt; <code>left</code></li><li>右 &#x3D;&gt; <code>right</code></li></ol></li><li>Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名） </li><li>系统修饰键（用法特殊）：<code>ctrl</code>、<code>alt</code>、<code>shift</code>、<code>meta</code> <ol><li>配合<code>keyup</code>使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发</li><li>配合<code>keydown</code>使用：正常触发事件</li></ol></li><li>可以使用keyCode去指定具体的按键（不推荐） </li><li><code>Vue.config.keyCodes.自定义键名 = 键码</code>  &#x3D;&gt; 定制按键别名 </li><li>代码示例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>键盘事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keydown.huiche</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">huiche</span> = <span class="number">13</span> <span class="comment">//定义一个别名按键</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;hhu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(e.key,e.keyCode)</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>修饰符可以连续写 </li><li>系统修饰符后可以接其他按键 &#x3D;&gt; 按下特定案件才能触发事件</li></ul></blockquote><h3 id="1-8-计算属性与监视"><a href="#1-8-计算属性与监视" class="headerlink" title="1.8 计算属性与监视"></a>1.8 计算属性与监视</h3><h4 id="1-8-1-计算属性-computed"><a href="#1-8-1-计算属性-computed" class="headerlink" title="1.8.1 计算属性-computed"></a>1.8.1 计算属性-computed</h4><blockquote><p>姓名案例实现</p></blockquote><ol><li>插值语法实现</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>姓名案例（插值语法实现）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">last name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">first name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">whole name: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; lastName.slice(0,3) &#125;&#125;-&#123;&#123; firstName &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lastName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">firstName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>methods实现</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>姓名案例（methods实现）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">last name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">first name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">whole name: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; fullName() &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lastName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">firstName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fullName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">lastName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">firstName</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>计算属性实现</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>姓名案例（计算属性实现）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">last name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">first name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">whole name: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lastName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">firstName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fullName</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//get作用：当读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//get调用时机：</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//1、初次读取fullName时</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//2、所依赖的数据发生变化时</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">lastName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">firstName</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//set调用时机： fullName被修改时</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                        lastName = arr[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">                        firstName = arr[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>计算属性简写(<strong>只考虑读取计算属性时</strong>)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">lastName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line"><span class="attr">firstName</span>:<span class="string">&#x27;三&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">            <span class="attr">computed</span>: &#123;</span><br><span class="line">                <span class="comment">//完整写法</span></span><br><span class="line">                <span class="comment">/* fullName:&#123;</span></span><br><span class="line"><span class="comment">                    get()&#123;</span></span><br><span class="line"><span class="comment">                        return this.lastName + &#x27;-&#x27; + this.firstName</span></span><br><span class="line"><span class="comment">                    &#125;,</span></span><br><span class="line"><span class="comment">                    set(value) &#123;</span></span><br><span class="line"><span class="comment">                        const arr = value.split(&#x27;-&#x27;)</span></span><br><span class="line"><span class="comment">                        lastName = arr[0]</span></span><br><span class="line"><span class="comment">                        firstName = arr[1]</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125; */</span></span><br><span class="line">                <span class="comment">//简写形式</span></span><br><span class="line">                <span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">lastName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">firstName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>计算属性</p></blockquote><ol><li>定义：要用的属性不存在，要通过<strong>已有属性</strong>计算得来</li><li>原理：底层借助了<code>Object.defineProperty()</code> 方法提供的<code>getter</code>和<code>setter</code></li><li><code>get()</code>函数执行时机 <ol><li>初次读取数据时</li><li>当依赖的数据发生改变时会被再次调用</li></ol></li><li>优势：与<code>methods</code>实现相比，内部有缓存机制（复用），效率更高，调试方便</li><li>注意事项 <ol><li>计算属性最终会出现在vm上，<strong>直接读取</strong>即可</li><li>如果计算属性要被修改，必须要写<code>set()</code>函数去响应修改，并且<code>set()</code>中要引起计算时所依赖的数据发生改变</li></ol></li></ol><h4 id="1-8-2-监视属性-watch"><a href="#1-8-2-监视属性-watch" class="headerlink" title="1.8.2 监视属性-watch"></a>1.8.2 监视属性-watch</h4><blockquote><p>天气案例</p></blockquote><ol><li>天气案例（methods实现）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>天气案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>点击切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">isHot</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">info</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;寒冷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>天气案例（监视属性）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>天气案例(监视属性)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>点击切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>; <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isHot</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&quot;炎热&quot;</span> : <span class="string">&quot;寒冷&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   watch: &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     isHot: &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//       immediate: true, //初始化时让handler调用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//       handler(newValue, oldValue) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         console.log(&quot;isHot被修改了&quot;, newValue, oldValue);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//       &#125;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;,</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    vm.$watch(<span class="string">&quot;isHot&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;isHot被修改了&quot;</span>, newValue, oldValue);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>监视属性watch</p></blockquote><ol><li>当被监视的属性变化时，回调函数自动调用，进行相关操作 </li><li>监事的属性必须存在，才能进行监视 </li><li>监视的两种写法 <ol><li><code>new Vue</code>时传入<code>watch</code>配置</li><li>通过<code>vm.$watch()</code> 监视</li></ol></li><li>深度监视 <ol><li>Vue中的watch默认不监测对象内部值的改变</li><li>配置<code>deep:true</code>可以监测对象内部值的改变</li></ol></li><li>简写形式（<strong>只有handler()函数时</strong>）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>天气案例(监视简写)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>点击切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>; <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&quot;炎热&quot;</span> : <span class="string">&quot;寒冷&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//正常写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* isHot: &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          immediate: true, //初始化时让handler调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          deep:true,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          handler(newValue, oldValue) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            console.log(&quot;isHot被修改了&quot;, newValue, oldValue);</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;, */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//简写</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">isHot</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;isHot被修改了&quot;</span>, newValue, oldValue);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//正常写法</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* vm.$watch(&#x27;isHot&#x27;,&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">immediate:true, //初始化时让handler调用一下</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">deep:true,//深度监视</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">handler(newValue,oldValue)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;) */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//简写</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* vm.$watch(&#x27;isHot&#x27;,(newValue,oldValue)=&gt;&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;) */</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li><code>**computed**</code><strong>和</strong><code>**watch**</code><strong>的区别</strong> <ol><li><code>computed</code>能完成的功能，<code>watch</code>也可以完成</li><li><code>watch</code>能完成的功能，<code>computed</code>不一定能完成。例如：<code>watch</code>可以进行异步操作</li></ol></li><li><strong>两个重要的小原则</strong> <ol><li>所有被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或者 组件实例对象</li><li>所有不被Vue所管理的函数（定时器的回调函数、Ajax的回调函数、Promise的回调函数等）最好写成箭头函数，这样this的指向才是vm 或者 组件实例对象</li></ol></li></ol><h3 id="1-9-绑定样式"><a href="#1-9-绑定样式" class="headerlink" title="1.9 绑定样式"></a>1.9 绑定样式</h3><ol><li><code>class</code>样式 <ol><li>写法<code>:class=&quot;xxx&quot;</code>,xxx可以是字符串、对象、数组 <ol><li>字符串写法适用于：类名不确定，需要动态获取</li><li>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定</li><li>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用</li></ol></li></ol></li><li><code>style</code>样式 <ol><li><code>:style=&quot;&#123;fontSize:xxx&#125;&quot;</code>，其中xxx是动态值</li><li><code>:style=[a,b]</code>，其中a、b都是样式对象</li></ol></li><li>代码示例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>绑定样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.basic</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.happy</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">4px</span> solid red;;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.644</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">30deg</span>,yellow,pink,orange,yellow);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.sad</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">4px</span> dashed <span class="built_in">rgb</span>(<span class="number">2</span>, <span class="number">197</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.normal</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.atguigu1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.atguigu2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">10px</span> red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.atguigu3</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">绑定样式：</span></span><br><span class="line"><span class="comment">1. class样式</span></span><br><span class="line"><span class="comment">写法:class=&quot;xxx&quot; xxx可以是字符串、对象、数组。</span></span><br><span class="line"><span class="comment">字符串写法适用于：类名不确定，要动态获取。</span></span><br><span class="line"><span class="comment">对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</span></span><br><span class="line"><span class="comment">数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</span></span><br><span class="line"><span class="comment">2. style样式</span></span><br><span class="line"><span class="comment">:style=&quot;&#123;fontSize: xxx&#125;&quot;其中xxx是动态值。</span></span><br><span class="line"><span class="comment">:style=&quot;[a,b]&quot;其中a、b是样式对象。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">mood</span>:<span class="string">&#x27;normal&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">classArr</span>:[<span class="string">&#x27;atguigu1&#x27;</span>,<span class="string">&#x27;atguigu2&#x27;</span>,<span class="string">&#x27;atguigu3&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">classObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">atguigu1</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">atguigu2</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleObj2</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">backgroundColor</span>:<span class="string">&#x27;orange&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleArr</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">backgroundColor</span>:<span class="string">&#x27;gray&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changeMood</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> arr = [<span class="string">&#x27;happy&#x27;</span>,<span class="string">&#x27;sad&#x27;</span>,<span class="string">&#x27;normal&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">mood</span> = arr[index]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-10-条件渲染"><a href="#1-10-条件渲染" class="headerlink" title="1.10 条件渲染"></a>1.10 条件渲染</h3><ol><li><code>v-if</code> <ol><li>写法： <ol><li><code>v-if=&quot;表达式&quot;</code></li><li><code>v-else-if=&quot;表达式&quot;</code></li><li><code>v-else=&quot;表达式&quot;</code></li></ol></li><li>使用场景：切换频率较低的场景</li><li>特点：不展示的DOM元素直接被移除</li><li>注意事项 <ol><li><code>v-if</code>可以和<code>v-else-if</code>、<code>v-else</code>一起使用，但要求结构不能被“打断”</li></ol></li></ol></li><li><code>v-show</code> <ol><li>写法：<code>v-show=&quot;表达式&quot;</code></li><li>使用场景：切换频率较高的场景</li><li>特点：不展示的DOM元素未被移除，仅仅使用样式隐藏掉</li></ol></li><li>注意事项 <ol><li>使用<code>v-if</code>的时候，元素可能无法获取到，而使用<code>v-show</code>一定可以获取到</li></ol></li><li>代码案例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">条件渲染：</span></span><br><span class="line"><span class="comment">1.v-if</span></span><br><span class="line"><span class="comment">写法：</span></span><br><span class="line"><span class="comment">(1).v-if=&quot;表达式&quot; </span></span><br><span class="line"><span class="comment">(2).v-else-if=&quot;表达式&quot;</span></span><br><span class="line"><span class="comment">(3).v-else=&quot;表达式&quot;</span></span><br><span class="line"><span class="comment">适用于：切换频率较低的场景。</span></span><br><span class="line"><span class="comment">特点：不展示的DOM元素直接被移除。</span></span><br><span class="line"><span class="comment">注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.v-show</span></span><br><span class="line"><span class="comment">写法：v-show=&quot;表达式&quot;</span></span><br><span class="line"><span class="comment">适用于：切换频率较高的场景。</span></span><br><span class="line"><span class="comment">特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用v-show做条件渲染 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-show=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-show=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用v-if做条件渲染 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-if=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-if=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-else和v-else-if --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;div v-else&gt;哈哈&lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-if与template的配合使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>hhu<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>江苏<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;hhu&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">n</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-11-列表渲染"><a href="#1-11-列表渲染" class="headerlink" title="1.11 列表渲染"></a>1.11 列表渲染</h3><h4 id="1-11-1-基本列表"><a href="#1-11-1-基本列表" class="headerlink" title="1.11.1 基本列表"></a>1.11.1 基本列表</h4><ol><li><code>v-for</code>指令 <ol><li>用于展示列表数据</li><li>语法：<code>v-for=&quot;(item,index) in xxx&quot; :key=&quot;yyy&quot;</code></li><li>可遍历：数组、对象、字符串（少）、指定次数（少）</li></ol></li><li>代码示例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(person,index) in personList&quot;</span> <span class="attr">::key</span>=<span class="string">&quot;person.id&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123;person.name&#125;&#125; - &#123;&#123;person.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息（遍历对象）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,k) of car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span>&#123;&#123;k&#125;&#125; - &#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">personList</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="string">&quot;001&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="string">&quot;002&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="string">&quot;003&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">car</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;奥迪A8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">price</span>: <span class="string">&quot;70万&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">color</span>: <span class="string">&quot;黑色&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-11-2-key的原理"><a href="#1-11-2-key的原理" class="headerlink" title="1.11.2 key的原理"></a>1.11.2 key的原理</h4><ol><li>虚拟DOM中Key的作用 &#x3D;&gt; Key是虚拟DOM对象的<strong>标识</strong>，当数据发生变化时，VUe会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】和【旧虚拟DOM】的差异比较，<strong>比较规则</strong>如下 <ol><li>旧虚拟DOM中找到与新虚拟DOM相同的Key <ol><li>若虚拟DOM中内容没变，直接使用之前的真实DOM</li><li>若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li></ol></li><li>旧虚拟DOM中未找到与新虚拟DOM相同的Key <ol><li>创建新的真实DOM，随后渲染到页面</li></ol></li></ol></li><li>用<code>index</code>作为Key可能会引发的问题 <ol><li>若对数据进行“逆序添加、逆序删除等”破坏顺序的操作 &#x3D;&gt; 会产生没有必要的真实DOM的更新 &#x3D;&gt; 界面渲染没有问题，但是效率低下</li><li>如果结构中还包含输入类DOM &#x3D;&gt; 会产生错误DOM更新 &#x3D;&gt; 界面有问题</li></ol></li><li>开发中选择Key <ol><li>使用每条数据的唯一标识作为Key，比如id、手机号、身份证号等</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于渲染列表展示，使用index作为Key是没有问题的</li></ol></li><li>示意图<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/Key%E7%9A%84%E5%8E%9F%E7%90%86.png#id=uzoCB&originHeight=1402&originWidth=2529&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li></ol><h4 id="1-11-3-列表过滤"><a href="#1-11-3-列表过滤" class="headerlink" title="1.11.3 列表过滤"></a>1.11.3 列表过滤</h4><ol><li>案例展示</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表过滤<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keywords&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(person,index) in filPerson&quot;</span> <span class="attr">::key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123;person.name&#125;&#125; - &#123;&#123;person.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">keywords</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">personList</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">22</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// filPerson:[]</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* watch:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            keywords:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                immediate: true,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                handler(val) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    this.filPerson = this.personList.filter((person)=&gt;&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                        return person.name.indexOf(val) !== -1</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;   </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125; */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">filPerson</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">personList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">person</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> person.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keywords</span>) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-11-4-列表排序"><a href="#1-11-4-列表排序" class="headerlink" title="1.11.4 列表排序"></a>1.11.4 列表排序</h4><ol><li>代码案例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keywords&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=1&quot;</span>&gt;</span>降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=2&quot;</span>&gt;</span>升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=0&quot;</span>&gt;</span>原序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(person,index) in filPerson&quot;</span> <span class="attr">::key</span>=<span class="string">&quot;person.id&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123;person.name&#125;&#125; - &#123;&#123;person.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">keywords</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">sortType</span>: <span class="number">0</span>, <span class="comment">//排序类型 0=&gt;原顺序  1=&gt;降序  2=&gt;升序</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">personList</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="string">&quot;001&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;马冬梅&quot;</span>, <span class="attr">age</span>: <span class="number">39</span>, <span class="attr">sex</span>: <span class="string">&quot;女&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="string">&quot;002&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;周冬雨&quot;</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">sex</span>: <span class="string">&quot;女&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="string">&quot;003&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;周杰伦&quot;</span>, <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="string">&quot;004&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;温兆伦&quot;</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">filPerson</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> arr = <span class="variable language_">this</span>.<span class="property">personList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">person</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> person.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keywords</span>) !== -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sortType</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">p1, p2</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sortType</span> === <span class="number">1</span> ? p2.<span class="property">age</span> - p1.<span class="property">age</span> : p1.<span class="property">age</span> - p2.<span class="property">age</span>;</span></span><br><span class="line"><span class="language-javascript">              &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> arr</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-11-5-Vue监视数据的原理"><a href="#1-11-5-Vue监视数据的原理" class="headerlink" title="1.11.5 Vue监视数据的原理"></a>1.11.5 Vue监视数据的原理</h4><ol><li>Vue会监视<code>data</code>中所有层次的数据 </li><li>监视对象中的数据 &#x3D;&gt; 通过<code>setter</code>实现监视，且要在创建Vue示例时就要传入要监视的数据 <ol><li>对象中后追加的属性，Vue默认不做响应式处理</li><li>如需给后添加的属性做响应式 &#x3D;&gt; 使用API <ol><li><code>Vue.set(target,propertyName/index,value)</code></li><li><code>vm.$set(target,propertyName/index,value)</code></li></ol></li></ol></li><li>监视数组中的数据 &#x3D;&gt; 通过包裹数组更新元素的方法实现，本质做了两件事 <ol><li>调用Js原生对应的方法对数组进行更新</li><li>重新解析模板，进而更新页面</li></ol></li><li>在Vue修改数组中的某个元素的方法 <ol><li>API:<code>push()、pop()、shift()、unshift()、splice()、sort()、reverse()</code></li><li><code>Vue.set()</code> or <code>vm.$set()</code></li></ol></li><li>注意事项 <ol><li><code>Vue.set()</code> 和 <code>vm.$set()</code>不能给<strong>vm</strong>或者<strong>vm的根数据对象</strong>添加属性</li></ol></li><li>代码案例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据监测<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.age++&quot;</span>&gt;</span>年龄+1岁<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addSex&quot;</span>&gt;</span>添加性别属性，默认值：男<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.sex = &#x27;none&#x27;&quot;</span>&gt;</span>修改性别<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addFriend&quot;</span>&gt;</span>在列表首位添加一个朋友<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateFirstFriendName&quot;</span>&gt;</span>修改第一个朋友的名字为：张三<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHobby&quot;</span>&gt;</span>添加一个爱好<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateHobby&quot;</span>&gt;</span>修改第一个爱好为：开车<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeSmoke&quot;</span>&gt;</span>过滤掉爱好中的抽烟<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>name:&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>age:&#123;&#123;student.age&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;student.sex&quot;</span>&gt;</span>sex:&#123;&#123;student.sex&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>hobby:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(h,index) in student.hobby&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;h&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>friends:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(f,index) in student.friends&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">student</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">hobby</span>:[<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">friends</span>:[</span></span><br><span class="line"><span class="language-javascript">              &#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">age</span>:<span class="number">35</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">              &#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">36</span>&#125;</span></span><br><span class="line"><span class="language-javascript">          ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">addSex</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;man&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;man&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">addFriend</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>.<span class="title function_">unshift</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">age</span>:<span class="number">70</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updateFirstFriendName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">addHobby</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">push</span>(<span class="string">&#x27;study&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updateHobby</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.student.hobby.splice(0,1,&#x27;Drive&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// Vue.set(this.student.hobby,0,&#x27;Drive&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>,<span class="number">0</span>,<span class="string">&#x27;Drive&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">removeSmoke</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span> = <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">h</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> h !== <span class="string">&#x27;抽烟&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-12-收集表单数据"><a href="#1-12-收集表单数据" class="headerlink" title="1.12 收集表单数据"></a>1.12 收集表单数据</h3><ol><li>若：<code>&lt;input type=&quot;text&quot;/&gt;</code>，则<code>v-model</code>收集的是<code>value</code>值，用户输入的就是<code>value</code>值 </li><li>若：<code>&lt;input type=&quot;radio&quot;/&gt;</code>，则<code>v-model</code>收集的是<code>value</code>值，且要给标签配置<code>value</code>值 </li><li>若：<code>&lt;input type=&quot;checkbox&quot;/&gt;</code> <ol><li>没有配置<code>input</code>的<code>value</code>属性，那么收集的就是<code>checked</code>（勾选 or 未勾选，是布尔值）</li><li>配置<code>input</code>的<code>value</code>属性 <ol><li><code>v-model</code>的初始值是非数组，那么收集的就是<code>checked</code>（勾选 or 未勾选，是布尔值）</li><li><code>v-model</code>的初始值是数组，那么收集的的就是<code>value</code>组成的数组</li></ol></li></ol></li><li>代码示例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>收集表单数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">            账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;userInfo.userAccount&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.userPassword&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;userInfo.age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            性别：</span><br><span class="line">            男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">            女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;famale&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            爱好：</span><br><span class="line">            学习<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span>&gt;</span></span><br><span class="line">            跑步<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">            吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            所在城市：</span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.city&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择城市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;jiangsu&quot;</span>&gt;</span>江苏<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;anhui&quot;</span>&gt;</span>安徽<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;zhejiang&quot;</span>&gt;</span>浙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            其他信息：</span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;userInfo.other&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.agree&quot;</span>&gt;</span>阅读并接受 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https:www.github.com/CodingJuzi&quot;</span>&gt;</span>《用户协议》<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">userInfo</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">userAccount</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">userPassword</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">age</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">sex</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">hobby</span>:[],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">city</span>:<span class="string">&#x27;jiangsu&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">other</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">agree</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>))</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-13-过滤器"><a href="#1-13-过滤器" class="headerlink" title="1.13 过滤器"></a>1.13 过滤器</h3><ol><li>定义：对要显示的数据进行特定格式化后再显示 </li><li>语法： <ol><li>注册过滤器：<code>Vue.filter(name,callback)</code>或者<code>new Vue&#123;filters:&#123;&#125;&#125;</code></li><li>使用过滤器：<code>&#123;&#123;xxx | 过滤器名&#125;&#125;</code> 或者<code>v-bind:属性=&quot;xxx | 过滤器名&quot;</code></li></ol></li><li>备注 <ol><li>过滤器也可以接收额外参数、多个过滤器也可以串联</li><li>过滤器并未改变原本的数据，而是产生了新的对应的数据</li></ol></li><li>代码案例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/dayjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化后的时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 计算属性实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;fmtTime&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- methods实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;getFmtTime()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤器实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤器实现（传参） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">:x</span>=<span class="string">&quot;msg | mySlice&quot;</span>&gt;</span>hhu<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//全局过滤器</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">time</span>:<span class="number">1621561377603</span>, <span class="comment">//时间戳</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>:<span class="string">&#x27;Hello,hhu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fmtTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">getFmtTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//局部过滤器</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">timeFormater</span>(<span class="params">value,str=<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="title function_">dayjs</span>(value).<span class="title function_">format</span>(str)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>:<span class="string">&#x27;hello,atguigu!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-14-内置指令"><a href="#1-14-内置指令" class="headerlink" title="1.14 内置指令"></a>1.14 内置指令</h3><blockquote><p>已经学过的指令</p><ol><li>v-bind   : 单向绑定解析表达式, 可简写为 :xxx</li><li>v-model : 双向数据绑定</li><li>v-for  : 遍历数组&#x2F;对象&#x2F;字符串</li><li>v-on   : 绑定事件监听, 可简写为@</li><li>v-if     : 条件渲染（动态控制节点是否存存在）</li><li>v-else  : 条件渲染（动态控制节点是否存存在）</li><li>v-show  : 条件渲染 (动态控制节点是否展示)</li></ol></blockquote><h4 id="1-14-1-v-text"><a href="#1-14-1-v-text" class="headerlink" title="1.14.1 v-text"></a>1.14.1 v-text</h4><ol><li>作用：向其所在的节点中渲染文本内容</li><li>与插值语法的区别：<code>v-text</code>会替换掉节点中的内容，<code>&#123;&#123;xx&#125;&#125;</code>不会</li></ol><h4 id="1-14-2-v-html"><a href="#1-14-2-v-html" class="headerlink" title="1.14.2 v-html"></a>1.14.2 v-html</h4><ol><li>作用：向指定节点中渲染包含html结构的内容</li><li>与插值语法的区别 <ol><li><code>v-html</code>会替换掉节点中所有的内容，<code>&#123;&#123;xx&#125;&#125;</code>不会</li><li><code>v-html</code>可以识别html结构</li></ol></li><li>注意事项 <ol><li><strong>v-html有安全性问题</strong> <ol><li>在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击</li><li>一定要在可信的内容上使用<code>v-html</code>，永远不要使用在用户提交的内容上</li></ol></li></ol></li></ol><h4 id="1-14-3-v-cloak"><a href="#1-14-3-v-cloak" class="headerlink" title="1.14.3 v-cloak"></a>1.14.3 v-cloak</h4><ol><li>没有值</li><li>本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉<code>v-vloak</code>属性</li><li>使用css配合<code>v-cloak</code>可以解决网速慢时页面展示出现<code>&#123;&#123;XXX&#125;&#125;</code>的问题</li></ol><h4 id="1-14-4-v-once"><a href="#1-14-4-v-once" class="headerlink" title="1.14.4 v-once"></a>1.14.4 v-once</h4><ol><li><code>v-once</code>所在的节点在初次动态渲染后，就被视为静态内容</li><li>以后数据的改变不会引起<code>v-once</code>所在结构的更新，可以用于优化性能</li></ol><h4 id="1-14-5-v-pre"><a href="#1-14-5-v-pre" class="headerlink" title="1.14.5 v-pre"></a>1.14.5 v-pre</h4><ol><li>跳过其所在节点的编译过程</li><li>可利用他跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译</li></ol><h3 id="1-15-自定义指令"><a href="#1-15-自定义指令" class="headerlink" title="1.15 自定义指令"></a>1.15 自定义指令</h3><ol><li>定义语法 <ol><li>局部指令</li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">directives:&#123;指令名：配置对象&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">&lt;!-- 或者 --&gt;</span></span><br><span class="line">new Vue(&#123;</span><br><span class="line">directives:&#123;指令名：回调函数&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><pre><code>  2.  全局指令 </code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(指令名,配置对象)</span><br><span class="line"><span class="comment">&lt;!-- 或者 --&gt;</span></span><br><span class="line">Vue.directive(指令名,回调函数)</span><br></pre></td></tr></table></figure><ol start="2"><li>配置对象中常用的3个回调 <ol><li><code>bind</code>:指定与元素成功绑定时调用</li><li><code>inserted</code>:指令所在的元素被插入页面时调用</li><li><code>update</code>:指令所在的模板被重新解析时调用</li></ol></li><li>备注 <ol><li>指令定义时不加v-，但是使用时要在v-</li><li>指令名如果是多个单词，要使用<code>kabab-case</code>命名方式，不要使用<code>camelCase</code>命名</li></ol></li><li>代码示例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//全局指令</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* Vue.directive(&#x27;fbind&#x27;,&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                //指令与元素成功绑定时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                bind(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    element.innerText = binding.value;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                //指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                inserted(element,binding) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    element.focus()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                //指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                update(element,binding) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    element.innerText = binding.value</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;) */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* Vue.directive(&#x27;big&#x27;,function(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            element.innerText = binding.value * 10</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;) */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//big函数调用时机 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                1.指令与元素成功绑定时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                2.指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            */</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">big</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fbind</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//指令与元素成功绑定时</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    element.<span class="property">innerText</span> = binding.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">inserted</span>(<span class="params">element,binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    element.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">update</span>(<span class="params">element,binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    element.<span class="property">innerText</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-16-生命周期"><a href="#1-16-生命周期" class="headerlink" title="1.16 生命周期"></a>1.16 生命周期</h3><ol><li>别名：生命周期回调函数、生命周期函数、生命周期钩子 </li><li>&#x3D;&gt; Vue在关键时刻调用的一些特殊名称的函数 </li><li>生命周期函数的名称不可更改，但是函数的具体内容是根据需求编写的 </li><li>生命周期函数中this指向是vm或者组件实例对象 </li><li><strong>示意图</strong><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png#id=e88Nc&originHeight=1892&originWidth=1469&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="> </li><li>常用的生命周期钩子 <ol><li><code>mounted</code>：发送Ajax请求、启动定时器、绑定自定义事件、订阅信息等【初始化操作】</li><li><code>beforeDestroy</code>：清除定时器、解除自定义事件、取消订阅消息等【收尾工作】</li></ol></li><li>关于销毁Vue实例的几点说明 <ol><li>销毁后借助Vue开发者工具看不到任何消息</li><li>销毁后自定义事件会失效，但原生DOM事件依然有效</li><li>一般不会在<code>beforeDestroy</code>操作数据，因为即便操作数据，也不会再出发更新流程</li></ol></li></ol><h2 id="2-Vue组件化编程"><a href="#2-Vue组件化编程" class="headerlink" title="2 Vue组件化编程"></a>2 Vue组件化编程</h2><h3 id="2-1-模块与组件、模块化与组件化"><a href="#2-1-模块与组件、模块化与组件化" class="headerlink" title="2.1 模块与组件、模块化与组件化"></a>2.1 模块与组件、模块化与组件化</h3><h4 id="2-1-1-模块"><a href="#2-1-1-模块" class="headerlink" title="2.1.1 模块"></a>2.1.1 模块</h4><ol><li>理解: 向外提供特定功能的 js 程序, 一般就是一个 js 文件</li><li>为什么: js 文件很多很复杂</li><li>作用: 复用 js, 简化 js 的编写, 提高 js 运行效率</li></ol><h4 id="2-1-2-组件"><a href="#2-1-2-组件" class="headerlink" title="2.1.2 组件"></a>2.1.2 组件</h4><ol><li>理解: 用来实现局部(特定)功能效果的代码集合(html&#x2F;css&#x2F;js&#x2F;image…..)</li><li>为什么: 一个界面的功能很复杂</li><li>作用：复用编码、简化项目编码、提高运行效率</li></ol><h4 id="2-1-3-模块化"><a href="#2-1-3-模块化" class="headerlink" title="2.1.3 模块化"></a>2.1.3 模块化</h4><p>当应用中的功能都是多组件的方式来编写的，那这个应用就是一个组件化的应用</p><h4 id="2-1-4-组件化"><a href="#2-1-4-组件化" class="headerlink" title="2.1.4 组件化"></a>2.1.4 组件化</h4><p>当应用中的功能都是多组件的方式来编写的，那这个应用就是一个组件化的应用</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E6%96%B9%E5%BC%8F%E7%BC%96%E5%86%99%E5%BA%94%E7%94%A8.png#id=xxUzJ&originHeight=1426&originWidth=2515&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/Vue%E5%AE%98%E7%BD%91%E7%9A%84%E7%BB%84%E4%BB%B6%E7%90%86%E8%A7%A3.png#id=rljqe&originHeight=845&originWidth=2141&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="2-2-非单文件组件"><a href="#2-2-非单文件组件" class="headerlink" title="2.2 非单文件组件"></a>2.2 非单文件组件</h3><h4 id="2-2-1-基本使用"><a href="#2-2-1-基本使用" class="headerlink" title="2.2.1 基本使用"></a>2.2.1 基本使用</h4><ol><li>Vue中使用组件的三大步骤 <ol><li>定义组件（创建组件）</li><li>注册组件</li><li>使用组件（写组件标签）</li></ol></li><li>定义组件 <ol><li>使用<code>Vue.extend(options)</code>创建，其中<code>options</code>和<code>new Vue(options)</code>时传入的<code>options</code>几乎一样</li><li>区别： <ol><li>不写<code>el</code> &#x3D;&gt; 最终所有的组件都要经过一个vm的管理，由vm中的el决定</li><li>函数式<code>data</code> &#x3D;&gt; 避免组件被复用时，数据存在引用关系</li></ol></li><li>备注 <ol><li>使用<code>template</code>可以配置组件结构</li></ol></li></ol></li><li>注册组件 <ol><li>局部注册：靠<code>new Vue()</code>的时候传入<code>components</code>选项</li><li>全局注册：靠<code>Vue.component(&#39;组件名&#39;,组件)</code></li></ol></li><li>编写组件标签 <ol><li><code>&lt;组件名&gt;&lt;/组件名&gt;</code></li></ol></li><li>代码示例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 编写组件标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//① 创建组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//学校组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div class=&quot;demo&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      `</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">schoolName</span>: <span class="string">&quot;hhu&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">address</span>: <span class="string">&quot;江苏&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">schoolName</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//学生组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">studentName</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//hello组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> hello = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;你好啊！&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//全局注册</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;hello&#x27;</span>,hello)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">&quot;Hello&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//② 注册组件(局部注册)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        school,</span></span><br><span class="line"><span class="language-javascript">        student</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-注意事项"><a href="#2-2-2-注意事项" class="headerlink" title="2.2.2 注意事项"></a>2.2.2 注意事项</h4><ol><li>关于组件名: <ol><li>一个单词组成 <ol><li>第一种写法(首字母小写)：school</li><li>第二种写法(首字母大写)：School</li></ol></li><li>多个单词组成： <ol><li>第一种写法(kebab-case命名)：my-school </li><li>第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</li></ol></li><li>备注： <ol><li>组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。 </li><li>可以使用name配置项指定组件在开发者工具中呈现的名字</li></ol></li></ol></li><li>关于组件标签: <ol><li>第一种写法： </li><li>第二种写法： </li><li>备注：不用使用脚手架时，会导致后续组件不能渲染。</li></ol></li><li>一个简写方式 <ol><li><code>const school = Vue.extend(options)</code> &#x3D;&gt; <code>const school = options</code></li></ol></li></ol><h4 id="2-2-3-组件的嵌套"><a href="#2-2-3-组件的嵌套" class="headerlink" title="2.2.3 组件的嵌套"></a>2.2.3 组件的嵌套</h4><ol><li>代码示例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件的嵌套<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.config.productionTip = false;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //① 创建组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //学生组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：</span><span class="template-variable">&#123;&#123;<span class="name">studentName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          studentName: &quot;张三&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          age: 18,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //学校组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：</span><span class="template-variable">&#123;&#123;<span class="name">schoolName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          schoolName: &quot;hhu&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          address: &quot;江苏&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //注册组件（局部）</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        student,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //hello组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const hello = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to </span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          msg: &quot;hhu&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //定义App组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const app = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span>    </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        school,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        hello,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //全局注册</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&quot;hello&quot;, hello);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      el: &quot;#root&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //② 注册组件(局部注册)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        app,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>嵌套示意图<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B5%8C%E5%A5%97.png#id=XJ8kZ&originHeight=226&originWidth=324&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li></ol><h4 id="2-2-4-VueComponent"><a href="#2-2-4-VueComponent" class="headerlink" title="2.2.4 VueComponent"></a>2.2.4 VueComponent</h4><ol><li>组件的本质是一个名为<code>VueComponent</code>的构造函数，不是由程序员定义，是<code>Vue.extend</code>生成的 </li><li>编写组件标签时，<code>Vue</code>解析时会帮我们创建组件的实例对象，即<code>Vue</code>帮我们执行的：<code>new VueComponent(options)</code> </li><li>特别注意：每次调用<code>Vue.extend</code>，返回的都是一个全新的<code>VueComponent</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">extend</span> = <span class="keyword">function</span> (<span class="params">extendOptions</span>) &#123;</span><br><span class="line">          <span class="comment">/*………………*/</span></span><br><span class="line">          <span class="keyword">var</span> <span class="title class_">Sub</span> = <span class="keyword">function</span> <span class="title function_">VueComponent</span>(<span class="params">options</span>) &#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="title function_">_init</span>(options);</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="comment">/*………………*/</span></span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Sub</span>;</span><br><span class="line">      &#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li>关于this指向 <ol><li>组件配置中<br>data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【<strong>VueComponent实例对象</strong>】 </li><li><code>new Vue(options)</code>配置中<br>data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【<strong>Vue实例对象</strong>】</li></ol></li><li>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）<br>Vue的实例对象，以后简称vm</li></ol><h4 id="2-2-5-一个重要的内置关系"><a href="#2-2-5-一个重要的内置关系" class="headerlink" title="2.2.5 一个重要的内置关系"></a>2.2.5 一个重要的内置关系</h4><ol><li><code>VueComponent.prototype.__proto__ === Vue.prototype</code></li><li>作用 &#x3D;&gt; 让组件实例对象能够访问到Vue原型上的属性、方法</li><li>分析示意图</li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/%E5%88%86%E6%9E%90Vue%E5%92%8CVueComponent%E7%9A%84%E5%85%B3%E7%B3%BB.png#id=Blzt7&originHeight=1495&originWidth=2536&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="2-3-单文件组件"><a href="#2-3-单文件组件" class="headerlink" title="2.3 单文件组件"></a>2.3 单文件组件</h3><ol><li><code>xxx.vue</code>文件 &#x3D;&gt; 内部书写组件 <ol><li><code>template</code> &#x3D;&gt; 组件的结构</li><li><code>script</code> &#x3D;&gt; 组件相关交互的代码</li><li><code>style</code> &#x3D;&gt; 组件的样式</li></ol></li><li>代码示例 （练习下格式  没有脚手架，不能运行）<br><strong>School.vue</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 组件的结构 --&gt;</span><br><span class="line">    &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //组件相关交互的代码</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;School&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;hhu&#x27;,</span><br><span class="line">                address:&#x27;江苏&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            showName()&#123;</span><br><span class="line">                alert(this.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    /*  组件的样式  */</span><br><span class="line">    .demo&#123;</span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>Student.vue</strong><br><strong>App.vue</strong><br><strong>main.js</strong><br><strong>index.html</strong>  </p><h2 id="3-使用Vue脚手架"><a href="#3-使用Vue脚手架" class="headerlink" title="3 使用Vue脚手架"></a>3 使用Vue脚手架</h2><h3 id="3-1-初始化脚手架"><a href="#3-1-初始化脚手架" class="headerlink" title="3.1 初始化脚手架"></a>3.1 初始化脚手架</h3><h4 id="3-1-1-说明"><a href="#3-1-1-说明" class="headerlink" title="3.1.1 说明"></a>3.1.1 说明</h4><ol><li>Vue脚手架是Vue官方提供的标准化开发工具（开发平台）</li><li>最新的版本是4.x</li><li>文档地址：<a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></li></ol><h4 id="3-1-2-具体步骤"><a href="#3-1-2-具体步骤" class="headerlink" title="3.1.2 具体步骤"></a>3.1.2 具体步骤</h4><ul><li>官方文档：<a href="https://cli.vuejs.org/zh/">Home | Vue CLI (vuejs.org)</a></li></ul><ol><li>安装nodejs 环境<br>参考文档：<a href="https://www.cnblogs.com/netcore5/p/15259499.html">https://www.cnblogs.com/netcore5/p/15259499.html</a> </li><li>（仅第一次执行）：全局安装<code>@vue/cli</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>切换到要创建项目的目录</strong>，执行命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue create my-project</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OR</span></span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure><ul><li>示意图<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AAvue%E9%A1%B9%E7%9B%AE.png#id=mriBB&originHeight=1208&originWidth=855&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="> </li><li>备注 <ul><li>创建项目过程如果报错，使用管理员权限打开<code>cmd</code> </li><li>运行过程出现名称错误 <ul><li>解决方案一： <code>ctrl + p</code> &#x3D;&gt; <code>vue.config.js</code> &#x3D;&gt; 添加配置 <code>lintOnSave:false</code></li></ul></li><li>Vue脚手架隐藏了所有webpack相关的配置，若想查看具体的webpack配置，执行</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue inspect &gt; output.js</span><br></pre></td></tr></table></figure><h4 id="3-1-3-脚手架文件结构"><a href="#3-1-3-脚手架文件结构" class="headerlink" title="3.1.3 脚手架文件结构"></a>3.1.3 脚手架文件结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico: 页签图标</span><br><span class="line">│   └── index.html: 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets: 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component: 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   │── App.vue: 汇总所有组件</span><br><span class="line">│   │── main.js: 入口文件</span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure><h4 id="3-1-4-render-函数"><a href="#3-1-4-render-函数" class="headerlink" title="3.1.4 render()函数"></a>3.1.4 render()函数</h4><p><em>特殊的函数</em></p><p>关于不同版本的Vue</p><ol><li><code>vue.js</code>与<code>vue.runtime.xxx.js</code>的区别： <ol><li><code>vue.js</code>是完整版的Vue，包含：<strong>核心功能</strong>+<strong>模板解析器</strong> </li><li><code>vue.runtime.xxx.js</code>是运行版的Vue，<strong>只</strong>包含：核心功能；没有模板解析器</li></ol></li><li>因为<code>vue.runtime.xxx.js</code>没有模板解析器，所以不能使用template配置项，需要使用</li></ol><p>      <code>render</code>函数接收到的<code>createElement</code>函数去指定具体内容</p><h4 id="3-1-5-脚手架默认配置"><a href="#3-1-5-脚手架默认配置" class="headerlink" title="3.1.5 脚手架默认配置"></a>3.1.5 脚手架默认配置</h4><ul><li>官方文档：<a href="https://cli.vuejs.org/zh/config/">配置参考 | Vue CLI (vuejs.org)</a> </li><li>查看Vue脚手架默认配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue inspect &gt; output.js</span><br></pre></td></tr></table></figure><h3 id="3-2-ref-和-props"><a href="#3-2-ref-和-props" class="headerlink" title="3.2 ref 和 props"></a>3.2 ref 和 props</h3><h4 id="3-2-1-ref属性"><a href="#3-2-1-ref属性" class="headerlink" title="3.2.1 ref属性"></a>3.2.1 ref属性</h4><ol><li>作用：给元素或者子组件注册引用信息（id的替代） </li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象 </li><li>使用方式 <ol><li>标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;...&lt;/h1&gt;</code>或者<code>&lt;School ref=&quot;xxx&gt;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h4 id="3-2-2-props配置项"><a href="#3-2-2-props配置项" class="headerlink" title="3.2.2 props配置项"></a>3.2.2 props配置项</h4><ol><li>作用：让组件接收外部传入的数据 </li><li>传递数据：<code>&lt;Demo name=&quot;XXX&quot;/&gt;</code> </li><li>接收数据： <ol><li>方式一（只接收）：<code>props:[&#39;name&#39;]</code> </li><li>方式二（限制类型）：<code>props:&#123;name:String&#125;</code> </li><li>方式三（限制类型、限制必要性、指定默认值）：</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line">        <span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据</p></blockquote><h3 id="3-3-mixin（混入）"><a href="#3-3-mixin（混入）" class="headerlink" title="3.3 mixin（混入）"></a>3.3 mixin（混入）</h3><ol><li>作用：可以把多个组件共用的配置提取成一个混入对象 </li><li>使用方式：<em>需要导出和引入</em> <ol><li>定义混合</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;...&#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;...&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>  2.  使用混入       1. 全局混入：`Vue.mixin(XXX)`      2. 局部混入：`mixins:[&#39;XXX&#39;]`</code></pre><h3 id="3-4-插件"><a href="#3-4-插件" class="headerlink" title="3.4 插件"></a>3.4 插件</h3><ol><li>作用：增强Vue </li><li>本质：包含<code>install()</code> 方法的一个对象，<code>install</code>的第一个参数是Vue原型对象，第二个以后的参数是插件使用者传递的数据 </li><li>定义插件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span>(<span class="params">Vue,options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1.添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(...)</span><br><span class="line">               </span><br><span class="line"><span class="comment">// 2.添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(...)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.配置全局混入</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>使用插件：<code>Vue.use(..)</code></li></ol><h3 id="3-5-scoped样式"><a href="#3-5-scoped样式" class="headerlink" title="3.5 scoped样式"></a>3.5 scoped样式</h3><ol><li>作用：让样式在局部生效，防止冲突</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><hr><h3 id="总结TODOList案例"><a href="#总结TODOList案例" class="headerlink" title="总结TODOList案例"></a>总结TODOList案例</h3><ol><li>组件化编码流程： </li><li>拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。 </li><li>实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用： </li><li>一个组件在用：放在组件自身即可 </li><li>一些组件在用：放在他们共同的父组件上（状态提升） </li><li>实现交互：从绑定事件开始 </li><li>props适用于： <ol><li>父组件 &#x3D;&#x3D;&gt; 子组件 通信</li><li>子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</li></ol></li><li>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！ </li><li>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</li></ol><hr><h3 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h3><ol><li>存储内容大小一般支持5MB左右（依照浏览器）</li><li>浏览器端通过<code>Window.sessionStorage</code>和<code>window.localStorage</code>属性来实现本地存储机制</li><li>相关API <ol><li><code>xxxStorage.setItem(&#39;key&#39;,&#39;value&#39;)</code> &#x3D;&gt; 该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值</li><li><code>xxxStorage.getItem(&#39;key&#39;)</code> &#x3D;&gt; 该方法接受一个键名作为参数，返回键名对应的值</li><li><code>xxxStorage.removeItem(&#39;key&#39;)</code> &#x3D;&gt; 该方法接受一个键名作为参数，并把该键名从存储中删除</li><li><code>xxxStorage.clear()</code> &#x3D;&gt; 该方法会清空存储中的所有数据</li></ol></li><li>备注 <ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失</li><li>LocalStorage的存储的内容需要手动清除才会消失</li><li><code>xxxStorage.getItem(&#39;key&#39;)</code>如果key对应的Value获取不到，则此方法的返回值为null</li><li><code>Json.parse(null)</code>的结果依然是null</li></ol></li></ol><hr><h3 id="3-6-组件的自定义事件"><a href="#3-6-组件的自定义事件" class="headerlink" title="3.6 组件的自定义事件"></a>3.6 组件的自定义事件</h3><ol><li>一种组件间的通信方式，适用于: <strong>子组件&#x3D;&#x3D;&#x3D;&gt;父组件</strong> </li><li>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中） </li><li>绑定自定义事件 <ol><li>方式一：在父组件中：<code>&lt;Demo @mystyle=&quot;test&quot;/&gt;</code> 或者 <code>&lt;Demo v-on:mystyle=&quot;test&quot;/&gt;</code> </li><li>方式二：在父组件中：</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">.......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;mystyle&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>  3.  若想让自定义事件只触发一次，可以使用`once`修饰符或者`$once`方法 </code></pre><ol start="4"><li><pre><code>触发自定义事件：`this.$emit(&#39;mystyle&#39;,数据)` </code></pre></li><li><pre><code>解绑自定义事件：`this.$off(&#39;mystyle&#39;)` </code></pre></li><li><pre><code>组件上也可以绑定原生DOM事件，需要使用`native`修饰符 </code></pre></li><li><pre><code>注意：通过`this.$refs.xxx.$on(&#39;mystyle&#39;,回调)`绑定自定义事件时，**回调**要么配置在methods中，要么用箭头函数，否则this指向会有问题</code></pre></li></ol><h3 id="3-7-全局事件总线-GlobalEventBus"><a href="#3-7-全局事件总线-GlobalEventBus" class="headerlink" title="3.7 全局事件总线(GlobalEventBus)"></a>3.7 全局事件总线(GlobalEventBus)</h3><ol><li>一种组件间通信的方式，适用于任意组件间的通信 </li><li>安装全局事件总线</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">// 安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    .....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>使用事件总线： <ol><li>接收数据：A组件想要接收数据，则在A组件中给<code>$bus</code>绑定自定义事件，事件的回调留在A组件自身</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">data</span>) &#123;.......&#125;,</span><br><span class="line">    .......</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>  2.  提供数据：`this.$bus.$emit(&#39;xxx&#39;,数据)` </code></pre><ol start="3"><li>注意事项 <ol><li>最好在<code>beforeDestroy</code>钩子中，用<code>$off</code>去解绑当前组件所用到的事件</li></ol></li></ol><hr><h3 id="消息订阅与发布（pubsub"><a href="#消息订阅与发布（pubsub" class="headerlink" title="消息订阅与发布（pubsub)"></a>消息订阅与发布（pubsub)</h3><ol><li>一种组件间通信的方式，适用于任意组件间的通信 </li><li>使用步骤 <ol><li>安装pubsub:<code>npm i pubsub-js</code> </li><li>引入： <code>import pubsub from &#39;pubsub-js&#39;</code> </li><li>接收数据：A组件想要接收数据，则在A组件中订阅消息，订阅的回调留在A中</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line"><span class="title function_">demo</span>(<span class="params">data</span>) &#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>  4.  提供数据：`pubsub.publish(&#39;xxx&#39;,数据)`   5.  注意事项       1. 最好在`beforeDestroy`钩子中，用`pubsub.unsubscribe(pid)`去取消订阅</code></pre><hr><h3 id="3-8-nextTick"><a href="#3-8-nextTick" class="headerlink" title="3.8 nextTick"></a>3.8 nextTick</h3><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次DOM更新结束后执行其制定的回调</li><li>使用时机：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行</li></ol><h3 id="3-9-Vue封装的过渡和动画"><a href="#3-9-Vue封装的过渡和动画" class="headerlink" title="3.9 Vue封装的过渡和动画"></a>3.9 Vue封装的过渡和动画</h3><ol><li>作用：在插入、更新或者移除DOM元素时，在合适的时候给元素添加样式类名 </li><li>图示：<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/Vue%E5%B0%81%E8%A3%85%E7%9A%84%E8%BF%87%E6%B8%A1%E5%92%8C%E5%8A%A8%E7%94%BB.png#id=xBdZ4&originHeight=454&originWidth=1199&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="> </li><li>写法： <ol><li>准备好样式： <ul><li>元素进入的样式 <ol><li><code>v-enter</code>:进入的起点</li><li><code>v-enter-active</code>:进入过程中</li><li><code>v-enter-to</code>:进入的终点</li></ol></li><li>元素离开的样式 <ol><li><code>v-leave</code>:离开的起点</li><li><code>v-leave-active</code>:离开过程中</li><li><code>v-leave-to</code>:离开的终点</li></ol></li></ul></li><li>使用<code>&lt;transition&gt;</code>包裹要过渡的元素，并配置name属性</li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>  3.  备注：若有多个元素需要过渡，则需要使用:`&lt;transition-group&gt;`，且每个元素都要指定`key`值 </code></pre><h2 id="4-Vue中的Ajax"><a href="#4-Vue中的Ajax" class="headerlink" title="4 Vue中的Ajax"></a>4 Vue中的Ajax</h2><h3 id="4-1-Vue脚手架配置代理-解决跨域问题"><a href="#4-1-Vue脚手架配置代理-解决跨域问题" class="headerlink" title="4.1 Vue脚手架配置代理 &#x3D;&gt; 解决跨域问题"></a>4.1 Vue脚手架配置代理 &#x3D;&gt; 解决跨域问题</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><pre><code>在`vue.config.js`中添加如下配置</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>优点：配置简单，请求资源时直接发送给前端即可</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配服务器）</li></ul><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><pre><code>编写`vue.config.js`配置具体代理规则</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:port&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:port&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理</li><li>缺点：配置略微繁琐，请求资源时必须加前缀</li></ul><p>###4.2 slot插槽</p><ol><li>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于<strong>父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> </li><li>分类：默认插槽、具名插槽、作用域插槽 </li><li>使用方式： <ol><li>默认插槽：</li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件中 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 定义插槽 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>  2.  具名插槽 </code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 定义插槽 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>  3.  作用域插槽       1.  理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定(game数据在Category组件中，但使用数据所遍历出来的结构有App组件决定)       2.  具体编码 </code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;scopeData&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生成的是ul列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;g in scopeData.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;g&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scopeData&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生成的是h4标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">&quot;g in scopeData.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;g&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:games</span>=<span class="string">&quot;games&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;Category&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//数据在子组件自身</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">games</span>:[<span class="string">&#x27;红色警戒&#x27;</span>,<span class="string">&#x27;穿越火线&#x27;</span>,<span class="string">&#x27;劲舞团&#x27;</span>,<span class="string">&#x27;超级玛丽&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-Vuex"><a href="#5-Vuex" class="headerlink" title="5 Vuex"></a>5 Vuex</h2><h3 id="5-1-Vuex理解"><a href="#5-1-Vuex理解" class="headerlink" title="5.1 Vuex理解"></a>5.1 Vuex理解</h3><ol><li>是什么？专门在 Vue 中实现集中式状态（数据）管理的一个 Vue <strong>插件</strong>，对 vue 应 用中多个组件的<strong>共享</strong>状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方 式，且适用于任意组件间通信 </li><li>工作原理图<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/Vuex%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%9B%BE.png#id=Q8x9u&originHeight=752&originWidth=1091&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li></ol><h3 id="5-2-搭建Vuex环境"><a href="#5-2-搭建Vuex环境" class="headerlink" title="5.2 搭建Vuex环境"></a>5.2 搭建Vuex环境</h3><ol><li>安装Vuex <ol><li>Vue2 &#x3D;&gt; Vuex3 版本</li></ol></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vuex@3</span><br></pre></td></tr></table></figure><ol start="2"><li>创建文件：<code>src/store/index.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入Vue核心</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;Vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备actions对象 =&gt; 响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">// 准备mutations对象 =&gt; 修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">// 准备state对象 =&gt; 保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line"><span class="comment">// 引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">.......</span><br><span class="line"><span class="comment">// 创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-3-基本使用"><a href="#5-3-基本使用" class="headerlink" title="5.3 基本使用"></a>5.3 基本使用</h3><ol><li>初始化数据、配置<code>actions</code>、配置<code>mutations</code>、操作文件<code>store.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>组件中读取vuex中的数据：<code>$store.state.xxx</code> </li><li>组件中修改vuex中的数据：<code>$store.dispatch(&#39;actions中的方法名&#39;,数据)</code>或者<code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></li></ol><blockquote><p>备注：若没有网络请求或者其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote><h3 id="5-4-getters的使用"><a href="#5-4-getters的使用" class="headerlink" title="5.4 getters的使用"></a>5.4 getters的使用</h3><ol><li>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工 </li><li>在<code>store.js</code>中追加<code>getters</code>配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>组件中读取数据：<code>$store.getters.bigSum</code></li></ol><h3 id="5-5-map方法使用"><a href="#5-5-map方法使用" class="headerlink" title="5.5 map方法使用"></a>5.5 map方法使用</h3><ol><li><strong>mapState方法</strong>  &#x3D;&gt; 用于帮助我们映射<code>state</code>中的数据为计算属性</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>mapGetters方法</strong> &#x3D;&gt; 用于帮助我们映射<code>getters</code>中的数据为计算属性</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>mapActions方法</strong> &#x3D;&gt; 用于帮助我们生成与<code>actions</code>对话的方法，即包含<code>$state.dispatch(xxx)的函数</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>mapMutations方法</strong> &#x3D;&gt; 用于帮助我们生成与<code>mutations</code>对话的方法，即包含<code>$state.commit(xxx)的函数</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备注：mapActions 与 mapMutations 使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象</p></blockquote><h3 id="5-6-模块化-命名空间"><a href="#5-6-模块化-命名空间" class="headerlink" title="5.6 模块化 + 命名空间"></a>5.6 模块化 + 命名空间</h3><ol><li>目的：让代码更好维护，让多种数据分类更加明确 </li><li>修改<code>store.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>开启命名空间后，组件中读取<code>state</code>数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure><ol start="4"><li>开启命名空间后，组件中读取<code>getters</code>数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure><ol start="5"><li>开启命名空间后，组件中调用<code>dispatch</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="6"><li>开启命名空间后，组件中调用<code>commit</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure><h2 id="6-vue-router"><a href="#6-vue-router" class="headerlink" title="6 vue-router"></a>6 vue-router</h2><ol><li>理解：一个路由(route)就是一组映射关系(key - value)，多个路由需要路由器(router)进行管理 </li><li>前端路由：key是路径，value是组件<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/5143/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%90%86%E8%A7%A3%E6%A1%88%E4%BE%8B.png#id=rT5ua&originHeight=964&originWidth=1695&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li></ol><h3 id="6-1-基本使用"><a href="#6-1-基本使用" class="headerlink" title="6.1 基本使用"></a>6.1 基本使用</h3><ol><li>安装vue-router（Vue2 &#x3D;&gt; vue-router3)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router@3</span><br></pre></td></tr></table></figure><ol start="2"><li>应用插件：<code>Vue.user(VueRouter)</code> </li><li>编写router配置项:<code>src/router/index.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>实现切换(<code>active-class</code>可以配置高亮样式)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>指定展示位置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><h3 id="6-2-注意事项"><a href="#6-2-注意事项" class="headerlink" title="6.2 注意事项"></a>6.2 注意事项</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到</li></ol><h3 id="6-3-多级路由（嵌套路由）"><a href="#6-3-多级路由（嵌套路由）" class="headerlink" title="6.3 多级路由（嵌套路由）"></a>6.3 多级路由（嵌套路由）</h3><ol><li>配置路由规则，使用<code>children</code>配置项</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><ol start="2"><li>跳转（<strong>完整路径</strong>）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h3 id="6-4-路由的query参数"><a href="#6-4-路由的query参数" class="headerlink" title="6.4 路由的query参数"></a>6.4 路由的query参数</h3><ol><li>传递参数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>接收参数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure><h3 id="6-5-命名路由"><a href="#6-5-命名路由" class="headerlink" title="6.5 命名路由"></a>6.5 命名路由</h3><ol><li>作用：可以简化路由的跳转 </li><li>使用方法： <ol><li>给路由命名</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>  2.  简化跳转 </code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;hello&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h3 id="6-6-路由的params参数"><a href="#6-6-路由的params参数" class="headerlink" title="6.6 路由的params参数"></a>6.6 路由的params参数</h3><ol><li>配置路由，声明接收<code>params</code>参数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>传递参数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;xiangqing&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote><ol start="3"><li>接收参数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure><h3 id="6-7-路由的props参数"><a href="#6-7-路由的props参数" class="headerlink" title="6.7 路由的props参数"></a>6.7 路由的props参数</h3><ul><li>作用：让路由组件更方便的接收参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-8-的replace属性"><a href="#6-8-的replace属性" class="headerlink" title="6.8 &lt;router-link&gt;的replace属性"></a>6.8 <code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录的写入模式：<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录，路由跳转时候默认是<code>push</code></li><li>开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="6-9-编程式路由导航"><a href="#6-9-编程式路由导航" class="headerlink" title="6.9 编程式路由导航"></a>6.9 编程式路由导航</h3><ol><li>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活 </li><li>代码示例</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退(传入正数前进，负数后退)</span></span><br></pre></td></tr></table></figure><h3 id="6-10-缓存路由组件"><a href="#6-10-缓存路由组件" class="headerlink" title="6.10 缓存路由组件"></a>6.10 缓存路由组件</h3><ol><li>组件：让不展示的路由组件保持挂载，不被销毁(在展示组件的地方挂载) </li><li>代码示例</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">  &lt;!-- </span><br><span class="line">缓存多个</span><br><span class="line">&lt;keep-alive :include=&quot;[&#x27;News&#x27;,&#x27;Message&#x27;]&quot;&gt;</span><br><span class="line">--&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p><strong>include</strong> &#x3D;&gt; 组件名 </p><h3 id="6-11-两个新的生命周期钩子"><a href="#6-11-两个新的生命周期钩子" class="headerlink" title="6.11 两个新的生命周期钩子"></a>6.11 两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态</li><li>具体名字： <ol><li><code>activated</code> &#x3D;&gt; 路由组件被激活时触发</li><li><code>deactivated</code> &#x3D;&gt; 路由组件失活时触发</li></ol></li></ol><h3 id="6-12-路由守卫"><a href="#6-12-路由守卫" class="headerlink" title="6.12 路由守卫"></a>6.12 路由守卫</h3><ol><li>作用：对路由进行权限控制 </li><li>分类 <ul><li>全局守卫</li><li>独享守卫</li><li>组件内守卫</li></ul></li><li>代码示例 <ul><li>全局守卫</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>独享守卫</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>组件内守卫</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-13-路由器的两种工作方式"><a href="#6-13-路由器的两种工作方式" class="headerlink" title="6.13 路由器的两种工作方式"></a>6.13 路由器的两种工作方式</h3><ol start="4"><li>对于一个<code>url</code>，<code>hash</code> &#x3D;&gt; #及其之后的内容 </li><li><code>hash</code>值不会包含在HTTP请求中，即<code>hash</code>值不会带给服务器 </li><li><code>hash</code>模式： <ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><code>history</code>模式： <ol><li>地址干净，美观 。</li><li>兼容性和<code>hash</code>模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li><li>开启方式：创建路由器时配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mode:&#x27;history&#x27;</span><br><span class="line">mode:&#x27;hash&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2023/07/10/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/07/10/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> CodeClean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客建站记录</title>
      <link href="/2023/07/10/%E7%BD%91%E7%AB%99%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/07/10/%E7%BD%91%E7%AB%99%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Part1-Hexo-GitHub建站（已完成）"><a href="#Part1-Hexo-GitHub建站（已完成）" class="headerlink" title="Part1:Hexo+GitHub建站（已完成）"></a>Part1:Hexo+GitHub建站（已完成）</h2><h3 id="一、前置条件："><a href="#一、前置条件：" class="headerlink" title="一、前置条件："></a>一、前置条件：</h3><p>本地电脑安装git，node18，gitee&#x2F;github创建项目，github生成ssh密钥（本地生成，github配置）</p><h3 id="二、搭建博客的命令如下："><a href="#二、搭建博客的命令如下：" class="headerlink" title="二、搭建博客的命令如下："></a>二、搭建博客的命令如下：</h3><ol><li>检查本地的git的版本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shili@shiliu MINGW64 /e/02-Interview/00-blog</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git -v</span></span><br><span class="line">git version 2.41.0.windows.1</span><br></pre></td></tr></table></figure><ol><li>检查本地的node版本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shili@shiliu MINGW64 /e/02-Interview/00-blog</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node -v</span></span><br><span class="line">v18.16.0</span><br></pre></td></tr></table></figure><ol><li>检查本地的npm版本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shili@shiliu MINGW64 /e/02-Interview/00-blog</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm -v</span></span><br><span class="line">9.5.1</span><br></pre></td></tr></table></figure><ol><li>本地安装hexo（本地已经安装过hexo了）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shili@shiliu MINGW64 /e/02-Interview/00-blog</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm i hexo-cli -g</span></span><br><span class="line"></span><br><span class="line">changed 54 packages in 33s</span><br><span class="line"></span><br><span class="line">13 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br></pre></td></tr></table></figure><ol><li>查看hexo的版本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">shili@shiliu MINGW64 /e/02-Interview/00-blog</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo -v</span></span><br><span class="line">hexo-cli: 4.3.1</span><br><span class="line">os: win32 10.0.22621</span><br><span class="line">node: 18.16.0</span><br><span class="line">acorn: 8.8.2</span><br><span class="line">ada: 1.0.4</span><br><span class="line">ares: 1.19.0</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">cldr: 42.0</span><br><span class="line">icu: 72.1</span><br><span class="line">llhttp: 6.0.10</span><br><span class="line">modules: 108</span><br><span class="line">napi: 8</span><br><span class="line">nghttp2: 1.52.0</span><br><span class="line">nghttp3: 0.7.0</span><br><span class="line">ngtcp2: 0.8.1</span><br><span class="line">openssl: 3.0.8+quic</span><br><span class="line">simdutf: 3.2.2</span><br><span class="line">tz: 2022g</span><br><span class="line">undici: 5.21.0</span><br><span class="line">unicode: 15.0</span><br><span class="line">uv: 1.44.2</span><br><span class="line">uvwasi: 0.0.15</span><br><span class="line">v8: 10.2.154.26-node.26</span><br><span class="line">zlib: 1.2.13</span><br></pre></td></tr></table></figure><ol><li>hexo本地命令初始化（时间会比较长，需要等待5分钟左右）（会从远程仓库将hexo的git仓库down到本地的文件夹下）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shili@shiliu MINGW64 /e/02-Interview/00-blog</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init</span></span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">warning hexo &gt; warehouse &gt; cuid@2.1.8: Cuid and other k-sortable and non-cryptographic ids (Ulid, ObjectId, KSUID, all UUIDs) are all insecure. Use @paralleldrive/cuid2 instead.</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure><ol><li>本地启动初始化的hexo项目</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shili@shiliu MINGW64 /e/02-Interview/00-blog</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo s</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://pmmiow1hs9.feishu.cn/space/api/box/stream/download/asynccode/?code=Njg2MzhmMzU2MTU4NDBlNTM3MWM1ZjAzY2IwYzVhMDZfRkJza21vaGNyRWhqMGNZUnhBRnJyN2tDN3JIZ0N5ZXVfVG9rZW46WmkxbGJIcWJlb3d1Zzd4SkJJSGM2TFFpbkNlXzE2OTQzNTM0MTE6MTY5NDM1NzAxMV9WNA" alt="img"></p><ol><li>修改项目中的_config.yml配置文件（配置相关的文件），补充远程git仓库与分支 如下图，</li></ol><p><img src="https://pmmiow1hs9.feishu.cn/space/api/box/stream/download/asynccode/?code=MjMxZTcwMTQzZDk3YzlhMzA1NjUwNjQyMjk0Nzg2ZTdfc1UwMEE4Z2JoMnFGNGZXcFBmdG1xVVRJR0FiNVBvWXFfVG9rZW46U0Vhb2JsMnk3b2gyOVN4OUlOZmNhRHVabmFmXzE2OTQzNTM0MTE6MTY5NDM1NzAxMV9WNA" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: 你的github地址</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><ol><li>提交到远程仓库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//安装 hexo-deployer-git 自动部署发布工具： </span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">//执行清理缓存命令</span><br><span class="line">hexo cli </span><br><span class="line"></span><br><span class="line">//生成静态页面</span><br><span class="line">hexo g </span><br><span class="line"></span><br><span class="line">//部署到远程仓库</span><br><span class="line">hexo d </span><br></pre></td></tr></table></figure><h3 id="三、主题（更新中）"><a href="#三、主题（更新中）" class="headerlink" title="三、主题（更新中）"></a>三、主题（更新中）</h3><p>主题官方文档：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>点击进入网站后，进入快速开始，页面展示会有三种安装方式 github，gitee，npm命令安装，此处进行npm安装，使用git安装方式进行安装，会出现一些bug，推荐使用npm安装。</p><p>npm安装命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">shili@shiliu MINGW64 /e/02-Interview/00-blog</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm i hexo-theme-butterfly</span></span><br><span class="line"></span><br><span class="line">added 41 packages, changed 17 packages, and audited 276 packages in 33s</span><br><span class="line"></span><br><span class="line">33 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"></span><br><span class="line">found 0 vulnerabilities</span><br></pre></td></tr></table></figure><p>安装完成后按下图所示进行操作，并修改配置文件中的theme为安装的主题，此处安装的主题为：butterfly</p><p><img src="https://pmmiow1hs9.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmIzMTQ0NWUwMzhkN2FhYTZmMmY0NjExZjE2ODcwYWNfRW5LQ1hodEtWRHFCWVlpMDFRMHhUVnFwb2lCN3BoaGpfVG9rZW46TkRPSmJRVHE5b2JpVjl4Zk5Sa2N1dmxzbnVlXzE2OTQzNTM0MTE6MTY5NDM1NzAxMV9WNA" alt="img"></p><p>安装报错：</p><p><a href="https://blog.csdn.net/blink182007/article/details/123892080">https://blog.csdn.net/blink182007/article/details/123892080</a></p><p>创建页面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//创建标签页面</span><br><span class="line">hexo new page tags</span><br><span class="line">//创建类别</span><br><span class="line">hexo new page categories</span><br><span class="line">//创建友链</span><br><span class="line">hexo new page link</span><br></pre></td></tr></table></figure><p>友链页面创建好之后，在Hexo博客目录中的source&#x2F;目录下，创建_data并新建文件link.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- class_name: 个人博客</span><br><span class="line">  class_desc: 十六的个人博客网站</span><br><span class="line">  link_list:</span><br><span class="line">    - name: github</span><br><span class="line">      link: https://github.com/shiliu001/</span><br><span class="line">      descr: 十六的github</span><br></pre></td></tr></table></figure><h2 id="Part2-服务器-域名建站（未完成）"><a href="#Part2-服务器-域名建站（未完成）" class="headerlink" title="Part2:服务器+域名建站（未完成）"></a>Part2:服务器+域名建站（未完成）</h2><p>三步走：</p><ol><li><p>服务器的环境配置；</p></li><li><p>Nginx的搭建与域名；</p></li><li><p>网站页面的优化以及访问速度的提升。</p><p>更新中！！！</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程系列</title>
      <link href="/2023/07/10/%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/07/10/%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git宝典</title>
      <link href="/2023/06/10/Git%E5%AE%9D%E5%85%B8/"/>
      <url>/2023/06/10/Git%E5%AE%9D%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a>Git学习笔记</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1664808255147-83c7e7ce-4e9c-4e1c-b3be-fe795386c67f.png#averageHue=%23f0f0f0&id=g8W1K&originHeight=759&originWidth=586&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>可以把一个版本控制系统（缩写VCS）理解为一个“数据库”，在需要的时候，它可以帮你完整地保存一个项目的快照。当你需要查看一个之前的快照（称之为“版本” ）时，版本控制系统可以显示出当前版本与上一个版本之间的所有改动的细节。</p><h1 id="Git和SVN区别"><a href="#Git和SVN区别" class="headerlink" title="Git和SVN区别"></a>Git和SVN区别</h1><h4 id="SVN集中式"><a href="#SVN集中式" class="headerlink" title="SVN集中式"></a>SVN集中式</h4><p>集中式版本控制系统需要找一个服务器作为大本营，所有的代码都需要提交到服务器上进行统一的管理。当你需要对代码进行改动时，需要先从服务器上下载一份拷贝，修改完成之后，还需要上传回服务器。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1664860795073-bc6d1122-a6fe-4795-8d24-0eff7e874ab9.png#averageHue=%23fdfdfd&id=BRGGn&originHeight=393&originWidth=647&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>SVN优缺点</p><p>优点：</p><ol><li>管理员也可以轻松掌控每个开发者的权限。</li><li>代码一致性非常高。</li><li>适合开发人数不多的项目开发。</li></ol><p>缺点：</p><ol><li>服务器压力太大，数据库容量暴增。</li><li>如果不能连接到服务器上，基本上不可以工作，看上面第二步，如果服务器不能连接上，就不能提</li><li>交，还原，对比等等</li></ol><h4 id="Git分布式"><a href="#Git分布式" class="headerlink" title="Git分布式"></a>Git分布式</h4><p>在分布式版本控制系统中，大家都拥有一个完整的版本库，不需要联网也可以提交修改，所以中心服务器就显得不那么重要了。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1664860886000-190ff380-0c46-48cf-91d2-12060100833b.png#averageHue=%23fcfcfc&id=I5L8F&originHeight=370&originWidth=508&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>注意：</p><p>Git记录版本历史只关心文件数据的整体是否发生变化。Git 不保存文件内容前后变化的差异数据。</p><p>Git优缺点</p><p>优点：</p><ol><li>适合分布式开发，强调个体。</li><li>公共服务器压力和数据量都不会太大。</li><li>速度快、灵活。</li><li>任意两个开发者之间可以很容易的解决冲突。</li><li>离线工作。</li></ol><p>缺点：</p><ol><li>学习周期相对而言比较长。</li><li>不符合常规思维。</li><li>易学难精，80&#x2F;20</li></ol><h1 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1664862641188-5b41ccba-cf27-4fa1-a983-6b238827f209.png#averageHue=%23f7f2ec&id=Ce9mt&originHeight=509&originWidth=786&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h4 id="四个工作区域"><a href="#四个工作区域" class="headerlink" title="四个工作区域"></a>四个工作区域</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1664862691483-506c2702-d306-4f15-b0c0-c1ad4d8de5db.png#averageHue=%230c0c05&id=FytE4&originHeight=340&originWidth=1172&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>Workspace： 工作区，就是你平时存放项目代码的地方</p><p>Index &#x2F; Stage： 暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</p><p>Repository： 仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</p><p>Remote： 远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><p>Git的工作流程一般是这样的：</p><ol><li>在工作目录中添加、修改文件；</li><li>将需要进行版本管理的文件放入暂存区域；</li><li>将暂存区域的文件提交到git仓库。</li></ol><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h4 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;gemingjia&quot;</span><br><span class="line">git config --global user.email &quot;gemingjia@163.com&quot;</span><br></pre></td></tr></table></figure><h4 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br><span class="line">git config user.name</span><br></pre></td></tr></table></figure><p>注意：</p><p>通过上面的命令设置的信息会保存在~&#x2F;.gitconfig文件中。</p><h1 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir tmp  #创建tmp目录</span><br><span class="line">git init   #初始化这个目录让Git对这个目录开始进行版本控制。</span><br></pre></td></tr></table></figure><p>提示：</p><p>git init 命令会在上述目录中创建一个名为 .git 的隐藏目录，并在其中创建一个版本库。该目录为文件，查看-&gt;显示隐藏目录。整个Git的精华都集中在这个目录中了，现在不先讲细节，只是体会一下使用Git的感觉，后续在详细介绍。</p><h1 id="文件的两种状态"><a href="#文件的两种状态" class="headerlink" title="文件的两种状态"></a>文件的两种状态</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1664864652161-87ec408f-4795-49df-8b3e-731ba2802428.png#averageHue=%23e9e4de&id=Hi9nn&originHeight=595&originWidth=2060&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>注意：</p><p>Git不关心文件两个版本之间的具体差别，而是关心文件的整体是否有改变，若文件被改变，在添加提交时就生成文件新版本的快照，而判断文件整体是否改变的方法就是用SHA-1算法计算文件的校验和。</p><h4 id="untracked未跟踪"><a href="#untracked未跟踪" class="headerlink" title="untracked未跟踪"></a>untracked未跟踪</h4><p>未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p><h4 id="tracked已跟踪"><a href="#tracked已跟踪" class="headerlink" title="tracked已跟踪"></a>tracked已跟踪</h4><p>被纳入版本控制</p><ul><li><code>Unmodified</code>文件已经入库，未修改,，即版本库中的文件快照内容与文件夹中完全一致.。这种类型的文件有两种去处，如果它被修改，而变为<code>Modified</code>，如果使用<code>git rm</code>移出版本库，则成为<code>Untracked</code>文件。</li><li><code>Modified</code>文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过<code>git add</code>可进入暂存<code>staged</code>状态，使用<code>git checkout</code> 则丢弃修改过，返回<code>unmodify</code>状态，这个<code>git checkout</code>即从库中取出文件，覆盖当前修改。</li><li><code>Staged</code>暂存状态。执行<code>git commit</code>则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为<code>Unmodify</code>状态。执行<code>git reset HEAD filename</code>取消暂存，文件状态为<code>Modified</code>。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1664864881694-676d63c1-0190-49e0-8fd7-f1c118401d52.png#averageHue=%23aab9a8&id=xRR8E&originHeight=728&originWidth=1047&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>注意：</p><ul><li>新建文件—&gt;Untracked</li><li>使用add命令将新建的文件加入到暂存区—&gt;Staged</li><li>使用commit命令将暂存区的文件提交到本地仓库—&gt;Unmodified</li><li>如果对Unmodified状态的文件进行修改—&gt; modified</li><li>如果对Unmodified状态的文件进行remove操作—&gt;Untracked</li></ul><h4 id="查看文件状态命令"><a href="#查看文件状态命令" class="headerlink" title="查看文件状态命令"></a>查看文件状态命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ul><li>-s： 简洁输出</li></ul><h1 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1664865961630-21b26c41-8eb1-4d8f-9e86-03464a0a78b8.png#averageHue=%23eee29c&id=T9E6z&originHeight=338&originWidth=895&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1664866058168-0889e7d5-9b7e-4d35-ad35-a12396212cbc.png#averageHue=%23f9f6f0&id=AcM5r&originHeight=369&originWidth=670&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h4 id="查看文件状态命令-1"><a href="#查看文件状态命令-1" class="headerlink" title="查看文件状态命令"></a>查看文件状态命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status -s</span><br></pre></td></tr></table></figure><h4 id="文件加入暂存区"><a href="#文件加入暂存区" class="headerlink" title="文件加入暂存区"></a>文件加入暂存区</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名</span><br></pre></td></tr></table></figure><p><code>git add .</code> 所有文件加入暂存区</p><h4 id="文件取消暂存区命令"><a href="#文件取消暂存区命令" class="headerlink" title="文件取消暂存区命令"></a>文件取消暂存区命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset 文件名</span><br></pre></td></tr></table></figure><h4 id="文件提交命令"><a href="#文件提交命令" class="headerlink" title="文件提交命令"></a>文件提交命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;提交信息&quot;</span><br></pre></td></tr></table></figure><h4 id="修改commit记录"><a href="#修改commit记录" class="headerlink" title="修改commit记录"></a>修改commit记录</h4><p>要改动Commit记录有几种方式。</p><ul><li>把.git目录整个删除（不建议）。</li><li>使用git rebase命令来改动历史记录。</li><li>先把 Commit用git reset命令删除，整理后再重新Commit。</li><li>使用–amend参数改动最后一次的Commit。</li></ul><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>–graph ： 查看分支合并图</li><li>–oneline : 标记把每一个提交压缩到了一行中</li></ul><h4 id="使用–amend参数进行Commit"><a href="#使用–amend参数进行Commit" class="headerlink" title="使用–amend参数进行Commit"></a>使用–amend参数进行Commit</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend  -m &quot;welcome to facebook&quot;</span><br></pre></td></tr></table></figure><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm 文件名</span><br></pre></td></tr></table></figure><p>用命令会删除暂存区的文件，直接删除不会删除暂存区的文件。</p><p>注意：</p><p>删除的文件只是删除工作目录的文件，我们的版本库里面还是存在的。 删除文件会把这个文件直接放入暂存区。</p><h4 id="恢复被删除的文件或目录"><a href="#恢复被删除的文件或目录" class="headerlink" title="恢复被删除的文件或目录"></a>恢复被删除的文件或目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout index.html</span><br></pre></td></tr></table></figure><p>注意：</p><p>当使用git checkout命令时，Git 会切换到指定的分支，但如果后面接的是文件名或路径，Git则不会切换分支，而是把文件从.git目录中复制一份到当前的工作目录。更精准地说，这个命令会把暂存区中的内容或文件拿来覆盖工作目录中。</p><h4 id="文件添加至忽略列"><a href="#文件添加至忽略列" class="headerlink" title="文件添加至忽略列"></a>文件添加至忽略列</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/ 表示当前文件所在的目录</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略public下的所有目录及文件</span></span><br><span class="line">/public/*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">不忽略/public/assets，就是特例的意思，assets文件不忽略</span></span><br><span class="line">!/public/assets</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略具体的文件</span></span><br><span class="line">index.class</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略所有的class</span></span><br><span class="line">*.class</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略 a.class b.class</span></span><br><span class="line">[ab].class</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>#匹配规则和linux文件匹配一样</li><li>#以斜杠“&#x2F;”开头表示目录</li><li>#以星号“*”通配多个字符</li><li>#以问号“?”通配单个字符</li><li>#以方括号“[]”包含单个字符的匹配列表</li><li>#以叹号“!”表示不忽略(跟踪)匹配到的文件或目录</li></ul><h4 id="获取执行过的命令"><a href="#获取执行过的命令" class="headerlink" title="获取执行过的命令"></a>获取执行过的命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h4 id="比较文件差异"><a href="#比较文件差异" class="headerlink" title="比较文件差异"></a>比较文件差异</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1664876920718-5b3c568e-c18b-45fc-966e-d68d16720f7a.png#averageHue=%23a3c9cc&id=BiC7f&originHeight=411&originWidth=922&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff [--cached]</span><br></pre></td></tr></table></figure><ul><li>—：标记原始文件</li><li>+++：标记新文件</li><li>@@：两个不同文件版本的上下文行号。</li><li>-： 原始文件删除改行</li><li>+：原始文件增加一行</li></ul><p>本地工作区和暂存区的diff信息：<code>git diff</code>或者 <code>git diff file</code></p><p>暂存区和版本库的diff信息（使用git add 将工作区修改保存到了暂存区后）：<code>git diff --cached</code></p><p>版本库中不同commit、分支的diff信息（使用git commit 将暂存区修改提交到了版本库）：<code>git diff commit1 commit2</code> 或 <code>git diff branch1 branch2</code></p><h4 id="还原文件"><a href="#还原文件" class="headerlink" title="还原文件"></a>还原文件</h4><p>对于修改的文件有三种情况：</p><ol><li>只是修改了文件，没有任何 Git 操作</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- aaa.txt</span><br></pre></td></tr></table></figure><ol><li>修改了文件，并提交到暂存区（即编辑之后，gitadd但没有gitadd但没有 git commit -m ….）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --oneline   <span class="comment"># 可以省略</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset HEAD   <span class="comment"># 回退到当前版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -- aaa.txt   <span class="comment"># aaa.txt为文件名</span></span></span><br></pre></td></tr></table></figure><ol><li>修改了文件，并提交到仓库区（即编辑之后，gitadd和gitadd和 git commit -m ….）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --oneline   <span class="comment"># 可以省略</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset HEAD^   <span class="comment"># 回退到上一个版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -- aaa.txt   <span class="comment"># aaa.txt为文件名</span></span></span><br></pre></td></tr></table></figure><h1 id="Git远程仓库"><a href="#Git远程仓库" class="headerlink" title="Git远程仓库"></a>Git远程仓库</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1664975947288-84837d58-7b86-4dbc-a042-eb427b246fce.png#averageHue=%23fefefc&id=H5Fv4&originHeight=285&originWidth=1030&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;项目名称&gt;&lt;url&gt;</span><br></pre></td></tr></table></figure><h4 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><h4 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 远程仓库地址url</span><br></pre></td></tr></table></figure><h4 id="移除无效的远程仓库"><a href="#移除无效的远程仓库" class="headerlink" title="移除无效的远程仓库"></a>移除无效的远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm  远程仓库名字</span><br></pre></td></tr></table></figure><p>此命令只是从本地移除远程仓库的记录，并不会真正影响到远程仓库。</p><h4 id="远程仓库-推送"><a href="#远程仓库-推送" class="headerlink" title="远程仓库_推送"></a>远程仓库_推送</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [remote-name][branch-name]</span><br></pre></td></tr></table></figure><h4 id="从远程仓库中抓取"><a href="#从远程仓库中抓取" class="headerlink" title="从远程仓库中抓取"></a>从远程仓库中抓取</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure><p>注意：</p><p>git fetch是从远程仓库获取最新版本到本地仓库，不会自动merge，想看见文件就需要手动进行合并文件 git merge 仓库名&#x2F;分支。</p><h4 id="从远程仓库中拉取"><a href="#从远程仓库中拉取" class="headerlink" title="从远程仓库中拉取"></a>从远程仓库中拉取</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>注意：</p><p>git pull是从远程仓库获取最新版本到本地仓库，会自动merge。</p><h4 id="多人协作冲突问题"><a href="#多人协作冲突问题" class="headerlink" title="多人协作冲突问题"></a>多人协作冲突问题</h4><p>先pull再push</p><h4 id="SSH协议推送"><a href="#SSH协议推送" class="headerlink" title="SSH协议推送"></a>SSH协议推送</h4><p>配置SSH协议</p><ol><li>使用命令ssh-keygen -t rsa生成公钥和私钥</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>注意：</p><p>执行完成后在window本地用户.ssh目录(C:\Users\用户名.ssh)下生成如下名称的公钥和私钥。</p><ol><li>复制公钥文件内容至服务器上</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1665039356615-12b80c2e-4f57-4445-93ba-242da219c9d2.png#averageHue=%23faf7f7&id=CrjoN&originHeight=129&originWidth=265&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>github&#x2F;gitee添加ssh公钥</p><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>-r : 列出所有远程分支</li><li>-a ：列出所有本地分支和远程分支</li></ul><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名字</span><br></pre></td></tr></table></figure><p>-m 修改分支名字</p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout ge1</span><br></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1665040579043-d4cda2bf-e468-4b07-b76b-dc1624cf8aa2.png#averageHue=%23f5f4f3&id=zUPRs&originHeight=559&originWidth=810&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge ge1</span><br></pre></td></tr></table></figure><p>切换分支Git干了什么</p><ol><li>更新暂存区和工作目录</li><li>变更HEAD的位置</li></ol><h4 id="删除本地仓库分支"><a href="#删除本地仓库分支" class="headerlink" title="删除本地仓库分支"></a>删除本地仓库分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d b1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1665047985652-f542a5dd-9d0f-46b2-bdad-2f59a9bf175b.png#averageHue=%232e303c&id=WtZiw&originHeight=51&originWidth=592&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h4 id="恢复删除的分支"><a href="#恢复删除的分支" class="headerlink" title="恢复删除的分支"></a>恢复删除的分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch new_cat 968a614</span><br></pre></td></tr></table></figure><h4 id="删除远程仓库分支"><a href="#删除远程仓库分支" class="headerlink" title="删除远程仓库分支"></a>删除远程仓库分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push 仓库名 -d 分支名字</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1665048668362-2661e493-d515-46b7-8453-a6ed06cbf107.png#averageHue=%23fafaf4&id=ib3V5&originHeight=716&originWidth=1058&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h4 id="列出已有标签"><a href="#列出已有标签" class="headerlink" title="列出已有标签"></a>列出已有标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag 标签名字</span><br></pre></td></tr></table></figure><h4 id="查看标签信息"><a href="#查看标签信息" class="headerlink" title="查看标签信息"></a>查看标签信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show 标签名</span><br></pre></td></tr></table></figure><h4 id="标签推送远程仓库"><a href="#标签推送远程仓库" class="headerlink" title="标签推送远程仓库"></a>标签推送远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [remote] [tag]</span><br></pre></td></tr></table></figure><h4 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h4><p>新建一个分支，指向某个tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h4 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d [tag]</span><br></pre></td></tr></table></figure><h4 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push 仓库名字:refs/tags/标签名字</span><br></pre></td></tr></table></figure><h1 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git Flow"></a>Git Flow</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1665063732927-1b289b6e-210a-4b16-b547-47d2a1af9fad.png#averageHue=%23ebebeb&id=iEMvh&originHeight=2500&originWidth=1857&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>解释：</p><ul><li>master 主干分支，开发完成的上线的项目版本</li><li>hotixes 热部署分支，进行主干分支的补丁操作</li><li>release 预部署分支，测试工程师的调用的分支</li><li>develop 开发分支，开发源代码分支</li><li>feature 功能分支，你们调用分支</li></ul><h3 id="Master-Devlop-分支"><a href="#Master-Devlop-分支" class="headerlink" title="Master&#x2F;Devlop 分支"></a>Master&#x2F;Devlop 分支</h3><p>所有在Master分支上的Commit应该打上Tag，一般情况下Master不存在Commit，Devlop分支基于Master分支创建</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1665063732924-3a8891b0-9e86-405c-8d2a-af64474244c3.png#averageHue=%23241e18&id=NcVcD&originHeight=148&originWidth=614&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="Feature-分支"><a href="#Feature-分支" class="headerlink" title="Feature 分支"></a>Feature 分支</h3><p>Feature分支做完后，必须合并回Develop分支, 合并完分支后一般会删点这个Feature分支，但是我们也可以保留。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1665063732979-e9a0a8ff-8179-4834-a947-5b725a76426a.png#averageHue=%2315110e&id=myLDk&originHeight=268&originWidth=614&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="Release-分支"><a href="#Release-分支" class="headerlink" title="Release 分支"></a>Release 分支</h3><p>Release分支基于Develop分支创建，打完Release分之后，我们可以在这个Release分支上测试，修改Bug等。同时，其它开发人员可以基于开发新的Feature 发布Release分支时，合并Release到Master和Develop， 同时在Master分支上打个Tag记住Release版本号，然后可以删除Release分支了。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1665063733111-9932851c-abfb-4ca9-82a9-9ec356e52e89.png#averageHue=%2318150f&id=Mzxmk&originHeight=320&originWidth=614&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>注意：</p><p>一旦打了Release分支之后不要从Develop分支上合并新的改动到Release分支。</p><h3 id="Hotfix-分支"><a href="#Hotfix-分支" class="headerlink" title="Hotfix 分支"></a>Hotfix 分支</h3><p>hotfix分支基于Master分支创建，开发完后需要合并回Master和Develop分支，同时在Master上打一个tag。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28233658/1665063732981-55f82ddf-0b34-493b-9128-cd2a90f66376.png#averageHue=%2316130f&id=R7n5M&originHeight=380&originWidth=614&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git宝典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2023/06/10/SpringMvC/"/>
      <url>/2023/06/10/SpringMvC/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC-概述"><a href="#SpringMVC-概述" class="headerlink" title="SpringMVC 概述"></a>SpringMVC 概述</h1><p>• Spring 为展现层提供的基于 MVC 设计理念的优秀的 Web 框架，是目前最主流的 MVC 框架之一<br>• Spring3.0 后全面超越 Struts2，成为最优秀的 MVC 框架<br>• Spring MVC 通过一套 MVC 注解，让 POJO 成为处理请 求的控制器，而无须实现任何接口。<br>• 支持 REST 风格的 URL 请求<br>• 采用了松散耦合可插拔组件结构，比其他 MVC 框架更具 扩展性和灵活性 </p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p> • 步骤：<br>– 加入 jar 包<br>– 在 web.xml 中配置 DispatcherServlet<br>– 加入 Spring MVC 的配置文件<br>– 编写处理请求的处理器，并标识为处理器 – 编写视图  </p><h3 id="HelloWorld：加入-jar-包"><a href="#HelloWorld：加入-jar-包" class="headerlink" title="HelloWorld：加入 jar 包"></a>HelloWorld：加入 jar 包</h3><p> • jar 包：<br>– commons-logging-1.1.3.jar<br>– spring-aop-4.0.0.RELEASE.jar<br>       – spring-beans-4.0.0.RELEASE.jar<br>– spring-context-4.0.0.RELEASE.jar<br>– spring-core-4.0.0.RELEASE.jar<br>– spring-expression-4.0.0.RELEASE.jar<br>– spring-web-4.0.0.RELEASE.jar<br>– spring-webmvc-4.0.0.RELEASE.jar  </p><h3 id="HelloWorld：配置-web-xml"><a href="#HelloWorld：配置-web-xml" class="headerlink" title="HelloWorld：配置 web.xml"></a>HelloWorld：配置 web.xml</h3><p> • 配置 DispatcherServlet ：DispatcherServlet 默认加载 &#x2F;WEBINF&#x2F;.xml 的 Spring 配置文件, 启动 WEB 层 的 Spring 容器。可以通过 contextConfigLocation 初始化参数自定 义配置文件的位置和名称</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621991022220-2b6e385a-5ada-451d-b3f5-42d0bc6d2757.png#averageHue=%23dad6d0&clientId=uc36fd273-811a-4&from=paste&height=363&id=ufead822e&originHeight=568&originWidth=1311&originalType=binary&ratio=1&rotation=0&showTitle=false&size=552555&status=done&style=none&taskId=u3bbfb138-6e68-4a10-acb8-b39cfff37f7&title=&width=837.5" alt="image.png"></p><h3 id="HelloWorld：创建-Spring-MVC-配置文件"><a href="#HelloWorld：创建-Spring-MVC-配置文件" class="headerlink" title="HelloWorld：创建 Spring MVC 配置文件"></a>HelloWorld：创建 Spring MVC 配置文件</h3><ul><li><p>配置自动扫描的包  <img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621991076083-afffaaf2-3573-467f-bfb4-d87f3b11b958.png#averageHue=%23f5f6f1&clientId=uc36fd273-811a-4&from=paste&height=79&id=u5fd3baef&originHeight=157&originWidth=1428&originalType=binary&ratio=1&rotation=0&showTitle=false&size=197830&status=done&style=none&taskId=ue085f9ff-1129-464f-aaf1-8a41dbab90a&title=&width=714" alt="image.png"></p></li><li><p>配置视图解析器：视图名称解析器：将视图逻辑 名解析为: &#x2F;WEB-INF&#x2F;pages&#x2F;.jsp</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621991124474-a711aa9e-b8da-48b7-9d64-5b8d14f07f11.png#averageHue=%23f4f5ee&clientId=uc36fd273-811a-4&from=paste&height=131&id=u05dce098&originHeight=261&originWidth=1426&originalType=binary&ratio=1&rotation=0&showTitle=false&size=341664&status=done&style=none&taskId=u1dd6788a-a427-4868-8e81-1d83f1702bb&title=&width=713" alt="image.png"></p><h3 id="HelloWorld：创建请求处理器类"><a href="#HelloWorld：创建请求处理器类" class="headerlink" title="HelloWorld：创建请求处理器类"></a>HelloWorld：创建请求处理器类</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621991173338-8b48b483-6a1c-4501-92b0-4fa65f0def24.png#averageHue=%23dad6cf&clientId=uc36fd273-811a-4&from=paste&height=328&id=uf4242b9d&originHeight=603&originWidth=1009&originalType=binary&ratio=1&rotation=0&showTitle=false&size=428409&status=done&style=none&taskId=u03b633b8-48eb-45b5-974d-db9087f34cd&title=&width=549.5" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621991205594-31d45c3e-4827-407f-a416-08b82cbaeee7.png#averageHue=%23f5f4f3&clientId=uc36fd273-811a-4&from=paste&height=539&id=u69ccb34e&originHeight=883&originWidth=1422&originalType=binary&ratio=1&rotation=0&showTitle=false&size=300042&status=done&style=none&taskId=u486f4adc-9b27-4a9a-bacc-925df182837&title=&width=868" alt="image.png"></p><h1 id="使用-RequestMapping-映射请求"><a href="#使用-RequestMapping-映射请求" class="headerlink" title="使用 @RequestMapping 映射请求"></a>使用 @RequestMapping 映射请求</h1><p> • Spring MVC 使用 @RequestMapping 注解为控制器指定可 以处理哪些 URL 请求<br> • 在控制器的类定义及方法定义处都可标注  </p><p> @RequestMapping<br>– 类定义处：提供初步的请求映射信息。相对于 WEB 应用的根目录<br>– 方法处：提供进一步的细分映射信息。相对于类定义处的 URL。若 类定义处未标注 @RequestMapping，则方法处标记的 URL 相对于 WEB 应用的根目录 </p><p> • DispatcherServlet 截获请求后，就通过控制器上<br>@RequestMapping 提供的映射信息确定请求所对应的处理 方法  </p><h2 id="使用-RequestMapping-映射请求示例"><a href="#使用-RequestMapping-映射请求示例" class="headerlink" title="使用 @RequestMapping 映射请求示例"></a>使用 @RequestMapping 映射请求示例</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621991575488-b4be6130-1df4-4291-a4c4-c8040e1813a2.png#averageHue=%23d8d3c7&clientId=uc36fd273-811a-4&from=paste&height=463&id=ud6efec56&originHeight=760&originWidth=1417&originalType=binary&ratio=1&rotation=0&showTitle=false&size=636891&status=done&style=none&taskId=uc4427d36-ab85-4ba5-804b-815f53f4062&title=&width=862.5" alt="image.png"></p><h2 id="映射请求参数、请求方法或请求头"><a href="#映射请求参数、请求方法或请求头" class="headerlink" title="映射请求参数、请求方法或请求头"></a>映射请求参数、请求方法或请求头</h2><p> • 标准的 HTTP 请求报头  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621991646647-106b9e4f-687f-427a-b216-ddda93bcc0e0.png#averageHue=%23f7f6f5&clientId=uc36fd273-811a-4&from=paste&height=347&id=ua273b257&originHeight=694&originWidth=1359&originalType=binary&ratio=1&rotation=0&showTitle=false&size=468212&status=done&style=none&taskId=uc9126b45-60a4-4f3e-9c32-fd2101f73a8&title=&width=679.5" alt="image.png"></p><p> • @RequestMapping 除了可以使用请求 URL 映射请求外， 还可以使用请求方法、请求参数及请求头映射请求<br> • @RequestMapping 的 value、method、params 及 heads 分别表示请求 URL、请求方法、请求参数及请求头的映射条 件，他们之间是与的关系，联合使用多个条件可让请求映射 更加精确化。<br> • params 和 headers支持简单的表达式：<br>– param1: 表示请求必须包含名为 param1 的请求参数<br>– !param1: 表示请求不能包含名为 param1 的请求参数<br>– param1 !&#x3D; value1: 表示请求包含名为 param1 的请求参数，但其值 不能为 value1<br>– {“param1&#x3D;value1”, “param2”}: 请求必须包含名为 param1 和param2 的两个请求参数，且 param1 参数的值必须为 value1 </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621991749899-ef2f9c58-ea02-4233-b5d5-d6133c201d96.png#averageHue=%23d9d6d0&clientId=uc36fd273-811a-4&from=paste&height=275&id=u4ec3b543&originHeight=550&originWidth=1402&originalType=binary&ratio=1&rotation=0&showTitle=false&size=383472&status=done&style=none&taskId=u364168e7-3875-4dea-8bac-58fc990020e&title=&width=701" alt="image.png"></p><h2 id="使用-RequestMapping-映射请求-1"><a href="#使用-RequestMapping-映射请求-1" class="headerlink" title="使用 @RequestMapping 映射请求"></a>使用 @RequestMapping 映射请求</h2><p> • Ant 风格资源地址支持 3 种匹配符：<br>– ?：匹配文件名中的一个字符<br>– *：匹配文件名中的任意字符<br>– <strong>：</strong> 匹配多层路径  </p><p> • @RequestMapping 还支持 Ant 风格的 URL：<br>– &#x2F;user&#x2F;*&#x2F;createUser: 匹配 &#x2F;user&#x2F;aaa&#x2F;createUser、&#x2F;user&#x2F;bbb&#x2F;createUser 等 URL<br>– &#x2F;user&#x2F;**&#x2F;createUser: 匹配 &#x2F;user&#x2F;createUser、&#x2F;user&#x2F;aaa&#x2F;bbb&#x2F;createUser 等 URL<br>– &#x2F;user&#x2F;createUser??: 匹配 &#x2F;user&#x2F;createUseraa、&#x2F;user&#x2F;createUserbb 等 URL </p><h2 id="PathVariable-映射-URL-绑定的占位符"><a href="#PathVariable-映射-URL-绑定的占位符" class="headerlink" title="@PathVariable 映射 URL 绑定的占位符"></a>@PathVariable 映射 URL 绑定的占位符</h2><p> • 带占位符的 URL 是 Spring3.0 新增的功能，该功能在 SpringMVC 向 REST 目标挺进发展过程中具有里程碑的 意义<br> • 通过 @PathVariable 可以将 URL 中占位符参数绑定到控 制器处理方法的入参中：URL 中的 {xxx} 占位符可以通过 @PathVariable(“xxx”) 绑定到操作方法的入参中。 </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621992250048-11762734-7834-44fd-a2c6-1b4f1b4e30c4.png#averageHue=%23deddd7&clientId=uc36fd273-811a-4&from=paste&height=124&id=u5b8fc02c&originHeight=247&originWidth=1246&originalType=binary&ratio=1&rotation=0&showTitle=false&size=300799&status=done&style=none&taskId=ub71f5e62-bf38-4253-8e1b-537dc130670&title=&width=623" alt="image.png"></p><h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><p> • REST：即 Representational State Transfer。（资源）表现层状态转化。是目前 最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便， 所以正得到越来越多网站的采用  </p><p> • 资源（Resources）：网络上的一个实体，或者说是网络上的一个具体信息。它 可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。 可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的 URI 。要 获取这个资源，访问它的URI就可以，因此 URI 即为每一个资源的独一无二的识 别符。  </p><p> • 表现层（Representation）：把资源具体呈现出来的形式，叫做它的表现层 （Representation）。比如，文本可以用 txt 格式表现，也可以用 HTML 格 式、XML 格式、JSON 格式表现，甚至可以采用二进制格式。  </p><p> • 状态转化（State Transfer）：每发出一个请求，就代表了客户端和服务器的一 次交互过程。HTTP协议，是一个无状态协议，即所有的状态都保存在服务器 端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“ 状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是 “ 表现层状态转化” 。具体说，就是 HTTP 协议里面，四个表示操作方式的动 词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET 用来获 取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。  </p><p> • 示例：<br>– &#x2F;order&#x2F;1 HTTP GET ：得到 id &#x3D; 1 的 order<br>– &#x2F;order&#x2F;1 HTTP DELETE：删除 id &#x3D; 1的 order<br>– &#x2F;order&#x2F;1 HTTP PUT：更新id &#x3D; 1的 order<br>– &#x2F;order HTTP POST：新增 order  </p><p> • HiddenHttpMethodFilter：<br>浏览器 form 表单只支持 GET 与 POST 请求，而DELETE、PUT 等 method 并不支 持，Spring3.0 添加了一个过滤器，可以将这些请求转换 为标准的 http 方法，使得支持 GET、POST、PUT 与 DELETE 请求。 </p><h2 id="PathVariable-绑定-URL-占位符到入参"><a href="#PathVariable-绑定-URL-占位符到入参" class="headerlink" title="@PathVariable 绑定 URL 占位符到入参"></a>@PathVariable 绑定 URL 占位符到入参</h2><p> • 带占位符的 URL 是 Spring3.0 新增的功能，该功能在 SpringMVC 向 REST 目标挺进发展过程中具有里程碑的 意义<br> • 通过 @PathVariable 可以将 URL 中占位符参数绑定到控 制器处理方法的入参中：URL 中的 {xxx} 占位符可以通过 @PathVariable(“xxx”) 绑定到操作方法的入参中。  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621992520465-71fa7a3b-bef3-4c26-b953-ebf8085a138d.png#averageHue=%23dad7d2&clientId=uc36fd273-811a-4&from=paste&height=153&id=u32588384&originHeight=306&originWidth=1212&originalType=binary&ratio=1&rotation=0&showTitle=false&size=302322&status=done&style=none&taskId=u9002b34d-2179-465c-be9a-6b415b726c1&title=&width=606" alt="image.png"></p><h1 id="请求处理方法签名"><a href="#请求处理方法签名" class="headerlink" title="请求处理方法签名"></a>请求处理方法签名</h1><p> • Spring MVC 通过分析处理方法的签名，将 HTTP 请求信 息绑定到处理方法的相应人参中。  </p><p> • Spring MVC 对控制器处理方法签名的限制是很宽松的， 几乎可以按喜欢的任何方式对方法进行签名。  </p><p> • 必要时可以对方法及方法入参标注相应的注解（ @PathVariable 、@RequestParam、@RequestHeader 等）、Spring MVC 框架会将 HTTP 请求的信息绑定到相应的方法入参 中，并根据方法的返回值类型做出相应的后续处理。  </p><h2 id="使用-RequestParam-绑定请求参数值"><a href="#使用-RequestParam-绑定请求参数值" class="headerlink" title="使用 @RequestParam 绑定请求参数值"></a>使用 @RequestParam 绑定请求参数值</h2><p> • 在处理方入参处使用 @RequestParam 可以把请求参 数传递给请求方法<br>     – value：参数名<br>  – required：是否必须。默认为 true, 表示请求参数中必须包含对应 的参数，若不存在，将抛出异常 。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621992729241-8d8bd38b-fdd5-4e90-b514-50ed61e662bc.png#averageHue=%23d9d7d0&clientId=uc36fd273-811a-4&from=paste&height=159&id=u77d0a343&originHeight=265&originWidth=1420&originalType=binary&ratio=1&rotation=0&showTitle=false&size=267546&status=done&style=none&taskId=u5a664a9c-bd01-4d0e-b698-63a90355dfc&title=&width=851" alt="image.png"></p><h2 id="使用-RequestHeader-绑定请求报头的属性值"><a href="#使用-RequestHeader-绑定请求报头的属性值" class="headerlink" title="使用 @RequestHeader 绑定请求报头的属性值"></a>使用 @RequestHeader 绑定请求报头的属性值</h2><p> • 请求头包含了若干个属性，服务器可据此获知客户端的信 息，通过 @RequestHeader 即可将请求头中的属性值绑 定到处理方法的入参中  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621992789982-d7a0cfec-7987-4ac5-83ea-74328d11f3c6.png#averageHue=%23dedcd5&clientId=uc36fd273-811a-4&from=paste&height=158&id=u8cd9903f&originHeight=223&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=255091&status=done&style=none&taskId=ue75fd194-8a88-4f29-933f-b1f11447c53&title=&width=820.5" alt="image.png"></p><h2 id="使用-CookieValue-绑定请求中的-Cookie-值"><a href="#使用-CookieValue-绑定请求中的-Cookie-值" class="headerlink" title="使用 @CookieValue 绑定请求中的 Cookie 值"></a>使用 @CookieValue 绑定请求中的 Cookie 值</h2><p> • @CookieValue 可让处理方法入参绑定某个 Cookie 值  </p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621992855707-8fd939ef-ea57-4907-8708-e5fc604f9388.png#averageHue=%23e1e0da&clientId=uc36fd273-811a-4&from=paste&height=159&id=ua372e280&originHeight=250&originWidth=1363&originalType=binary&ratio=1&rotation=0&showTitle=false&size=253129&status=done&style=none&taskId=ua526273b-47da-4ed3-b0b0-9d510527d6f&title=&width=868.5" alt="image.png"></h2><h2 id="使用-POJO-对象绑定请求参数值"><a href="#使用-POJO-对象绑定请求参数值" class="headerlink" title="使用 POJO 对象绑定请求参数值"></a>使用 POJO 对象绑定请求参数值</h2><p> • Spring MVC 会按请求参数名和 POJO 属性名进行自动匹 配，自动为该对象填充属性值。支持级联属性。 如：dept.deptId、dept.address.tel 等。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621992946064-b4cb5ed0-27fa-49a7-acf8-696805257e39.png#averageHue=%23d8d3cc&clientId=uc36fd273-811a-4&from=paste&height=208&id=u52294a31&originHeight=306&originWidth=1228&originalType=binary&ratio=1&rotation=0&showTitle=false&size=254174&status=done&style=none&taskId=u5fff0009-1b95-4643-bd41-59492ef7b09&title=&width=833" alt="image.png"></p><h2 id="使用-Servlet-API-作为入参"><a href="#使用-Servlet-API-作为入参" class="headerlink" title="使用 Servlet API 作为入参"></a>使用 Servlet API 作为入参</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621992996904-9eaeb313-cb7a-4a2a-9523-3bb402f63e83.png#averageHue=%23faf9f8&clientId=uc36fd273-811a-4&from=paste&height=505&id=u110b9534&originHeight=808&originWidth=1416&originalType=binary&ratio=1&rotation=0&showTitle=false&size=816670&status=done&style=none&taskId=u74c2a672-2840-4eb2-a36a-2e9db128789&title=&width=885" alt="image.png"></p><h2 id="MVC-的-Handler-方法可以接受-哪些-ServletAPI-类型的参数"><a href="#MVC-的-Handler-方法可以接受-哪些-ServletAPI-类型的参数" class="headerlink" title="MVC 的 Handler 方法可以接受 哪些 ServletAPI 类型的参数"></a>MVC 的 Handler 方法可以接受 哪些 ServletAPI 类型的参数</h2><p> • HttpServletRequest<br> • HttpServletResponse<br> • HttpSession<br> • java.security.Principal<br> • Locale • InputStream<br> • OutputStream<br> • Reader<br> • Writer    </p><h1 id="处理模型数据"><a href="#处理模型数据" class="headerlink" title="处理模型数据"></a>处理模型数据</h1><p> • Spring MVC 提供了以下几种途径输出模型数据：  </p><p> – ModelAndView: 处理方法返回值类型为 ModelAndView 时, 方法体即可通过该对象添加模型数据<br> – Map 及 Model: 入参为 org.springframework.ui.Model、org.springframework.ui. ModelMap 或 java.uti.Map 时，处理方法返回时，Map 中的数据会自动添加到模型中。<br> – @SessionAttributes: 将模型中的某个属性暂存到 HttpSession 中，以便多个请求之间可以共享这个属性<br> – @ModelAttribute: 方法入参标注该注解后, 入参的对象 就会放到数据模型中 。</p><h3 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h3><p> • 控制器处理方法的返回值如果为 ModelAndView, 则其既 包含视图信息，也包含模型数据信息。<br> • 添加模型数据:<br>– MoelAndView addObject(String attributeName, Object attributeValue)<br>– ModelAndView addAllObject(Map modelMap) </p><p> • 设置视图:<br>– void setView(View view)<br>– void setViewName(String viewName)  </p><h3 id="Map-及-Model"><a href="#Map-及-Model" class="headerlink" title="Map 及 Model"></a>Map 及 Model</h3><p> • Spring MVC 在内部使用了一个 org.springframework.ui.Model 接口存 储模型数据 </p><p> • 具体步骤  </p><p> – Spring MVC 在调用方法前会创建一个隐 含的模型对象作为模型数据的存储容器。<br> – 如果方法的入参为 Map 或 Model 类 型，Spring MVC 会将隐含模型的引用传 递给这些入参。在方法体内，开发者可以通过这个入参对象访问到模型中的所有数 据，也可以向模型中添加新的属性数据   </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621993498268-e90ad390-6f7f-4778-a347-f544b5936c0d.png#averageHue=%23e5deb4&clientId=uc36fd273-811a-4&from=paste&height=616&id=u5df4df8f&originHeight=616&originWidth=484&originalType=binary&ratio=1&rotation=0&showTitle=false&size=314770&status=done&style=none&taskId=udd3e1790-bc9a-4d52-bc27-796d3c18f0d&title=&width=484" alt="image.png"></p><h3 id="Map-及-Model-示例"><a href="#Map-及-Model-示例" class="headerlink" title="Map 及 Model 示例"></a>Map 及 Model 示例</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621993538628-d58746c5-9ea1-4144-9087-7cea5383b745.png#averageHue=%23fbfafa&clientId=uc36fd273-811a-4&from=paste&height=371&id=uc0210907&originHeight=741&originWidth=1312&originalType=binary&ratio=1&rotation=0&showTitle=false&size=591506&status=done&style=none&taskId=u5abccf14-9192-48ff-a5c4-296d83d4213&title=&width=656" alt="image.png"></p><h3 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h3><p> • 若希望在多个请求之间共用某个模型属性数据，则可以在 控制器类上标注一个 @SessionAttributes, Spring MVC 将在模型中对应的属性暂存到 HttpSession 中。  </p><p> • @SessionAttributes 除了可以通过属性名指定需要放到会 话中的属性外，还可以通过模型属性的对象类型指定哪些 模型属性需要放到会话中  </p><p> – @SessionAttributes(types&#x3D;User.class) 会将隐含模型中所有类型 为 User.class 的属性添加到会话中。<br> – @SessionAttributes(value&#x3D;{“user1”, “user2”})<br> – @SessionAttributes(types&#x3D;{User.class, Dept.class})<br>– @SessionAttributes(value&#x3D;{“user1”, “user2”}, types&#x3D;{Dept.class})  </p><h3 id="SessionAttributes-示例"><a href="#SessionAttributes-示例" class="headerlink" title="@SessionAttributes 示例"></a>@SessionAttributes 示例</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621993847300-5906f420-85ec-41fe-96d4-5791732e1b86.png#averageHue=%23e8e8e3&clientId=uc36fd273-811a-4&from=paste&height=350&id=u58db3b76&originHeight=570&originWidth=1419&originalType=binary&ratio=1&rotation=0&showTitle=false&size=832483&status=done&style=none&taskId=ub9db63d0-eff3-4d23-b218-7911cc0368c&title=&width=871.5" alt="image.png"></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621993874873-f62b0976-8c71-43fe-8625-52b04e0cd70c.png#averageHue=%23fbfaf9&clientId=uc36fd273-811a-4&from=paste&height=544&id=u23110072&originHeight=919&originWidth=1432&originalType=binary&ratio=1&rotation=0&showTitle=false&size=250921&status=done&style=none&taskId=uc226885f-41f3-406e-abad-7c9d6df10e9&title=&width=847" alt="image.png"></h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621993908670-8e42f253-6cfd-47f4-b95e-3ee2a1c63390.png#averageHue=%23fbfaf9&clientId=uc36fd273-811a-4&from=paste&height=549&id=ud9eca09d&originHeight=910&originWidth=1440&originalType=binary&ratio=1&rotation=0&showTitle=false&size=227427&status=done&style=none&taskId=u83faeb83-5467-4185-8e64-7c5a7c7ac39&title=&width=869" alt="image.png"></p><h3 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h3><p> • 在方法定义上使用 @ModelAttribute 注解：Spring MVC 在调用目标处理方法前，会先逐个调用在方法级上标注了 @ModelAttribute 的方法。  </p><p> • 在方法的入参前使用 @ModelAttribute 注解：<br>– 可以从隐含对象中获取隐含的模型数据中获取对象，再将请求参数 绑定到对象中，再传入入参<br>– 将方法入参对象添加到模型中 。</p><h3 id="由-SessionAttributes引发的异常"><a href="#由-SessionAttributes引发的异常" class="headerlink" title="由@SessionAttributes引发的异常"></a>由@SessionAttributes引发的异常</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621994195866-89933dbd-db87-464c-ba7c-4f261b686ce0.png#averageHue=%23b9d4bf&clientId=uc36fd273-811a-4&from=paste&height=89&id=u64007fa3&originHeight=178&originWidth=1279&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50588&status=done&style=none&taskId=u457da695-549b-4d1c-b221-478a98ad4ec&title=&width=639.5" alt="image.png"></p><p> • 如果在处理类定义处标注了@SessionAttributes(“xxx”)，则 尝试从会话中获取该属性，并将其赋给该入参，然后再用 请求消息填充该入参对象。如果在会话中找不到对应的属 性，则抛出 HttpSessionRequiredException 异常  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621994295709-b3cc5d82-170b-40e0-93b2-42f6273c0754.png#averageHue=%23cad4bb&clientId=uc36fd273-811a-4&from=paste&height=95&id=ub067bcb3&originHeight=160&originWidth=1438&originalType=binary&ratio=1&rotation=0&showTitle=false&size=256900&status=done&style=none&taskId=u43f7965c-8660-4890-9115-971d5cd4688&title=&width=857" alt="image.png"></p><h3 id="如何避免-SessionAttributes引发的异常"><a href="#如何避免-SessionAttributes引发的异常" class="headerlink" title="如何避免@SessionAttributes引发的异常"></a>如何避免@SessionAttributes引发的异常</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621994385053-003f5373-b807-40f6-bb3a-352286075099.png#averageHue=%23efedec&clientId=uc36fd273-811a-4&from=paste&height=524&id=ua0ef4e2f&originHeight=798&originWidth=1272&originalType=binary&ratio=1&rotation=0&showTitle=false&size=234659&status=done&style=none&taskId=u3e5848bd-9148-49c6-8db5-9ea34033e6e&title=&width=835" alt="image.png"></p><h1 id="Spring-MVC如何解析视图"><a href="#Spring-MVC如何解析视图" class="headerlink" title="Spring MVC如何解析视图"></a>Spring MVC如何解析视图</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621994624892-99f2a24e-469e-433d-8706-9c5b9c12b9ef.png#averageHue=%23faecec&clientId=uc36fd273-811a-4&from=paste&height=380&id=u3956d45f&originHeight=760&originWidth=1428&originalType=binary&ratio=1&rotation=0&showTitle=false&size=147740&status=done&style=none&taskId=u590fb7f8-91da-40b7-902b-f79c5930352&title=&width=714" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621994683986-2374b7b6-e0c2-4f0f-b140-1df04681d237.png#averageHue=%23f9f8f2&clientId=uc36fd273-811a-4&from=paste&height=531&id=ubcce59e6&originHeight=901&originWidth=1336&originalType=binary&ratio=1&rotation=0&showTitle=false&size=407054&status=done&style=none&taskId=u3967fe02-630c-46aa-9522-4a265d89424&title=&width=788" alt="image.png"></p><h2 id="视图和视图解析器"><a href="#视图和视图解析器" class="headerlink" title="视图和视图解析器"></a>视图和视图解析器</h2><p> • 请求处理方法执行完成后，最终返回一个 ModelAndView 对象。对于那些返回 String，View 或 ModeMap 等类型的 处理方法，Spring MVC 也会在内部将它们装配成一个 ModelAndView 对象，它包含了逻辑名和模型对象的视图。</p><p> • Spring MVC 借助视图解析器（ViewResolver）得到最终 的视图对象（View），最终的视图可以是 JSP ，也可能是 Excel、JFreeChart 等各种表现形式的视图。</p><p> • 对于最终究竟采取何种视图对象对模型数据进行渲染，处 理器并不关心，处理器工作重点聚焦在生产模型数据的工 作上，从而实现 MVC 的充分解耦。</p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p> • 视图的作用是渲染模型数据，将模型里的数据以某种形式呈现给客 户。<br> • 为了实现视图模型和具体实现技术的解耦，Spring 在 org.springframework.web.servlet 包中定义了一个高度抽象的 View 接口：  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621995231485-6968eb48-6f28-4c4f-bdc3-e3982d9f71af.png#averageHue=%23dbd6cd&clientId=uc36fd273-811a-4&from=paste&height=122&id=u01f1bae2&originHeight=244&originWidth=979&originalType=binary&ratio=1&rotation=0&showTitle=false&size=229664&status=done&style=none&taskId=u9c5d800d-1ccc-4d0f-ac01-30877b89d3d&title=&width=489.5" alt="image.png"></p><p> • 视图对象由视图解析器负责实例化。由于视图是无状态的，所以他们 不会有线程安全的问题  </p><h3 id="常用的视图实现类"><a href="#常用的视图实现类" class="headerlink" title="常用的视图实现类"></a>常用的视图实现类</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621995356676-c0ef494e-d790-4959-8d77-e1fa0dc6bd6f.png#averageHue=%23d9d97a&clientId=uc36fd273-811a-4&from=paste&height=496&id=u44681454&originHeight=718&originWidth=1165&originalType=binary&ratio=1&rotation=0&showTitle=false&size=759571&status=done&style=none&taskId=u9c1a1b93-8ec1-4853-a25a-2de2d60f208&title=&width=804.5" alt="image.png"></p><h3 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h3><p> • SpringMVC 为逻辑视图名的解析提供了不同的策略，可 以在 Spring WEB 上下文中配置一种或多种解析策略，并 指定他们之间的先后顺序。每一种映射策略对应一个具体 的视图解析器实现类。<br> • 视图解析器的作用比较单一：将逻辑视图解析为一个具体 的视图对象。<br> • 所有的视图解析器都必须实现 ViewResolver 接口： </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621995542124-7e528128-458c-45f8-b309-bbd11f6b966f.png#averageHue=%23fbfbfb&clientId=uc36fd273-811a-4&from=paste&height=145&id=ud5d17ca9&originHeight=213&originWidth=1171&originalType=binary&ratio=1&rotation=0&showTitle=false&size=108712&status=done&style=none&taskId=u2fce58b4-8669-4f35-8e00-491bef80f19&title=&width=796.5" alt="image.png"> </p><h3 id="常用的视图解析器实现类"><a href="#常用的视图解析器实现类" class="headerlink" title="常用的视图解析器实现类"></a>常用的视图解析器实现类</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621995611763-dbbe1287-8eee-43cc-8134-daf699b766ec.png#averageHue=%23d5d581&clientId=uc36fd273-811a-4&from=paste&height=292&id=u74ad5061&originHeight=433&originWidth=1249&originalType=binary&ratio=1&rotation=0&showTitle=false&size=574984&status=done&style=none&taskId=u066a6ccb-aebe-4c98-9c78-842b143af07&title=&width=843.5" alt="image.png"></p><p> • 程序员可以选择一种视图解析器或混用多种视图解析器<br> • 每个视图解析器都实现了 Ordered 接口并开放出一个 order 属性，可 以通过 order 属性指定解析器的优先顺序，order 越小优先级越高。<br>• SpringMVC 会按视图解析器顺序的优先顺序对逻辑视图名进行解 析，直到解析成功并返回视图对象，否则将抛出 ServletException 异 常  </p><h3 id="InternalResourceViewResolver"><a href="#InternalResourceViewResolver" class="headerlink" title="InternalResourceViewResolver"></a>InternalResourceViewResolver</h3><p> • JSP 是最常见的视图技术，可以使用 InternalResourceViewResolver 作为视图解析器：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621995781677-646013ce-c53c-473f-b1e6-97dc7d73637e.png#averageHue=%23f1ede5&clientId=uc36fd273-811a-4&from=paste&height=134&id=u2f1a723e&originHeight=268&originWidth=1275&originalType=binary&ratio=1&rotation=0&showTitle=false&size=280011&status=done&style=none&taskId=u8fe875b6-a55d-4b2e-a8d9-b55c01b135a&title=&width=637.5" alt="image.png"></p><p>• 若项目中使用了 JSTL，则 SpringMVC 会自动把视图由 InternalResourceView 转为 JstlView<br>• 若使用 JSTL 的 fmt 标签则需要在 SpringMVC 的配置文件中配置国际化资源文件 。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621995933469-f0aa269f-c59e-45c3-9327-71ca3003534a.png#averageHue=%23f8f8f4&clientId=uc36fd273-811a-4&from=paste&height=86&id=ue1229851&originHeight=172&originWidth=1329&originalType=binary&ratio=1&rotation=0&showTitle=false&size=220731&status=done&style=none&taskId=u2c368e32-771b-4dce-848f-a216744458c&title=&width=664.5" alt="image.png"></p><p> • 若希望直接响应通过 SpringMVC 渲染的页面，可以使用 mvc:viewcontroller 标签实现  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621995978146-4794f008-0176-46d9-9e71-fa57197bfb8a.png#averageHue=%23fafbf7&clientId=uc36fd273-811a-4&from=paste&height=38&id=ue9ced8bc&originHeight=76&originWidth=1267&originalType=binary&ratio=1&rotation=0&showTitle=false&size=105102&status=done&style=none&taskId=u348c1825-bf8c-49d9-bfdd-0ebbe140651&title=&width=633.5" alt="image.png"></p><h3 id="Excel-视图"><a href="#Excel-视图" class="headerlink" title="Excel 视图"></a>Excel 视图</h3><p> • 若希望使用 Excel 展示数据列表，仅需要扩展 SpringMVC 提供的 AbstractExcelView 或 AbstractJExcel View 即可。实现 buildExcelDocument() 方法，在方法中使用模型数据对象构建 Excel 文档就可以 了。  </p><p> • AbstractExcelView 基于 POI API，而 AbstractJExcelView 是基于 JExcelAPI 的。  </p><p> • 视图对象需要配置 IOC 容器中的一个 Bean，使用 BeanNameViewResolver 作为视图解析器即可  </p><p> • 若希望直接在浏览器中直接下载 Excel 文档，则可以设置 响应头 Content-Disposition 的值为 attachment;filename&#x3D;xxx.xls  </p><h2 id="关于重定向"><a href="#关于重定向" class="headerlink" title="关于重定向"></a>关于重定向</h2><p> • 一般情况下，控制器方法返回字符串类型的值会被当成逻 辑视图名处理<br> • 如果返回的字符串中带 forward: 或 redirect: 前缀 时，SpringMVC 会对他们进行特殊处理：将 forward: 和 redirect: 当成指示符，其后的字符串作为 URL 来处理<br>– redirect:success.jsp：会完成一个到 success.jsp 的重定向的操作。<br>– forward:success.jsp：会完成一个到 success.jsp 的转发操作 。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621996390738-b2f8a684-75c5-4c64-a059-ba58cfb54efa.png#averageHue=%23d4d1cb&clientId=uc36fd273-811a-4&from=paste&height=225&id=ub59e59b1&originHeight=321&originWidth=1173&originalType=binary&ratio=1&rotation=0&showTitle=false&size=372537&status=done&style=none&taskId=u46f8796f-5f1b-4738-9da8-6c2e102a3ed&title=&width=823.5" alt="image.png"></p><h1 id="RESTful-SpringMVC-CRUD"><a href="#RESTful-SpringMVC-CRUD" class="headerlink" title="RESTful SpringMVC CRUD"></a>RESTful SpringMVC CRUD</h1><p> • 1. 显示所有员工信息<br>– URI：emps<br>– 请求方式：GET<br>– 显示效果<br><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621996465119-cb46fb17-323e-4c8e-8444-f1d8f4dd90a6.png#averageHue=%23deddd7&clientId=uc36fd273-811a-4&from=paste&height=379&id=uf4105baa&originHeight=379&originWidth=822&originalType=binary&ratio=1&rotation=0&showTitle=false&size=300639&status=done&style=none&taskId=u8fd4009f-6a51-4f5e-ae6b-437e9b61b8b&title=&width=822" alt="image.png"></p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621996520656-fd2aa93a-e998-42c9-a2c9-db34b1f15993.png#averageHue=%23f3f1f0&clientId=uc36fd273-811a-4&from=paste&height=428&id=ua400b86e&originHeight=691&originWidth=1330&originalType=binary&ratio=1&rotation=0&showTitle=false&size=582275&status=done&style=none&taskId=ua4dacadd-26af-48c2-a6f4-36837dc2c31&title=&width=824" alt="image.png"></h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621996547724-c6ae269f-5115-4ffb-9021-5b85102cf7fb.png#averageHue=%23f9f8f6&clientId=uc36fd273-811a-4&from=paste&height=492&id=ue6b81af2&originHeight=766&originWidth=1330&originalType=binary&ratio=1&rotation=0&showTitle=false&size=396148&status=done&style=none&taskId=u193ab03b-e486-4d96-82bd-3fefe815c50&title=&width=855" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621996581905-2a862557-bc2a-4ef3-b918-ab3920b662e2.png#averageHue=%23f8f4f2&clientId=uc36fd273-811a-4&from=paste&height=451&id=u7c525c7c&originHeight=697&originWidth=1324&originalType=binary&ratio=1&rotation=0&showTitle=false&size=283280&status=done&style=none&taskId=u10bee00c-1e05-44f1-a9ab-f78bbf81bf0&title=&width=856" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621996605278-2601c306-0f1a-4b4b-906a-b184e69c1f5c.png#averageHue=%23fbfafa&clientId=uc36fd273-811a-4&from=paste&height=577&id=u6b29598d&originHeight=865&originWidth=1324&originalType=binary&ratio=1&rotation=0&showTitle=false&size=212843&status=done&style=none&taskId=u58fb53eb-9e69-4f7a-a4db-b0f40c2b47b&title=&width=883" alt="image.png"></p><h1 id="使用-Spring-的表单标签"><a href="#使用-Spring-的表单标签" class="headerlink" title="使用 Spring 的表单标签"></a>使用 Spring 的表单标签</h1><p> • 通过 SpringMVC 的表单标签可以实现将模型数据 中的属性和 HTML 表单元素相绑定，以实现表单 数据更便捷编辑和表单值的回显 。</p><h3 id="form-标签"><a href="#form-标签" class="headerlink" title="form 标签"></a>form 标签</h3><p> • 一般情况下，通过 GET 请求获取表单页面，而通过 POST 请求提交表单页面，因此获取表单页面和提交表单 页面的 URL 是相同的。只要满足该最佳条件的契 约， 标签就无需通过 action 属性指定表单 提交的 URL</p><p> • 可以通过 modelAttribute 属性指定绑定的模型属性，若 没有指定该属性，则默认从 request 域对象中读取 command 的表单 bean，如果该属性值也不存在，则会 发生错误。</p><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><p> • SpringMVC 提供了多个表单组件标签，如 、 等，用以绑定表单字段的 属性值，它们的共有属性如下：<br>– path：表单字段，对应 html 元素的 name 属性，支持级联属性<br>– htmlEscape：是否对表单值的 HTML 特殊字符进行转换，默认值 为 true<br>– cssClass：表单组件对应的 CSS 样式类名<br>– cssErrorClass：表单组件的数据存在错误时，采取的 CSS 样式 。</p><p> • form:input、form:password、form:hidden、form:textarea ：对应 HTML 表单的 text、password、hidden、textarea 标签<br>• form:radiobutton：单选框组件标签，当表单 bean 对应的 属性值和 value 值相等时，单选框被选中<br>• form:radiobuttons：单选框组标签，用于构造多个单选 框<br>– items：可以是一个 List、String[] 或 Map<br>– itemValue：指定 radio 的 value 值。可以是集合中 bean 的一个 属性值<br>– itemLabel：指定 radio 的 label 值<br>– delimiter：多个单选框可以通过 delimiter 指定分隔符  </p><p>• form:checkbox：复选框组件。用于构造单个复选框<br>• form:checkboxs：用于构造多个复选框。使用方式同 form:radiobuttons 标签<br>• form:select：用于构造下拉框组件。使用方式同 form:radiobuttons 标签<br>• form:option：下拉框选项组件标签。使用方式同 form:radiobuttons 标签<br>• form:errors：显示表单组件或数据校验所对应的错误<br>–  ：显示表单所有的错误<br>–  ：显示所有以 user 为前缀的属性对应 的错误<br>–  ：显示特定表单对象属性的错误 </p><h1 id="处理静态资源"><a href="#处理静态资源" class="headerlink" title="处理静态资源"></a>处理静态资源</h1><p> • 优雅的 REST 风格的资源URL 不希望带 .html 或 .do 等后缀<br>• 若将 DispatcherServlet 请求映射配置为 &#x2F;，则 Spring MVC 将捕获 WEB 容器的所有请求，包括静态资源的请求，SpringMVC 会将他 们当成一个普通请求处理，因找不到对应处理器将导致错误。<br>• 可以在 SpringMVC 的配置文件中配置  的方式解决静态资源的问题： </p><p> –  将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler，它会对进入 DispatcherServlet 的 请求进行筛查，如果发现是没有经过映射的请求，就将该请求交由 WEB 应用服务器默认的 Servlet 处理，如果不是静态资源的请求，才由 DispatcherServlet 继续处理<br> – 一般 WEB 应用服务器默认的 Servlet 的名称都是 default。若所使用的 WEB 服务器的默认 Servlet 名称不是 default，则需要通过 defaultservlet-name 属性显式指定 </p><h1 id="数据绑定流程"><a href="#数据绑定流程" class="headerlink" title="数据绑定流程"></a>数据绑定流程</h1><p> • 1. Spring MVC 主框架将 ServletRequest 对象及目标方 法的入参实例传递给 WebDataBinderFactory 实例，以创 建 DataBinder 实例对象<br> • 2. DataBinder 调用装配在 Spring MVC 上下文中的 ConversionService 组件进行数据类型转换、数据格式 化工作。将 Servlet 中的请求信息填充到入参对象中<br> • 3. 调用 Validator 组件对已经绑定了请求消息的入参对象 进行数据合法性校验，并最终生成数据绑定结果 BindingData 对象<br> • 4. Spring MVC 抽取 BindingResult 中的入参对象和校验 错误对象，将它们赋给处理方法的响应入参 。</p><p> • Spring MVC 通过反射机制对目标处理方法进行解析，将请 求消息绑定到处理方法的入参中。数据绑定的核心部件是 DataBinder，运行机制如下：  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621997917463-d5c9fc5a-7536-4f62-830c-71687d4b773e.png#averageHue=%23f6e0df&clientId=uc36fd273-811a-4&from=paste&height=360&id=u91357d4a&originHeight=589&originWidth=1321&originalType=binary&ratio=1&rotation=0&showTitle=false&size=206830&status=done&style=none&taskId=u2005f9d2-6bc5-4894-a656-d66d1a727a1&title=&width=806.5" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621997942742-fafbc5da-0ed7-4f53-ba81-2fe8d7f56e49.png#averageHue=%23c4c3b9&clientId=uc36fd273-811a-4&from=paste&height=276&id=u4bae9e1b&originHeight=445&originWidth=1330&originalType=binary&ratio=1&rotation=0&showTitle=false&size=522502&status=done&style=none&taskId=u65064733-1216-4ef6-ab1f-3044bb8039a&title=&width=824" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621997997106-94ad6047-4207-474e-96e4-4e506b6a3807.png#averageHue=%23d5d1c5&clientId=uc36fd273-811a-4&from=paste&height=482&id=u20235956&originHeight=772&originWidth=1333&originalType=binary&ratio=1&rotation=0&showTitle=false&size=835712&status=done&style=none&taskId=uc5e7454c-ee9a-4fb5-adcc-8af3725cfa5&title=&width=832.5" alt="image.png"></p><h3 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621998055386-e13c42d5-4c1c-47a7-9551-dcf568ecce1c.png#averageHue=%23f3e1de&clientId=uc36fd273-811a-4&from=paste&height=449&id=u02694aa3&originHeight=708&originWidth=1333&originalType=binary&ratio=1&rotation=0&showTitle=false&size=463451&status=done&style=none&taskId=u51a9288e-a02a-4558-9835-be528edc116&title=&width=844.5" alt="image.png"></p><h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><p> • ConversionService 是 Spring 类型转换体系的核心接口。<br> • 可以利用 ConversionServiceFactoryBean 在 Spring 的 IOC 容器中定义一个 ConversionService. Spring 将自动识别出 IOC 容器中的 ConversionService，并在 Bean 属性配置及 Spring MVC 处理方法入参绑定等场合使用它进行数据的转换<br>• 可通过 ConversionServiceFactoryBean 的 converters 属性 注册自定义的类型转换器</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621998146542-0bf0c703-9b98-4ac4-a880-28f32aa332a2.png#averageHue=%23f7f5ef&clientId=uc36fd273-811a-4&from=paste&height=164&id=u1c0f0b8d&originHeight=268&originWidth=1329&originalType=binary&ratio=1&rotation=0&showTitle=false&size=247019&status=done&style=none&taskId=u604073cc-0b04-49e5-8c34-4fd7d3a4d00&title=&width=813.5" alt="image.png">  </p><h3 id="Spring-支持的转换器"><a href="#Spring-支持的转换器" class="headerlink" title="Spring 支持的转换器"></a>Spring 支持的转换器</h3><p> • Spring 定义了 3 种类型的转换器接口，实现任意一个转换 器接口都可以作为自定义转换器注册到 ConversionServiceFactroyBean 中：<br> – Converter：将 S 类型对象转为 T 类型对象<br> – ConverterFactory：将相同系列多个 “同质” Converter 封装在一 起。如果希望将一种类型的对象转换为另一种类型及其子类的对 象（例如将 String 转换为 Number 及 Number 子类 （Integer、Long、Double 等）对象）可使用该转换器工厂类<br>– GenericConverter：会根据源类对象及目标类对象所在的宿主类 中的上下文信息进行类型转换 。</p><h3 id="自定义转换器示例"><a href="#自定义转换器示例" class="headerlink" title="自定义转换器示例"></a>自定义转换器示例</h3><p> •  会将自定义的 ConversionService 注册到 Spring MVC 的上下文中<br><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621998771321-431594ec-f9db-4013-af3b-c5108f5dd9eb.png#averageHue=%23eeede7&clientId=uc36fd273-811a-4&from=paste&height=337&id=uee3972f6&originHeight=559&originWidth=1321&originalType=binary&ratio=1&rotation=0&showTitle=false&size=477282&status=done&style=none&taskId=ubfa35972-8fca-4ecd-ab6b-95c5ed4f8c8&title=&width=797.5" alt="image.png"></p><h3 id="关于-mvc-annotation-driven"><a href="#关于-mvc-annotation-driven" class="headerlink" title="关于 mvc:annotation-driven"></a>关于 mvc:annotation-driven</h3><p> •  会自动注 册RequestMappingHandlerMapping 、RequestMappingHandlerAdapter 与 ExceptionHandlerExceptionResolver 三个bean。<br>• 还将提供以下支持： – 支持使用 ConversionService 实例对表单参数进行类型转换 – 支持使用 @NumberFormat annotation、@DateTimeFormat 注解完成数据类型的格式化 – 支持使用 @Valid 注解对 JavaBean 实例进行 JSR 303 验证 – 支持使用 @RequestBody 和 @ResponseBody 注解。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621998858432-7244a77a-2b07-43a8-a0f0-d9d4a48a96c3.png#averageHue=%23cbc2a9&clientId=uc36fd273-811a-4&from=paste&height=644&id=u4a0630e3&originHeight=742&originWidth=1006&originalType=binary&ratio=1&rotation=0&showTitle=false&size=710798&status=done&style=none&taskId=u5e5e30b1-810a-4334-b1b3-06ca9306914&title=&width=873" alt="image.png"></p><h3 id="InitBinder"><a href="#InitBinder" class="headerlink" title="@InitBinder"></a>@InitBinder</h3><p> • 由 @InitBinder 标识的方法，可以对 WebDataBinder 对 象进行初始化。WebDataBinder 是 DataBinder 的子类，用 于完成由表单字段到 JavaBean 属性的绑定<br>• @InitBinder方法不能有返回值，它必须声明为void。<br>• @InitBinder方法的参数通常是是 WebDataBinder。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621998927703-992e0228-e4f8-4f62-9954-8b0cf49a2f16.png#averageHue=%23fafafa&clientId=uc36fd273-811a-4&from=paste&height=186&id=u8d8efd5b&originHeight=327&originWidth=1227&originalType=binary&ratio=1&rotation=0&showTitle=false&size=260811&status=done&style=none&taskId=u13731ebe-3e74-41de-baae-ae0eff26623&title=&width=699.5" alt="image.png"></p><h3 id="数据绑定流程-1"><a href="#数据绑定流程-1" class="headerlink" title="数据绑定流程"></a>数据绑定流程</h3><p> • Spring MVC 通过反射机制对目标处理方法进行解析，将请 求消息绑定到处理方法的入参中。数据绑定的核心部件是 DataBinder，运行机制如下：  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1621998977711-45faf858-3a10-4944-bf18-c56fdb1059cf.png#averageHue=%23f7e0e0&clientId=uc36fd273-811a-4&from=paste&height=373&id=uf372fa26&originHeight=546&originWidth=1240&originalType=binary&ratio=1&rotation=0&showTitle=false&size=205426&status=done&style=none&taskId=u31838d59-624c-42a7-8291-fe891ee0500&title=&width=848" alt="image.png"></p><h1 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h1><p>• 对属性对象的输入&#x2F;输出进行格式化，从其本质上讲依然 属于 “类型转换” 的范畴。<br>• Spring 在格式化模块中定义了一个实现 ConversionService 接口的 FormattingConversionService 实现类，该实现类扩展 了 GenericConversionService，因此它既具有类型转换的 功能，又具有格式化的功能<br>• FormattingConversionService 拥有一个 FormattingConversionServiceFactroyBean 工厂类， 后者用于在 Spring 上下文中构造前者 。</p><p> • FormattingConversionServiceFactroyBean 内部已经注册了 :<br> – NumberFormatAnnotationFormatterFactroy：支持对数字类型的属性使用 @NumberFormat 注解<br>– JodaDateTimeFormatAnnotationFormatterFactroy：支持对日期类型 的属性使用     @DateTimeFormat 注解</p><p> • 装配了 FormattingConversionServiceFactroyBean 后，就可 以在 Spring MVC 入参绑定及模型数据输出时使用注解驱动 了。 默认创建的 ConversionService 实例即为 FormattingConversionServiceFactroyBean </p><h1 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h1><p> • @DateTimeFormat 注解可对 java.util.Date、java.util.Calendar、java.long.Long 时间 类型进行标注：<br>– pattern 属性：类型为字符串。指定解析&#x2F;格式化字段数据的模式， 如：”yyyy-MM-dd hh:mm:ss”<br>– iso 属性：类型为 DateTimeFormat.ISO。指定解析&#x2F;格式化字段数据 的ISO模式，包括四种：ISO.NONE（不使用） – 默 认、ISO.DATE(yyyy-MM-dd) 、ISO.TIME(hh:mm:ss.SSSZ)、 ISO.DATE_TIME(yyyy-MM-dd hh:mm:ss.SSSZ)<br>– style 属性：字符串类型。通过样式指定日期时间的格式，由两位字 符组成，第一位表示日期的格式，第二位表示时间的格式：S：短日 期&#x2F;时间格式、M：中日期&#x2F;时间格式、L：长日期&#x2F;时间格式、F：完整 日期&#x2F;时间格式、-：忽略日期或时间格式  </p><h1 id="数值格式化"><a href="#数值格式化" class="headerlink" title="数值格式化"></a>数值格式化</h1><p> • @NumberFormat 可对类似数字类型的属性进行标 注，它拥有两个互斥的属性：<br>– style：类型为 NumberFormat.Style。用于指定样式类 型，包括三种：Style.NUMBER（正常数字类型）、 Style.CURRENCY（货币类型）、 Style.PERCENT（ 百分数类型）<br> – pattern：类型为 String，自定义样式， 如patter&#x3D;”#,###”；  </p><h2 id="格式化示例"><a href="#格式化示例" class="headerlink" title="格式化示例"></a>格式化示例</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622006151536-3ef39cee-d4fa-4077-88c5-b9cf3a117420.png#averageHue=%23fcfcfb&clientId=u6a10b9e9-250e-4&from=paste&height=423&id=u14d98640&originHeight=630&originWidth=1240&originalType=binary&ratio=1&rotation=0&showTitle=false&size=469338&status=done&style=none&taskId=ud8801b70-4f7f-492d-989b-c14500d4c16&title=&width=833" alt="image.png"></p><h1 id="JSR-303"><a href="#JSR-303" class="headerlink" title="JSR 303"></a>JSR 303</h1><p> • JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架， 它已经包含在 JavaEE 6.0 中 .<br> • JSR 303 通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则，并通过标准的验证接口对 Bean 进行验证  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622006266604-15a5d105-c19a-405b-889c-c6fb866fe711.png#averageHue=%23cccec3&clientId=u6a10b9e9-250e-4&from=paste&height=292&id=u69dfd8f4&originHeight=421&originWidth=1243&originalType=binary&ratio=1&rotation=0&showTitle=false&size=896552&status=done&style=none&taskId=u1d675fb7-b31f-495f-9fea-34bfeebbfd4&title=&width=863.5" alt="image.png"></p><h2 id="Hibernate-Validator-扩展注解"><a href="#Hibernate-Validator-扩展注解" class="headerlink" title="Hibernate Validator 扩展注解"></a>Hibernate Validator 扩展注解</h2><p> • Hibernate Validator 是 JSR 303 的一个参考实现，除支持 所有标准的校验注解外，它还支持以下的扩展注解  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622006328184-aa5d7e82-095b-4f29-a268-c1a8a3f93b9a.png#averageHue=%23aba59b&clientId=u6a10b9e9-250e-4&from=paste&height=164&id=u89c7a435&originHeight=250&originWidth=1246&originalType=binary&ratio=1&rotation=0&showTitle=false&size=341646&status=done&style=none&taskId=u69fb47c2-14f5-4c4a-bdcf-361b409c01e&title=&width=819" alt="image.png"></p><h1 id="Spring-MVC-数据校验"><a href="#Spring-MVC-数据校验" class="headerlink" title="Spring MVC 数据校验"></a>Spring MVC 数据校验</h1><p> • Spring 4.0 拥有自己独立的数据校验框架，同时支持 JSR 303 标准的校验框架。<br> • Spring 在进行数据绑定时，可同时调用校验框架完成数据校 验工作。在 Spring MVC 中，可直接通过注解驱动的方式 进行数据校验<br> • Spring 的 LocalValidatorFactroyBean 既实现了 Spring 的 Validator 接口，也实现了 JSR 303 的 Validator 接口。只要 在 Spring 容器中定义了一个 LocalValidatorFactoryBean，即可将其注入到需要数据校 验的 Bean 中。<br> • Spring 本身并没有提供 JSR303 的实现，所以必须将 JSR303 的实现者的 jar 包放到类路径下。<br> •  会默认装配好一个 LocalValidatorFactoryBean，通过在处理方法的入参上标 注 @valid 注解即可让 Spring MVC 在完成数据绑定后执行 数据校验的工作 。<br> • 在已经标注了 JSR303 注解的表单&#x2F;命令对象前标注一个 @Valid，Spring MVC 框架在将请求参数绑定到该入参对象 后，就会调用校验框架根据注解声明的校验规则实施校验 。<br> • Spring MVC 是通过对处理方法签名的规约来保存校验结果 的：前一个表单&#x2F;命令对象的校验结果保存到随后的入参 中，这个保存校验结果的入参必须是 BindingResult 或 Errors 类型，这两个类都位于 org.springframework.validation 包中。</p><p>• 需校验的 Bean 对象和其绑定结果对象或错误对象时成对出现的，它们 之间不允许声明其他的入参<br>• Errors 接口提供了获取错误信息的方法，如 getErrorCount() 或 getFieldErrors(String field)<br>• BindingResult 扩展了 Errors 接口</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622006803276-ad37c91a-f263-498d-b869-31adbf8035dc.png#averageHue=%23fbfaf9&clientId=u6a10b9e9-250e-4&from=paste&height=275&id=uc6ab18b6&originHeight=403&originWidth=1252&originalType=binary&ratio=1&rotation=0&showTitle=false&size=160399&status=done&style=none&taskId=u51efc996-63c1-4620-8e3a-e4f06ad204d&title=&width=855" alt="image.png"></p><h2 id="在目标方法中获取校验结果"><a href="#在目标方法中获取校验结果" class="headerlink" title="在目标方法中获取校验结果"></a>在目标方法中获取校验结果</h2><p> • 在表单&#x2F;命令对象类的属性中标注校验注解，在处理方法对 应的入参前添加 @Valid，Spring MVC 就会实施校验并将校 验结果保存在被校验入参对象之后的BindingResult 或 Errors 入参中。<br> • 常用方法：<br>– FieldError getFieldError(String field)<br>– List getFieldErrors()<br>– Object getFieldValue(String field)<br>– Int getErrorCount() </p><h1 id="在页面上显示错误"><a href="#在页面上显示错误" class="headerlink" title="在页面上显示错误"></a>在页面上显示错误</h1><p> • Spring MVC 除了会将表单&#x2F;命令对象的校验结果保存到对 应的 BindingResult 或 Errors 对象中外，还会将所有校验 结果保存到 “隐含模型” 。<br>• 即使处理方法的签名中没有对应于表单&#x2F;命令对象的结果 入参，校验结果也会保存在 “隐含对象”中。<br>• 隐含模型中的所有数据最终将通过 HttpServletRequest 的 属性列表暴露给 JSP 视图对象，因此在 JSP 中可以获取 错误信息<br>• 在 JSP 页面上可通过  显示错误消息 。</p><p> 示例  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622007483423-b3f520bd-7dc2-4e9c-a815-4f6b481ea34f.png#averageHue=%23fdfdfd&clientId=u6a10b9e9-250e-4&from=paste&height=420&id=ufabb9ddb&originHeight=618&originWidth=1246&originalType=binary&ratio=1&rotation=0&showTitle=false&size=441270&status=done&style=none&taskId=u1a4b9e78-e204-4635-b9bd-47cb49b0b2e&title=&width=846.3333740234375" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622007525167-014af013-86f3-49f3-a2f6-3c0a0cbc7a49.png#averageHue=%23fcfcfb&clientId=u6a10b9e9-250e-4&from=paste&height=492&id=uf6492ea3&originHeight=708&originWidth=1252&originalType=binary&ratio=1&rotation=0&showTitle=false&size=494806&status=done&style=none&taskId=u2a3f9e7a-3f3f-4992-9e16-fd1cbb3f829&title=&width=870" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622008317623-ba28343f-788d-4937-ac3f-41deeab2a8c0.png#averageHue=%23fcfbfb&clientId=u6a10b9e9-250e-4&from=paste&height=463&id=ub650b12f&originHeight=687&originWidth=1249&originalType=binary&ratio=1&rotation=0&showTitle=false&size=451745&status=done&style=none&taskId=u5869c74b-9c64-419b-9799-2b3a9774380&title=&width=842.5" alt="image.png"></p><h1 id="提示消息的国际化"><a href="#提示消息的国际化" class="headerlink" title="提示消息的国际化"></a>提示消息的国际化</h1><p>• 每个属性在数据绑定和数据校验发生错误时，都会生成一 个对应的 FieldError 对象。<br>• 当一个属性校验失败后，校验框架会为该属性生成 4 个消 息代码，这些代码以校验注解类名为前缀，结合 modleAttribute、属性名及属性类型名生成多个对应的消 息代码：例如 User 类中的 password 属性标准了一个 @Pattern 注 解，当该属性值不满足 @Pattern 所定义的规则时, 就会产生以下 4 个错误代码：  </p><p> – Pattern.user.password<br>– Pattern.password<br>– Pattern.java.lang.String<br>– Pattern  </p><p> • 当使用 Spring MVC 标签显示错误消息时， Spring MVC 会查看 WEB 上下文是否装配了对应的国际化消息，如果没有，则显示默认 的错误消息，否则使用国际化消息。  </p><h1 id="提示消息的国际化-1"><a href="#提示消息的国际化-1" class="headerlink" title="提示消息的国际化"></a>提示消息的国际化</h1><p> • 若数据类型转换或数据格式转换时发生错误，或该有的参 数不存在，或调用处理方法时发生错误，都会在隐含模型 中创建错误消息。其错误代码前缀说明如下：<br> – required：必要的参数不存在。如 @RequiredParam(“param1”) 标注了一个入参，但是该参数不存在<br>– typeMismatch：在数据绑定时，发生数据类型不匹配的问题<br>– methodInvocation：Spring MVC 在调用处理方法时发生了错误  </p><p> • 注册国际化资源文件<br><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622012066883-daa96585-4326-4501-bf03-4b10791f329c.png#averageHue=%23f9f9f4&clientId=u6a10b9e9-250e-4&from=paste&height=158&id=ud80f5614&originHeight=240&originWidth=1219&originalType=binary&ratio=1&rotation=0&showTitle=false&size=228581&status=done&style=none&taskId=u40278feb-b01f-43f7-9697-c2d2b9ae42a&title=&width=802.5" alt="image.png"></p><h2 id="处理-JSON"><a href="#处理-JSON" class="headerlink" title="处理 JSON"></a>处理 JSON</h2><p> • 1. 加入 jar 包：  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622012116393-263a4430-33a0-4d2a-8be0-6260fcac591c.png#averageHue=%23d7d4cb&clientId=u6a10b9e9-250e-4&from=paste&height=100&id=uad93bdde&originHeight=199&originWidth=559&originalType=binary&ratio=1&rotation=0&showTitle=false&size=130177&status=done&style=none&taskId=u72453ab3-a260-40f8-89c9-26a5ce1b75e&title=&width=279.5" alt="image.png"></p><p> • 2. 编写目标方法，使其返回 JSON 对应的对象或集合。<br> • 3. 在方法上添加 @ResponseBody 注解。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622012165991-9341e5c3-70fe-4411-b439-b97e765e63f3.png#averageHue=%23d1cec9&clientId=u6a10b9e9-250e-4&from=paste&height=173&id=u23c10dd6&originHeight=274&originWidth=1177&originalType=binary&ratio=1&rotation=0&showTitle=false&size=293472&status=done&style=none&taskId=ub9493726-91e8-42bb-948d-c761b245bdc&title=&width=744.5" alt="image.png"></p><h3 id="HttpMessageConverter"><a href="#HttpMessageConverter" class="headerlink" title="HttpMessageConverter"></a>HttpMessageConverter</h3><p>•  HttpMessageConverter 是 Spring3.0 新添加的一个接 口，负责将请求信息转换为一个对象（类型为 T），将对象（ 类型为 T）输出为响应信息 </p><p> • HttpMessageConverter接口定义的方法：<br>– Boolean canRead(Class clazz,MediaType mediaType): 指定转换器 可以读取的对象类型，即转换器是否可将请求信息转换为 clazz 类型的对 象，同时指定支持 MIME 类型(text&#x2F;html,applaiction&#x2F;json等)<br>– Boolean canWrite(Class clazz,MediaType mediaType):指定转换器 是否可将 clazz 类型的对象写到响应流中，响应流支持的媒体类型 在MediaType 中定义。<br> – LIst getSupportMediaTypes()：该转换器支持的媒体类 型。 – T read(Class clazz,HttpInputMessage inputMessage)： 将请求信息流转换为 T 类型的对象。<br>– void write(T t,MediaType contnetType,HttpOutputMessgae outputMessage):将T类型的对象写到响应流中，同时指定相应的媒体类 型为 contentType。 </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622012437185-ddaa1a6c-221d-4021-9a84-4ca2a25186df.png#averageHue=%23b8c995&clientId=u6a10b9e9-250e-4&from=paste&height=303&id=uc4628f48&originHeight=439&originWidth=1257&originalType=binary&ratio=1&rotation=0&showTitle=false&size=432466&status=done&style=none&taskId=u44755202-941d-44ae-9a87-7fcee965dca&title=&width=867.5" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622012476198-c6250d62-2409-482a-a558-101c94802bfe.png#averageHue=%23eaeae5&clientId=u6a10b9e9-250e-4&from=paste&height=401&id=u483067fe&originHeight=645&originWidth=1369&originalType=binary&ratio=1&rotation=0&showTitle=false&size=826580&status=done&style=none&taskId=ue86449fe-6f72-41ba-b581-9f01e6e74c1&title=&width=851.5" alt="image.png"></p><p> • DispatcherServlet 默认装配 RequestMappingHandlerAdapter ，而 RequestMappingHandlerAdapter 默认装配如下 HttpMessageConverter：  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622012523872-eb795e73-2156-4401-920d-f85412792860.png#averageHue=%23d6d2c9&clientId=u6a10b9e9-250e-4&from=paste&height=286&id=u89aff994&originHeight=451&originWidth=1246&originalType=binary&ratio=1&rotation=0&showTitle=false&size=450835&status=done&style=none&taskId=u748c409b-4441-4388-9fe5-34a7aea640b&title=&width=789" alt="image.png"></p><p> • 加入 jackson jar 包后， RequestMappingHandlerAdapter 装配的 HttpMessageConverter 如下：  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622012570321-295bbdd4-8f50-4367-a73a-35c2508e3e58.png#averageHue=%23d4cfc3&clientId=u6a10b9e9-250e-4&from=paste&height=301&id=uc2ece81a&originHeight=453&originWidth=1254&originalType=binary&ratio=1&rotation=0&showTitle=false&size=562536&status=done&style=none&taskId=u46ab0f1f-9af6-4a3b-a310-55a7bd354eb&title=&width=832" alt="image.png"></p><p> • 使用 HttpMessageConverter 将请求信息转化并绑定到处理方法的入 参中或将响应结果转为对应类型的响应信息，Spring 提供了两种途径： </p><p> – 使用 @RequestBody &#x2F; @ResponseBody 对处理方法进行标注<br>– 使用 HttpEntity &#x2F; ResponseEntity 作为处理方法的入参或返回值 </p><p> • 当控制器处理方法使用到 @RequestBody&#x2F;@ResponseBody 或 HttpEntity&#x2F;ResponseEntity 时, Spring 首先根据请求头或响应头的 Accept 属性选择匹配的 HttpMessageConverter, 进而根据参数类型或 泛型类型的过滤得到匹配的 HttpMessageConverter, 若找不到可用的 HttpMessageConverter 将报错 </p><p> • @RequestBody 和 @ResponseBody 不需要成对出现 </p><h3 id="RequestBody、-ResponseBody-示例"><a href="#RequestBody、-ResponseBody-示例" class="headerlink" title="@RequestBody、@ResponseBody 示例"></a>@RequestBody、@ResponseBody 示例</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622012852871-584bc5eb-1b33-4ced-a847-4af7bc1ff952.png#averageHue=%23d8cfc2&clientId=u6a10b9e9-250e-4&from=paste&height=499&id=uef33291d&originHeight=705&originWidth=1234&originalType=binary&ratio=1&rotation=0&showTitle=false&size=777549&status=done&style=none&taskId=u2e86e25d-3207-442a-b099-81b50338931&title=&width=873" alt="image.png"></p><h3 id="HttpEntity、ResponseEntity-示例"><a href="#HttpEntity、ResponseEntity-示例" class="headerlink" title="HttpEntity、ResponseEntity 示例"></a>HttpEntity、ResponseEntity 示例</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622012927260-c0a831d1-1b44-46de-9361-723b5337229b.png#averageHue=%23d0ccc5&clientId=u6a10b9e9-250e-4&from=paste&height=441&id=u26073f24&originHeight=627&originWidth=1231&originalType=binary&ratio=1&rotation=0&showTitle=false&size=691890&status=done&style=none&taskId=u0eed19f1-8228-4c97-9c3e-15d18ebc2f1&title=&width=865.5" alt="image.png"></p><h1 id="国际化概述"><a href="#国际化概述" class="headerlink" title="国际化概述"></a>国际化概述</h1><p> • 默认情况下，SpringMVC 根据 Accept-Language 参数 判断客户端的本地化类型。<br> • 当接受到请求时，SpringMVC 会在上下文中查找一个本 地化解析器（LocalResolver），找到后使用它获取请求 所对应的本地化类型信息。<br> • SpringMVC 还允许装配一个动态更改本地化类型的拦截 器，这样通过指定一个请求参数就可以控制单个请求的本 地化类型。  </p><h2 id="SessionLocaleResolver-LocaleChangeInterceptor-工作原理"><a href="#SessionLocaleResolver-LocaleChangeInterceptor-工作原理" class="headerlink" title="SessionLocaleResolver &amp; LocaleChangeInterceptor 工作原理"></a>SessionLocaleResolver &amp; LocaleChangeInterceptor 工作原理</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622013834241-b3d840ae-fb76-4bf4-92d4-c2835361beba.png#averageHue=%23f0d4c3&clientId=u6a10b9e9-250e-4&from=paste&height=444&id=uc20284ed&originHeight=667&originWidth=1236&originalType=binary&ratio=1&rotation=0&showTitle=false&size=233361&status=done&style=none&taskId=u9bec238e-ab60-484b-95f7-a3a96f9d0d9&title=&width=823" alt="image.png"></p><p> 本地化解析器和本地化拦截器  </p><p> • AcceptHeaderLocaleResolver：根据 HTTP 请求头的 Accept-Language 参数确定本地化类型，如果没有显式定义 本地化解析器， SpringMVC 使用该解析器。<br> • CookieLocaleResolver：根据指定的 Cookie 值确定本地化类 型<br> • SessionLocaleResolver：根据 Session 中特定的属性确定本 地化类型<br> • LocaleChangeInterceptor：从请求参数中获取本次请求对应 的本地化类型。  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622014175476-6e18c1f9-3f04-4bd2-970a-9e597bcec467.png#averageHue=%23f5f5ed&clientId=u8c2f302c-299f-4&from=paste&height=138&id=u5bb1f5f9&originHeight=207&originWidth=1246&originalType=binary&ratio=1&rotation=0&showTitle=false&size=257838&status=done&style=none&taskId=ud9e3a37c-8551-4764-adaf-51e9f57e82b&title=&width=832" alt="image.png"></p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p> • Spring MVC 为文件上传提供了直接的支持，这种支持是通 过即插即用的 MultipartResolver 实现的。Spring 用 Jakarta Commons FileUpload 技术实现了一个 MultipartResolver 实现类：CommonsMultipartResovler 。<br>• Spring MVC 上下文中默认没有装配 MultipartResovler，因 此默认情况下不能处理文件的上传工作，如果想使用 Spring 的文件上传功能，需现在上下文中配置 MultipartResolver 。</p><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><h3 id="配置-MultipartResolver"><a href="#配置-MultipartResolver" class="headerlink" title="配置 MultipartResolver"></a>配置 MultipartResolver</h3><p> • defaultEncoding: 必须和用户 JSP 的 pageEncoding 属性 一致，以便正确解析表单的内容<br> • 为了让 CommonsMultipartResovler 正确工作，必须先 将 Jakarta Commons FileUpload 及 Jakarta Commons io 的类包添加到类路径下。  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622014768354-13a36ebf-3dec-4155-9a3e-2717f09e9c9d.png#averageHue=%23f9f9f5&clientId=u8c2f302c-299f-4&from=paste&height=128&id=u4be62464&originHeight=256&originWidth=1242&originalType=binary&ratio=1&rotation=0&showTitle=false&size=296479&status=done&style=none&taskId=u26e0dad0-07cc-472e-9d10-9b413abae3c&title=&width=621" alt="image.png"></p><h3 id="文件上传示例"><a href="#文件上传示例" class="headerlink" title="文件上传示例"></a>文件上传示例</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622014813283-9d148083-b0d0-4976-bbbc-ccf49cfbb198.png#averageHue=%23dedbd5&clientId=u8c2f302c-299f-4&from=paste&height=416&id=u431b78b5&originHeight=672&originWidth=1242&originalType=binary&ratio=1&rotation=0&showTitle=false&size=620935&status=done&style=none&taskId=u760d4f40-9d6f-4046-be52-cb610b33d68&title=&width=769" alt="image.png"></p><h1 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h1><p> • Spring MVC也可以使用拦截器对请求进行拦截处理，用户 可以自定义拦截器来实现特定的功能，自定义的拦截器必 须实现HandlerInterceptor接口  </p><p> – preHandle()：这个方法在业务处理器处理请求之前被调用，在该 方法中对用户请求 request 进行处理。如果程序员决定该拦截器对 请求进行拦截处理后还要调用其他的拦截器，或者是业务处理器去 进行处理，则返回true；如果程序员决定不需要再调用其他的组件 去处理请求，则返回false。<br> – postHandle()：这个方法在业务处理器处理完请求后，但 是DispatcherServlet 向客户端返回响应前被调用，在该方法中对 用户请求request进行处理。<br>– afterCompletion()：这个方法在 DispatcherServlet 完全处理完请 求后被调用，可以在该方法中进行一些资源清理的操作。  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622014895200-afaa25f5-1c7d-4998-8afd-3c4d05bc19b5.png#averageHue=%23f9f6f5&clientId=u8c2f302c-299f-4&from=paste&height=535&id=u6ad542fd&originHeight=817&originWidth=1258&originalType=binary&ratio=1&rotation=0&showTitle=false&size=278496&status=done&style=none&taskId=u5aaa6588-e790-4fab-95e2-8428a3558af&title=&width=824" alt="image.png"></p><p> 配置自定义拦截器  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622014926125-5fa55fdc-1437-437f-bc67-f331f9d6c6c6.png#averageHue=%23fafaf6&clientId=u8c2f302c-299f-4&from=paste&height=231&id=u64af9838&originHeight=349&originWidth=1240&originalType=binary&ratio=1&rotation=0&showTitle=false&size=392317&status=done&style=none&taskId=u3635028b-a4fe-42ac-b161-d2345fc2f2c&title=&width=820" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622015062399-3aa5c420-5f9f-41b1-aa1f-98151ed89c96.png#averageHue=%23f7f5f3&clientId=u8c2f302c-299f-4&from=paste&height=407&id=ucee6bc53&originHeight=814&originWidth=1227&originalType=binary&ratio=1&rotation=0&showTitle=false&size=225337&status=done&style=none&taskId=u3dce2f98-59b9-4e95-8479-9d87f2225f5&title=&width=613.5" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622015084082-3f8c6b2d-1d98-44f7-a37e-cd9a5730ce4e.png#averageHue=%23e0c4a5&clientId=u8c2f302c-299f-4&from=paste&height=461&id=u4a3f182a&originHeight=922&originWidth=1276&originalType=binary&ratio=1&rotation=0&showTitle=false&size=506941&status=done&style=none&taskId=ube9e816d-7445-4dca-934f-0fd4459d1bb&title=&width=638" alt="image.png"></p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p> • Spring MVC 通过 HandlerExceptionResolver 处理程序 的异常，包括 Handler 映射、数据绑定以及目标方法执行 时发生的异常。<br> • SpringMVC 提供的 HandlerExceptionResolver 的实现类<br><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622015159646-c4d51b34-c8b4-41ac-b166-525046117aba.png#averageHue=%23eaecd3&clientId=u8c2f302c-299f-4&from=paste&height=363&id=uf464988e&originHeight=396&originWidth=793&originalType=binary&ratio=1&rotation=0&showTitle=false&size=482393&status=done&style=none&taskId=u02e71f64-ddaa-4cc9-becb-0a46bfcd685&title=&width=726.5" alt="image.png"></p><h3 id="HandlerExceptionResolver"><a href="#HandlerExceptionResolver" class="headerlink" title="HandlerExceptionResolver"></a>HandlerExceptionResolver</h3><p> • DispatcherServlet 默认装配的 HandlerExceptionResolver ：<br>– 没有使用  配置： </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622015230890-7bfef2d6-1c77-4d56-8365-b9f1b8beee27.png#averageHue=%23f8f5f3&clientId=u8c2f302c-299f-4&from=paste&height=349&id=ue959fdb5&originHeight=517&originWidth=1249&originalType=binary&ratio=1&rotation=0&showTitle=false&size=526244&status=done&style=none&taskId=uabae303e-4eb9-4f23-9086-085acbfc599&title=&width=843.5" alt="image.png"></p><h3 id="ExceptionHandlerExceptionResolver"><a href="#ExceptionHandlerExceptionResolver" class="headerlink" title="ExceptionHandlerExceptionResolver"></a>ExceptionHandlerExceptionResolver</h3><p> • 主要处理 Handler 中用 @ExceptionHandler 注解定义的 方法。<br> • @ExceptionHandler 注解定义的方法优先级问题：例如发 生的是NullPointerException，但是声明的异常有 RuntimeException 和 Exception，此候会根据异常的最近 继承关系找到继承深度最浅的那个 @ExceptionHandler 注解方法，即标记了 RuntimeException 的方法<br>• ExceptionHandlerMethodResolver 内部若找不 到@ExceptionHandler 注解的话，会找 @ControllerAdvice 中的@ExceptionHandler 注解方法  </p><h3 id="ResponseStatusExceptionResolver"><a href="#ResponseStatusExceptionResolver" class="headerlink" title="ResponseStatusExceptionResolver"></a>ResponseStatusExceptionResolver</h3><p> • 在异常及异常父类中找到 @ResponseStatus 注解，然 后使用这个注解的属性进行处理。<br> • 定义一个 @ResponseStatus 注解修饰的异常类  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622015341396-3526edbb-147e-4cde-9827-dbed3209b05b.png#averageHue=%23d3cfc6&clientId=u8c2f302c-299f-4&from=paste&height=65&id=u554e086e&originHeight=129&originWidth=1188&originalType=binary&ratio=1&rotation=0&showTitle=false&size=142036&status=done&style=none&taskId=ue812da90-3de0-44a8-ad60-2f9327854a1&title=&width=594" alt="image.png"><br> • 若在处理器方法中抛出了上述异常：<br>若ExceptionHandlerExceptionResolver 不解析述异常。由于 触发的异常 UnauthorizedException 带有@ResponseStatus 注解。因此会被ResponseStatusExceptionResolver 解析 到。最后响应HttpStatus.UNAUTHORIZED 代码给客户 端。HttpStatus.UNAUTHORIZED 代表响应码401，无权限。 关于其他的响应码请参考 HttpStatus 枚举类型源码。  </p><h3 id="DefaultHandlerExceptionResolver"><a href="#DefaultHandlerExceptionResolver" class="headerlink" title="DefaultHandlerExceptionResolver"></a>DefaultHandlerExceptionResolver</h3><p> • 对一些特殊的异常进行处理，比 如NoSuchRequestHandlingMethodException、HttpReques tMethodNotSupportedException、HttpMediaTypeNotSuppo rtedException、HttpMediaTypeNotAcceptableException 等。 </p><h3 id="SimpleMappingExceptionResolver"><a href="#SimpleMappingExceptionResolver" class="headerlink" title="SimpleMappingExceptionResolver"></a>SimpleMappingExceptionResolver</h3><p> • 如果希望对所有异常进行统一处理，可以使用 SimpleMappingExceptionResolver，它将异常类名映射为 视图名，即发生异常时使用对应的视图报告异常  </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622015449818-6d77c81e-5098-4a98-ad17-9db7a29e1535.png#averageHue=%23f7f7f3&clientId=u8c2f302c-299f-4&from=paste&height=199&id=u8b739902&originHeight=315&originWidth=1197&originalType=binary&ratio=1&rotation=0&showTitle=false&size=309203&status=done&style=none&taskId=u6e88108e-20eb-435d-b987-c085aa15ba2&title=&width=755.5" alt="image.png"></p><h1 id="SpringMVC-运行流程"><a href="#SpringMVC-运行流程" class="headerlink" title="SpringMVC 运行流程"></a>SpringMVC 运行流程</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622015540857-350d486b-e18e-479f-9385-759835d9042a.png#averageHue=%239da46d&clientId=u8c2f302c-299f-4&from=paste&height=714&id=ua130bd92&originHeight=736&originWidth=916&originalType=binary&ratio=1&rotation=0&showTitle=false&size=402262&status=done&style=none&taskId=uad06be1b-76be-4f10-a8b8-0340cf54664&title=&width=888" alt="image.png"></p><h1 id="在-Spring-的环境下使用-SpringMVC"><a href="#在-Spring-的环境下使用-SpringMVC" class="headerlink" title="在 Spring 的环境下使用 SpringMVC"></a>在 Spring 的环境下使用 SpringMVC</h1><p> Bean 被创建两次 ？  </p><p> • Spring 的 IOC 容器不应该扫描 SpringMVC 中的 bean, 对应的 SpringMVC 的 IOC 容器不应该扫描 Spring 中的 bean。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622015782481-bce3dcef-e094-480c-820b-fce241fc1ac8.png#averageHue=%23ebede2&clientId=u8c2f302c-299f-4&from=paste&height=316&id=ufee1a122&originHeight=631&originWidth=1405&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1024730&status=done&style=none&taskId=u03e6749a-2f86-4132-9609-5bd44f2642f&title=&width=702.5" alt="image.png"></p><p> 在 Spring MVC 配置文件中引用业务层的 Bean  </p><p> • 多个 Spring IOC 容器之间可以设置为父子关系， 以实现良好的解耦。<br>• Spring MVC WEB 层容器可作为 “业务层” Spring 容器的子容器：即 WEB 层容器可以引用业务层 容器的 Bean，而业务层容器却访问不到 WEB 层 容器的 Bean </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/666549/1622015827424-1f7d1e48-482a-4570-85e0-0788b62dd9d5.png#averageHue=%239ebd62&clientId=u8c2f302c-299f-4&from=paste&height=337&id=u58ab5192&originHeight=673&originWidth=1171&originalType=binary&ratio=1&rotation=0&showTitle=false&size=67963&status=done&style=none&taskId=u56e8e9ae-0c78-4e8c-bed6-974f0638598&title=&width=585.5" alt="image.png"></p><h1 id="SpringMVC-对比-Struts2"><a href="#SpringMVC-对比-Struts2" class="headerlink" title="SpringMVC 对比 Struts2"></a>SpringMVC 对比 Struts2</h1><p> • ①. Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter<br>• ②. Spring MVC 会稍微比 Struts2 快些. Spring MVC 是基 于方法设计, 而 Sturts2 是基于类, 每次发一次请求都会实 例一个 Action.<br>• ③. Spring MVC 使用更加简洁, 开发效率Spring MVC确实 比 struts2 高: 支持 JSR303, 处理 ajax 的请求更方便<br>• ④. Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些.  </p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习路线</title>
      <link href="/2023/04/10/Java%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2023/04/10/Java%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>2023 年已更新<br>by 程序员鱼皮 <a href="https://docs.qq.com/doc/DUG93dVNHbVZjZXpo/">知识星球</a></p><p><strong>符号表</strong></p><p>可以通过路线知识点前的表情字符，根据自己的实际情况选择学习：</p><p>●🌕 所有同学必须学习！！！<br>●🌖 非常急着找工作，才可不学；目标大厂，必须学习！<br>●🌗 急着找工作的话，可不学；目标大厂，建议学习<br>●🌘 时间充足的话，再去学<br>●⭐ 表示推荐资源</p><p><strong>前言</strong></p><p>首先呢，我们要了解 Java 的应用场景和就业方向，看看和自己的学习目的是否一致。</p><p>目前，Java 由于其优秀的特性以及火爆的生态，岗位需求量大，是后台开发、安卓开发、大数据开发的主流编程语言，因此学习资源也很丰富，值得学习！</p><p><strong>阶段 1：编程语言基础</strong></p><p><strong>目标</strong></p><p>培养兴趣、快速上手，能运行和编写简单的 Java 程序。</p><p>学完本阶段后，可以试着用 Java 解决一些数学计算问题、编写图书管理系统等桌面端 GUI 程序，甚至是五子棋之类的小游戏。</p><p><strong>🌕 Java 编程基础（45 天）</strong></p><p><strong>知识</strong></p><p>●Java 特点（看不懂没事，别背！）<br>●环境搭建<br>●IDEA 开发工具<br>○新建项目<br>○运行调试<br>○界面配置<br>○插件管理<br>●<strong>Java 基础语法</strong><br>○数据类型<br>○流程控制<br>●数组<br>●<strong>面向对象</strong><br>○方法<br>○重载<br>○封装<br>○继承<br>○多态<br>●抽象类<br>●接口<br>●枚举<br>●常用类<br>○String<br>○日期时间<br>●集合类<br>●泛型<br>●注解<br>●异常处理<br>●多线程<br>●IO 流<br>●反射</p><p><strong>学习建议</strong></p><p>1）坚持：初学一门语言时，一定要持续学习，不能中断！</p><p>2）实践：想要学好编程，一定要多敲代码！建议先跟着书上的例子敲一遍代码，然后试着自主编写代码，并完成课后练习。</p><p>3）万事开头难：不理解代码也没关系，可以学习 Debug 后，一行一行地打断点执行，查看程序的执行过程。千万不要觉得麻烦，养成习惯后真的能节省很多重复学习的时间。</p><p><strong>经典面试题</strong></p><p>1为什么重写 equals 还要重写 hashcode？<br>2&#x3D;&#x3D; 和 equals 比较的区别<br>3为啥有时会出现 4.0 - 3.6 &#x3D; 0.40000001 这种现象？<br>4final 关键字的作用<br>5介绍 Java 的集合类<br>6ArrayList 和 LinkedList 的区别</p><p><strong>资源</strong></p><p>● 视频<br>○⭐ 韩顺平 - 零基础 30 天学会 Java：<a href="https://www.bilibili.com/video/BV1fh411y7R8">https://www.bilibili.com/video/BV1fh411y7R8</a> （900 多集，顺序安排很合理，每个知识真正的打碎了，通俗、有示例、有实战、有思想）<br>● 文档<br>○ ⭐ 菜鸟教程：<a href="https://www.runoob.com/java/java-tutorial.html">https://www.runoob.com/java/java-tutorial.html</a> （可以在线练习）<br>○ 廖雪峰 Java 教程：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744">https://www.liaoxuefeng.com/wiki/1252599548343744</a><br>○ IDEA 中文教程：<a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial">https://github.com/judasn/IntelliJ-IDEA-Tutorial</a> （可以作为课外书来看）<br>○ IDEA Mac 快捷键指南，地址：<a href="https://www.jianshu.com/p/454c71172c46">https://www.jianshu.com/p/454c71172c46</a><br>○ IDEA Win 常用快捷键，地址：<a href="https://www.jianshu.com/p/5de7cca0fefc">https://www.jianshu.com/p/5de7cca0fefc</a><br>● 书籍<br>○《Head First Java》<br>● 在线游戏<br>○Codegym：<a href="https://codegym.cc/zh">https://codegym.cc/zh</a> （玩玩前几关培养兴趣不错，但后面收费了，不太建议用）</p><p><strong>🌖 Java 8（3 天）</strong></p><p><strong>知识</strong></p><p>●Stream API<br>●Lambda 表达式<br>●新日期时间 API<br>●接口默认方法</p><p><strong>学习建议</strong></p><p>Java 8 是如今企业开发中最主流的 Java 稳定版本，在这个版本出现了很多实用的新特性，虽然面试考点不多，但能够提升编程效率，建议学习。</p><p>此外，很多同学不怎么在简历上写自己会 Java 8，因此如果你把 Java 8 的知识点写在简历上，会大大加分的。</p><p><strong>经典面试题</strong></p><p>1Java 8 有哪些新特性？<br>2HashMap 在 jdk 1.7 和 1.8 的区别？</p><p><strong>资源</strong><br>● 视频<br>○⭐ 宋红康 - 全网最全Java零基础入门教程：<a href="https://www.bilibili.com/video/BV1Kb411W75N">https://www.bilibili.com/video/BV1Kb411W75N</a> （只看 Java 8 部分即可）<br>● 文档<br>○⭐ 菜鸟教程：<a href="https://www.runoob.com/java/java8-new-features.html">https://www.runoob.com/java/java8-new-features.html</a><br>● 书籍<br>○《Java 8 实战》：<a href="https://book.douban.com/subject/26772632/">https://book.douban.com/subject/26772632/</a><br>● 工具<br>○⭐ 在线编写运行  Java 8：<a href="https://www.tutorialspoint.com/compile_java8_online.php">https://www.tutorialspoint.com/compile_java8_online.php</a><br>● 其他<br>○Java 8 小代码片段：<a href="https://github.com/biezhi/30-seconds-of-java8">https://github.com/biezhi/30-seconds-of-java8</a></p><p><strong>练手项目</strong></p><p>●Java 实现简单计算器：<a href="https://www.lanqiao.cn/courses/185">https://www.lanqiao.cn/courses/185</a><br>●Eclipse 实现 Java 编辑器：<a href="https://www.lanqiao.cn/courses/287">https://www.lanqiao.cn/courses/287</a><br>●一本糊涂账：<a href="https://how2j.cn/module/104.html">https://how2j.cn/module/104.html</a><br>●Java 五子棋：<a href="https://blog.csdn.net/cnlht/article/details/8176130">https://blog.csdn.net/cnlht/article/details/8176130</a><br>●Java 中国象棋：<a href="https://blog.csdn.net/cnlht/article/details/8205733">https://blog.csdn.net/cnlht/article/details/8205733</a><br>●JAVA GUI 图书馆管理系统：<a href="https://github.com/uboger/LibraryManager">https://github.com/uboger/LibraryManager</a><br>●JAVA 坦克大战小游戏：<a href="https://github.com/wangzhengyi/TankWar">https://github.com/wangzhengyi/TankWar</a><br>●Swing 编写的俄罗斯方块：<a href="https://github.com/HelloClyde/Tetris-Swing">https://github.com/HelloClyde/Tetris-Swing</a><br>●小小记账本：<a href="https://github.com/xenv/SmallAccount">https://github.com/xenv/SmallAccount</a> （适合了解数据库的同学）</p><p><strong>尾声</strong></p><p>学完了 Java 基础后，有些同学会感到迷茫了啊，感觉好像啥也做不出来，不知道下一步做什么，我这一身的本领该如何施展啊？</p><p>不要慌，也不要急着去学新技术，接下来我们要多用 Java 来写代码了，巩固基础，但是写什么呢？</p><p>当然是数据结构和算法！</p><p><strong>阶段 2：巩固基础</strong><br>注意！如果你时间不够（比如只有 6 个月左右），只是想快速找到工作，那么本章节甚至可以完全跳过，先去学习开发框架做项目，后面再慢慢弥补基础即可。</p><p><strong>目标</strong></p><p>想学好编程，计算机基础知识要学好。</p><p>比如算法，是程序员的灵魂。学好算法有助于我们理解程序、开拓思路，因此也是很多公司面试时考察的关键，在找工作前，还是要刷个上百道算法题目的。</p><p>我们这个阶段的目标是：熟练使用 Java 语言来编写程序，巩固 Java 基础。（那直接用 Java 来写算法题目，一举两得，岂不美哉？）</p><p>此外，建议大家利用零碎时间多去了解 <strong>计算机基础知识</strong> ，比如操作系统、计算机网络等，对你后面学习开发框架之类的知识都有帮助。</p><p><strong>Java 基础（30 天）</strong></p><p><strong>学习建议</strong></p><p>建议大家去阅读 《Java 核心技术卷 1》，这本书堪称经典，是帮助你复习巩固  Java 的不二之选，其中图形界面章节可以选择不看。</p><p>之后可以刷牛客的 Java 练习题，检验自己的水平，我当时刷了两遍 1000 题（每天 30 题，1 个月也就刷完了，二刷会更快！）。虽然都是选择题，但能学到很多 Java 语言的特性、避免写代码时容易犯的错误。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/398476/1653928648646-25fe146b-347b-4a07-9adb-259145d4a53b.png#averageHue=%23faf8f8&from=url&id=KmMPG&originHeight=750&originWidth=1481&originalType=binary&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&title="><br>牛客 Java 题库</p><p><strong>资源</strong></p><p>●书籍<br>○⭐《Java 核心技术卷 1》：<a href="https://www.aliyundrive.com/s/SNdB6gr1Xz4">https://www.aliyundrive.com/s/SNdB6gr1Xz4</a> 提取码: u74e<br>●练习<br>○⭐ 牛客题库：<a href="https://www.nowcoder.com/intelligentTest">https://www.nowcoder.com/intelligentTest</a></p><p><strong>🌖 数据结构与算法</strong><br>请参考学习路线：<a href="https://bcdh.yuque.com/books/share/2dd2567c-a826-4d9d-9303-bd288269e874/cyovgg">数据结构和算法学习路线</a></p><p><strong>🌘 计算机导论</strong></p><p><strong>知识</strong></p><p>●计算机发展历史<br>●计算机应用领域<br>●计算机发展方向<br>●计算机基本组成<br>●二进制<br>●编程语言发展</p><p><strong>学习建议</strong></p><p>大学计算机专业的同学一般刚开学就会上这门课，虽说学习它并不会直接提高你的编程技能，但能够让你更了解计算机和编程，从而在一定程度上帮助你培养学习兴趣、确定学习方向。</p><p>自学的话，不用刻意去学习计算机导论，而是可以通过看视频、阅读课外读物的方式慢慢地了解计算机的故事。</p><p><strong>资源</strong></p><p>●视频<br>○《计算机科学速成课》：<a href="https://www.bilibili.com/video/BV1EW411u7th">https://www.bilibili.com/video/BV1EW411u7th</a> （从底层到上层的计算机知识科普，强烈推荐）<br>●书籍<br>○《半小时漫画计算机》：<a href="https://book.douban.com/subject/35619441/">https://book.douban.com/subject/35619441/</a></p><p><strong>🌖 操作系统</strong><br>请参考学习路线：<a href="https://bcdh.yuque.com/books/share/2dd2567c-a826-4d9d-9303-bd288269e874/udgg85">操作系统学习路线</a></p><p><strong>知识</strong></p><p>●操作系统的组成<br>●进程、线程<br>●进程 &#x2F; 线程间通讯方式<br>●进程调度算法<br>●进程 &#x2F; 线程同步方式<br>●进程 &#x2F; 线程状态<br>●死锁<br>●内存管理<br>●局部性原理</p><p><strong>学习建议</strong></p><p>说实话，操作系统这一块知识挺枯燥的。你说说我现在项目都不会做，你又让我看这些理论，是不是想让我头秃？</p><p>我的建议是，可以先利用课余时间看一些网课或者有趣的课外书，对一些操作系统的概念先有个大致的印象，比如进程、线程、死锁，等后面有时间了再系统学习、等到找工作了再去背相关八股文。</p><p>还在校园就跟着学校的进度学习就成，自学的话可以看下《清华操作系统原理》视频，有实力的小伙伴，能看懂大黑书就更好了，但如果看不懂也别担心，这并不影响你后续知识的学习。</p><p><strong>经典面试题</strong></p><p>1什么是死锁？死锁产生的条件？<br>2线程有哪几种状态？<br>3有哪些进程调度算法？<br>4什么是缓冲区溢出？</p><p><strong>资源</strong></p><p>● 视频<br>○《清华操作系统原理》：<a href="https://www.bilibili.com/video/BV1uW411f72n">https://www.bilibili.com/video/BV1uW411f72n</a><br>● 书籍<br>○《编码》<br>○《30天自制操作系统》<br>○《现代操作系统》（难度较大，不推荐新手看）<br>○《深入理解计算机系统》（难度较大，不推荐新手看）<br>○《 自己动手写操作系统》（国产好书，网上可以下载）<br>● 大学课件<br>○浙大操作系统：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></p><p><strong>🌖 计算机网络</strong><br>请参考学习路线：<a href="https://bcdh.yuque.com/books/share/2dd2567c-a826-4d9d-9303-bd288269e874/phgtgu">计算机网络学习路线</a></p><p><strong>知识</strong></p><p>●网络分层模型<br>●网络传输过程<br>●IP、端口<br>●HTTP &#x2F; HTTPS 协议<br>●UDP &#x2F; TCP 协议<br>●ARP 地址解析协议<br>●网络安全<br>●DNS 域名解析</p><p><strong>学习建议</strong></p><p>很多学习 Java 开发的同学最后都是从事 <strong>后端开发</strong> 的工作，而计算机网络知识是后端开发的重点。</p><p>和操作系统一样，自学网络可能会很枯燥，建议先看有趣的课外书，比如《图解 HTTP》；或者有趣的视频，比如《计算机网络微课堂》。后面要找工作面试前，再重点去背一些八股文就好了。还在学校的同学好好上课一般就没问题。</p><p>学习基础能帮助自己今后发展更稳定，且更容易接受新知识，所以请不要相信基础无用论。</p><p><strong>经典面试题</strong></p><p>1计算机网络各层有哪些协议？<br>2TCP 和 UDP 协议的区别？<br>3TCP 为什么需要三次握手和四次挥手？<br>4HTTP 和 HTTPS 协议的区别？</p><p><strong>资源</strong></p><p>● 视频<br>○《计算机网络微课堂》：<a href="https://www.bilibili.com/video/BV1c4411d7jb">https://www.bilibili.com/video/BV1c4411d7jb</a><br>● 书籍<br>○⭐《图解 HTTP》<br>○《网络是怎样连接的》<br>○⭐《图解 TCP &#x2F; IP》<br>● 大学课件<br>○浙大计算机网络基础：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></p><p><strong>尾声</strong></p><p>巩固基础要花至少 1 个月的时间，当你读完《Java 核心技术卷1》并且不用查询文档也能熟练地用 Java 做题时，就可以接着往下了。</p><p><strong>阶段 3：企业开发基础</strong></p><p><strong>目标</strong></p><p>面向薪资编程，学习实际后台开发工作要用的基础技术和框架，并能 <strong>独立</strong> 做出一个具有完整功能的 Java Web 项目。</p><p>学完这个阶段后，你应该已经能独立开发出大多数常见的后台系统了，比如各种管理系统、商城系统等。</p><p><strong>🌕 MySQL 数据库（7 天）</strong></p><p>企业中大部分业务数据都是用关系型数据库存储的，因此数据库是后台开发同学的必备技能，其中 MySQL 数据库是目前的主流，也是面试时的重点。</p><p><strong>知识</strong></p><p>●基本概念<br>●MySQL 搭建<br>●SQL 语句编写<br>●约束<br>●索引<br>●事务<br>●锁机制<br>●设计数据库表<br>●性能优化</p><p><strong>学习建议</strong></p><p>其中，<strong>SQL 语句编写</strong> 和 <strong>设计数据库表</strong> 这两个能力一定要有！</p><p>比如让你做一个学生管理系统，你要能想到需要哪些表，比如学生表、班级表；每个表需要哪些字段、字段类型。</p><p>这就要求大家多写 SQL、多根据实际的业务场景去练习设计能力。</p><p><strong>经典面试题</strong></p><p>1MySQL 索引的最左原则<br>2InnoDB 和 MyIsam 引擎的区别？<br>3有哪些优化数据库性能的方法？<br>4如何定位慢查询？<br>5MySQL 支持行锁还是表锁？分别有哪些优缺点？</p><p><strong>资源</strong></p><p>●视频<br>○⭐ 2022 黑马 MySQL 教程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru">https://www.bilibili.com/video/BV1Kr4y1i7ru</a>（倾向于速成，初学只看完 P57 节前的基础篇即可，后面可以再来补进阶知识）<br>○老杜 - mysql入门基础 + 数据库实战：<a href="https://www.bilibili.com/video/BV1Vy4y1z7EX">https://www.bilibili.com/video/BV1Vy4y1z7EX</a> （内容相对精炼，有习题）<br>○尚硅谷 - MySQL基础教程：<a href="https://www.bilibili.com/video/BV1xW411u7ax">https://www.bilibili.com/video/BV1xW411u7ax</a> （小姐姐讲课，但感觉音质一般）<br>●在线练习<br>○⭐ SQL 自学网：<a href="http://xuesql.cn/">http://xuesql.cn/</a><br>○⭐ SQL 在线运行：<a href="https://www.bejson.com/runcode/sql/">https://www.bejson.com/runcode/sql/</a><br>●文档<br>○SQL - 菜鸟教程：<a href="https://www.runoob.com/sql/sql-tutorial.html">https://www.runoob.com/sql/sql-tutorial.html</a><br>○MySQL - 菜鸟教程：<a href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a><br>●网站<br>○<a href="https://www.code-nav.cn/rd/?rid=b00064a76012546b016e274a3724c5f0">数据库大全</a>：果创云收录的各种数据库表设计</p><p><strong>🌕 开发框架（60 天）</strong></p><p>Java 之所以能成为主流的企业开发语言，很大一部分原因是它完善的框架生态，用好框架，不仅能够大大提升开发效率，还能提高项目的稳定性、减少维护成本。</p><p>开发框架是后台开发工作中不可或缺的，也是面试考察的重点，一定要好好学！</p><p>不知道 Java 能做什么的朋友们，学完开发框架，就会有答案啦。</p><p>下面给大家推荐的都是企业中应用最多的主流开发框架，知识点比较零碎，就放在一起讲了。</p><p><strong>知识</strong></p><p><strong>🌕 Java Web</strong></p><p>● 描述：Java 网页应用开发基础<br>● 一丢丢前端基础<br>● XML<br>● JSON<br>● Servlet<br>● Filter<br>● Listener<br>● JSP<br>● JSTL<br>● Cookie<br>● Session </p><p><strong>🌕 Spring 5</strong></p><p>●描述：Java 轻量级应用框架<br>●IOC<br>●AOP<br>●事务</p><p><strong>🌕 SpringMVC</strong></p><p>●描述：Java 轻量级 web 开发框架<br>●什么是 MVC？<br>●请求与响应<br>●Restful API<br>●拦截器<br>●配置<br>●执行过程</p><p><strong>🌕 MyBatis</strong></p><p>●描述：数据访问框架，操作数据库进行增删改查等操作<br>●增删改查<br>●全局配置<br>●动态 SQL<br>●缓存<br>●和其他框架的整合<br>●逆向工程</p><p><strong>🌗 MyBatis Plus</strong></p><p>●描述：Mybatis 的增强工具，能够简化开发、提高效率<br>●引入<br>●通用 CRUD<br>●条件构造器<br>●代码生成器<br>●插件扩展<br>●自定义全局操作</p><p><strong>🌕 SpringBoot 2</strong></p><p>●描述：简化 Spring 应用的初始搭建以及开发过程，提高效率<br>●常用注解<br>●资源整合<br>●高级特性<br>●本地热部署</p><p><strong>🌗 Spring Security</strong></p><p>●描述：Spring 的安全管理框架<br>●用户认证<br>●权限管理<br>●相关技术：Shiro</p><p><strong>🌗 Maven &#x2F; Gradle</strong></p><p>●描述：项目管理工具<br>●构建<br>●依赖管理<br>●插件<br>●配置<br>●子父工程<br>●多模块打包构建<br>●Nexus 私服搭建</p><p><strong>学习建议</strong></p><p>由于技术较多，且框架之间存在一定的联系，因此建议大家看同一系列的视频教程（尚硅谷、狂神说等等都可以），以保证学习内容的连续以及体验上的一致。</p><p>学这些技术的时候，<strong>千万不能懒</strong> ！一定要多记笔记，并且跟着老师写代码。原理部分不要太过纠结，先以能跟着敲出代码、写出可运行的项目为主，有些东西做出来也能帮助你更好地理解理论。</p><p>学习顺序挺重要的，建议按我推荐的顺序学，不要一上手就学 Spring Boot。只有先学习下自己整合框架的方法，才能帮你理解 SpringBoot 解决的问题，感受到它的方便和高效。</p><p>Maven &#x2F; Gradle 当成工具用就好，面试基本不问，跟着框架教程去用就行了，急着找工作的话，先不用花太多时间去深入学。大厂面试问这个的也不多。</p><p><strong>经典面试题</strong></p><p>1Spring 的 IOC 和 AOP 是什么，有哪些优点？<br>2Spring 框架用到了哪些设计模式？<br>3介绍 Spring Bean 的生命周期<br>4MyBatis 如何实现延迟加载？<br>5介绍 MyBatis 的多级缓存机制</p><p><strong>资源</strong><br>已下资源分为两大类，希望快速做出项目、快速就业的同学请看【速成视频】。</p><p>●速成视频（按顺序看，同类视频任意选择 1 个即可）<br>○⭐ 2023 黑马 JavaWeb：<a href="https://www.bilibili.com/video/BV1m84y1w7Tb">https://www.bilibili.com/video/BV1m84y1w7Tb</a>（包含了前端、MySQL 数据库、Java Web、MyBatis、Spring MVC、Spring、Spring Boot、Maven 等知识）<br>○2022 尚硅谷 SSM + MyBatis Plus 整合学习：<a href="https://www.bilibili.com/video/BV1Ya411S7aT">https://www.bilibili.com/video/BV1Ya411S7aT</a><br>○2022 黑马 SSM + MyBatis Plus 整合学习：<a href="https://www.bilibili.com/video/BV1Fi4y1S7ix">https://www.bilibili.com/video/BV1Fi4y1S7ix</a><br>○黑马 Spring Boot 2：<a href="https://www.bilibili.com/video/BV15b4y1a7yG">https://www.bilibili.com/video/BV15b4y1a7yG</a>（较新）<br>○尚硅谷 Spring Boot 2：<a href="https://www.bilibili.com/video/BV19K4y1L7MT">https://www.bilibili.com/video/BV19K4y1L7MT</a></p><p>● 非速成视频（按顺序看）<br>○ ⭐ 尚硅谷 JavaWeb 全套教程：<a href="https://www.bilibili.com/video/BV1Y7411K7zz">https://www.bilibili.com/video/BV1Y7411K7zz</a> （前端部分最好也看下）<br>○ ⭐ 尚硅谷 - Spring 5 框架最新版教程（idea版）：<a href="https://www.bilibili.com/video/BV1Vf4y127N5">https://www.bilibili.com/video/BV1Vf4y127N5</a><br>○ ⭐ 尚硅谷 - SpringMVC 2021 最新教程：<a href="https://www.bilibili.com/video/BV1Ry4y1574R">https://www.bilibili.com/video/BV1Ry4y1574R</a><br>○ ⭐ 尚硅谷 - MyBatis 实战教程全套完整版：<a href="https://www.bilibili.com/video/BV1mW411M737">https://www.bilibili.com/video/BV1mW411M737</a><br>○ ⭐ 尚硅谷 - MyBatisPlus 教程：<a href="https://www.bilibili.com/video/BV1Ds411E76Y">https://www.bilibili.com/video/BV1Ds411E76Y</a><br>○ Maven 零基础入门教程：<a href="https://www.bilibili.com/video/BV1TW411g7hP">https://www.bilibili.com/video/BV1TW411g7hP</a> （搞不懂 Maven 可以看看）<br>○ ⭐ 雷丰阳 2021 版 SpringBoot2 零基础入门：<a href="https://www.bilibili.com/video/BV19K4y1L7MT">https://www.bilibili.com/video/BV19K4y1L7MT</a><br>○ 尚硅谷 - SpringSecurity 框架教程：<a href="https://www.bilibili.com/video/BV15a411A7kP">https://www.bilibili.com/video/BV15a411A7kP</a></p><p><strong>🌘 开发规范（3 天）</strong></p><p>开发不规范，同事两行泪。</p><p>开发规范是团队开发中必须遵守的，有利于提高项目的开发效率、降低维护成本。</p><p><strong>知识</strong></p><p>●代码规范<br>○代码风格<br>○命名<br>○其他规则<br>●代码校验（CheckStyle）<br>●提交规范</p><p><strong>学习建议</strong></p><p>有时间的话，简单过一遍大厂团队的代码规范手册就好了，以后做项目的时候能想起来的话就去使用，或者从书中、网上查规范文档，再去遵守。</p><p>项目做得多了，自然会养成好的习惯，不用刻意去记（毕竟每个团队规范也不完全相同，背了也没用）。也可以直接利用开发工具自带的一些代码检查插件，帮忙养成好的编码习惯。</p><p><strong>资源</strong></p><p>● 书籍<br>○⭐ 阿里巴巴 Java 开发手册：<a href="https://developer.aliyun.com/graph/java">https://developer.aliyun.com/graph/java</a> （搜索《Java开发手册》）<br>● 视频<br>○华山版《Java开发手册》独家讲解：<a href="https://developer.aliyun.com/live/1201">https://developer.aliyun.com/live/1201</a><br>● 文档<br>○Google Java Style Guide：<a href="https://google.github.io/styleguide/javaguide.html">https://google.github.io/styleguide/javaguide.html</a> （谷歌 Java 代码规范）</p><p><strong>🌕 Git（3 天）</strong><br>请参考学习路线：<a href="https://bcdh.yuque.com/books/share/2dd2567c-a826-4d9d-9303-bd288269e874/nvb6om">Git &amp; GitHub 学习路线</a></p><p>此前大家可能听说过 GitHub，一流的代码开源托管平台。</p><p>Git 和它可不一样，是一个版本控制工具，可以更好地管理和共享项目代码，比如把自己的代码传到 GitHub 上、或者从远程下载。</p><p>无论自己做项目、还是团队开发，Git 都是现在不可或缺的神器。</p><p><strong>知识</strong></p><p>●区分 Git 和 GitHub<br>●工作区<br>●分支<br>●代码提交、推送、拉取、回退、重置<br>●分支操作<br>●代码合并、解决冲突<br>●标签<br>●cherry-pick<br>●Git Flow<br>●相关技术：SVN（比较老）</p><p><strong>学习建议</strong></p><p>每个命令跟着敲一遍，有个大致的印象，会用即可。</p><p>建议平时大家可以多把自己的代码使用 Git 命令上传到 GitHub 上，用的多了自然就熟悉了。</p><p><strong>经典面试题</strong></p><p>1如何解决提交冲突？<br>2提交不小心出现误操作，如何撤销？<br>3什么是 Git Flow，它有什么好处？</p><p><strong>资源</strong></p><p>● 视频<br>○⭐【尚硅谷】5h打通Git全套教程丨2021最新IDEA版 <a href="https://www.bilibili.com/video/BV1vy4y1s7k6">https://www.bilibili.com/video/BV1vy4y1s7k6</a><br>● 书籍<br>○猴子都能懂的 Git 入门 <a href="https://backlog.com/git-tutorial/cn/">https://backlog.com/git-tutorial/cn/</a><br>○⭐ GitHub 漫游指南 <a href="https://github.phodal.com/">https://github.phodal.com/</a><br>● 文档<br>○GitHub 官方文档：<a href="https://docs.github.com/cn">https://docs.github.com/cn</a><br>● 游戏<br>○Learning Git Branching：<a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></p><p><strong>🌖 Linux（10 天）</strong><br>请参考学习路线：<a href="https://bcdh.yuque.com/books/share/2dd2567c-a826-4d9d-9303-bd288269e874/qofaxe">Linux 学习路线</a></p><p>企业中的很多前后台项目都是部署在 Linux 服务器上的，因此很有必要熟悉 Linux 的操作和脚本的编写。</p><p>后面学微服务、学架构都是在多台服务器操作，如果你不熟悉 Linux，会有点吃力。</p><p><strong>知识</strong></p><p>●Linux 系统安装<br>●环境变量<br>●文件管理<br>●用户管理<br>●内存管理<br>●磁盘管理<br>●进程管理<br>●网络管理<br>●软件包管理<br>●服务管理<br>●日志管理<br>●Linux 内核<br><strong>●常用命令</strong><br><strong>●常用环境搭建</strong><br><strong>●Shell 脚本编程</strong><br><strong>●VIM 的使用</strong></p><p><strong>学习建议</strong></p><p>多动手实践，建议自己购买一台云服务器，并且在本地搭建 Linux 虚拟机环境。</p><p>一定要自己从 0 开始手敲命令安装软件、部署服务，熟悉整个项目的上线流程。</p><p>每个命令至少要跟着敲一遍，了解它们的作用，并通过自然地练习，熟悉常用的 Linux 命令。</p><p>记不住没关系，用文档查就行了。</p><p>先会用，再理解。一般面试问的 Linux 题目也不会很难，面试前去背一下八股文就没什么问题，感兴趣的话可以去看看 Linux 内核设计。</p><p><strong>经典面试题</strong></p><p>1如何查看某个进程的运行状态？<br>2如何在 Linux 上查看 2 G 的大文件？<br>3Linux 软链接和硬链接的区别</p><p><strong>资源</strong></p><p>● 视频<br>○⭐ 2021 韩顺平 一周学会Linux <a href="https://www.bilibili.com/video/BV1Sv411r7vd">https://www.bilibili.com/video/BV1Sv411r7vd</a> （基于 CentOS 7.6 版本较新）<br>● 书籍<br>○《鸟哥的 Linux 私房菜 —— 基础篇》<a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php">http://cn.linux.vbird.org/linux_basic&#x2F;linux_basic.php</a> （经典）<br>● 文档<br>○Linux 工具快速教程：<a href="https://linuxtools-rst.readthedocs.io/">https://linuxtools-rst.readthedocs.io</a> （基础、工具进阶、工具参考）<br>● 实战<br>○⭐ 蓝桥云课 Linux 基础入门：<a href="https://www.lanqiao.cn/courses/1">https://www.lanqiao.cn/courses/1</a><br>○腾讯云动手实验室：<a href="https://cloud.tencent.com/developer/labs">https://cloud.tencent.com/developer/labs</a><br>○阿里云体验实验室：<a href="https://developer.aliyun.com/adc/labs/">https://developer.aliyun.com/adc/labs/</a><br>○阿里云知行实验室：<a href="https://start.aliyun.com/">https://start.aliyun.com/</a><br>○华为云沙箱实验室：<a href="https://lab.huaweicloud.com/">https://lab.huaweicloud.com/</a><br>● 社区<br>○Linux 中国：<a href="https://linux.cn/">https://linux.cn/</a><br>● 工具<br>○⭐ Linux 命令搜索：<a href="https://wangchujiang.com/linux-command">https://wangchujiang.com/linux-command</a><br>○Linux 命令大全手册：<a href="https://www.linuxcool.com/">https://www.linuxcool.com/</a><br>○Linux 命令示例：<a href="http://linux-commands-examples.com/">http://linux-commands-examples.com/</a><br>○宝塔 Linux 面板：<a href="https://www.bt.cn/">https://www.bt.cn/</a></p><p><strong>🌘 前端基础（14 天）</strong></p><p>虽然 Java 程序员面试时基本不会出现前端相关问题，但是在企业中，往往需要前后端程序员配合完成工作。会一些前端，不仅可以提高你们的协作效率，还能提高自己对整个项目的了解和掌控力，甚至能独立开发出一个完整项目！这点也是能给面试加分的。</p><p><strong>知识</strong></p><p>●HTML<br>●CSS<br>●JavaScript<br>○Ajax<br>●Vue</p><p><strong>学习建议</strong></p><p>不需要学习太多的前端技术，熟悉下基础的前端三件套，了解前端是如何向后端发送请求来做数据交互的一般就够了。有时间的话可以学下 Vue ，是比较容易上手的主流前端开发框架，Vue + SpringBoot 还是很香的。</p><p><strong>资源</strong></p><p>参见鱼皮原创的前端学习路线：<a href="https://mp.weixin.qq.com/s/HbzLEt6NOP9Is9F3GOnbUQ">https://mp.weixin.qq.com/s/HbzLEt6NOP9Is9F3GOnbUQ</a></p><p><strong>练手项目</strong></p><p>更多请见本路线阶段 5：[项目源码（50 套）](###项目源码（50 套）) 。</p><p>●HotelSystem：<a href="https://github.com/misterchaos/HotelSystem">https://github.com/misterchaos/HotelSystem</a> （酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架）<br>●超市管理系统：<a href="https://github.com/zhanglei-workspace/shopping-management-system">https://github.com/zhanglei-workspace/shopping-management-system</a><br>●Mall4j：<a href="https://github.com/gz-yami/mall4j">https://github.com/gz-yami/mall4j</a> （Spring Boot 电商系统）<br>●newbee-mall：<a href="https://github.com/newbee-ltd/newbee-mall">https://github.com/newbee-ltd/newbee-mall</a> （基于 Spring Boot 2.X 的全栈电商系统）<br>●litemall：<a href="https://github.com/linlinjava/litemall">https://github.com/linlinjava/litemall</a> （小商城系统，Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端）<br>●forum-java：<a href="https://github.com/Qbian61/forum-java">https://github.com/Qbian61/forum-java</a> （一款用 Java Spring Boot 实现的现代化社区系统）</p><p><strong>尾声</strong></p><p>学完这个阶段的知识后，一定要再串起来回忆一遍，必须自己独立开发一个 Java Web 项目（量级可以不大，但你学过的技术尽可能地用上），能发布到 Linux 服务器上让其他小伙伴访问就更好了~</p><p>如果你只是对 Java 感兴趣、或者只是想试着自己开发后台，并不是想靠 Java 找工作的话，学到这里就可以了。可以把更多时间投入到你主方向的学习中。</p><p>但如果你是想找 Java 方向的工作，尤其是想进大厂的话，一定要继续努力，用心学习下个阶段的企业开发进阶知识。</p><p><strong>阶段 4：企业开发进阶</strong></p><p><strong>目标</strong></p><p>学习更多企业级开发技术和编程思想，能够结合多种技术，独立开发出架构合理的完整系统，<strong>解决实际问题</strong> 。</p><p>要了解为什么需要这个技术？什么时候用这个技术？某个需求该用哪些技术？</p><p>当然，这个阶段的内容有些过于丰富，不是所有的东西都要学，大家可以根据自己的实际情况（时间），有选择地学习。</p><p><strong>🌘 软件工程</strong></p><p>软件开发和管理的一些概念、原则、技术、方法、工具和经验。</p><p><strong>知识</strong></p><p>●软件的本质<br>●软件特性<br>●软件过程<br>●软件开发原则<br>○开闭原则<br>○里氏替换原则<br>○依赖倒置原则<br>○单一职责原则<br>○接口隔离原则<br>○迪米特法则<br>●软件过程模型<br>●敏捷开发<br>●软件开发模型<br>●需求建模<br>●软件设计<br>●UML<br>●体系结构设计<br>●设计模式<br>●软件质量管理<br>●评审<br>●软件质量保证<br>●软件测试<br>○单元测试<br>○集成测试<br>○系统测试<br>○压力测试<br>○部署测试<br>●软件配置管理<br>●软件项目管理<br>●软件项目估算<br>●项目进度安排<br>●风险管理<br>●软件过程改进<br>○成熟度模型</p><p><strong>学习建议</strong></p><p>大学软件专业的必修课，偏理论，能学到很多企业软件开发的方法，也是对软件开发同学综合能力的提升，有时间的话可以了解下。但对想要快速找工作的同学来说，忽略即可，面试基本不会问。</p><p><strong>资源</strong></p><p>● 书籍<br>○《软件工程：实践者的研究方法》：<a href="https://book.douban.com/subject/6047742/">https://book.douban.com/subject/6047742/</a> （经典大黑书，讲的非常全面，但同样完整读下来还是有些难度的）<br>○《软件开发的 201 个原则》：<a href="https://book.douban.com/subject/35628886/">https://book.douban.com/subject/35628886/</a> （工具书，看一遍挺好的）<br>● 视频<br>○清华大学软件工程：<a href="https://www.bilibili.com/video/BV1eE411V7Cr">https://www.bilibili.com/video/BV1eE411V7Cr</a><br>○北京大学软件工程：<a href="https://www.bilibili.com/video/BV1Vt411V72G">https://www.bilibili.com/video/BV1Vt411V72G</a><br>○大连工业大学软件工程：<a href="https://www.bilibili.com/video/BV1Ns41177VM">https://www.bilibili.com/video/BV1Ns41177VM</a><br>● 大学课件<br>○浙大计算机软件工程：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></p><p><strong>🌖 设计模式（21 天）</strong><br>请参考学习路线：<a href="https://bcdh.yuque.com/books/share/2dd2567c-a826-4d9d-9303-bd288269e874/gemmvk">设计模式学习路线</a></p><p>设计模式是软件开发中解决一类问题的通用方法。</p><p>使用设计模式能让你写出更优雅、可维护的代码，也正因如此，很多框架源码都用到了设计模式，你不学很难看懂。</p><p>此外，鱼皮改了几百份简历，基本上没有同学把设计模式写在项目经历中。因此学好设计模式并写在简历上是很加分的！</p><p><strong>知识</strong></p><p>● 创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程<br>○单例模式<br>○工厂方法模式<br>○抽象工厂<br>○建造者模式<br>○原型模式<br>● 结构型模式：把类或对象结合在一起形成一个更大的结构<br>○适配器模式<br>○组合模式<br>○装饰器模式<br>○代理模式<br>○享元模式<br>○外观模式<br>○桥接模式<br>● 行为型模式：类和对象如何交互，及划分责任和算法<br>○迭代器模式<br>○模板方法模式<br>○策略模式<br>○命令模式<br>○状态模式<br>○责任链模式<br>○备忘录模式<br>○观察者模式<br>○访问者模式<br>○中介者模式<br>○解释器模式</p><p><strong>学习建议</strong></p><p>先理解概念，了解每个设计模式的特点和应用场景，再多加练习，运用到实际项目。</p><p><strong>经典面试题</strong></p><p>1单例模式有哪些实现方式？有哪些优缺点？请手写其中一种<br>2你用过哪些设计模式，为什么用它？</p><p><strong>资源</strong></p><p>● 书籍<br>○⭐《图解设计模式》（强烈推荐这本书，正是用 Java 语言实现，图多、有示例代码、有习题和答案，很不错）<br>○《Head First 设计模式》<br>○《大话设计模式》<br>○《设计模式：可复用面向对象软件的基础》（大黑书，有能力的话也可以去读）<br>● 视频<br>○尚硅谷图解 Java 设计模式：<a href="https://www.bilibili.com/video/BV1G4411c7N4">https://www.bilibili.com/video/BV1G4411c7N4</a><br>● 文档<br>○菜鸟教程：<a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a><br>○图说设计模式：<a href="https://design-patterns.readthedocs.io/zh_CN/latest/">https://design-patterns.readthedocs.io/zh_CN&#x2F;latest&#x2F;</a></p><p><strong>🌕 Redis（14 天）</strong><br>请参考学习路线：<a href="https://bcdh.yuque.com/books/share/2dd2567c-a826-4d9d-9303-bd288269e874/qunv5d">Redis 学习路线</a></p><p>缓存是高并发系统不可或缺的技术，可以提高系统的性能和并发，而 Redis 是实现缓存的最主流技术，因此它是后台开发必学的知识点，也是面试重点。</p><p><strong>知识</strong></p><p>●Redis 基础<br>●什么是缓存？<br>●本地缓存<br>○Caffeine 库<br>●多级缓存<br>●Redis 分布式缓存<br>○数据类型<br>○常用操作<br>○Java 操作 Redis<br>■Spring Boot Redis Template<br>■Redisson<br>○主从模型搭建<br>○哨兵集群搭建<br>○日志持久化<br>●缓存（Redis）应用场景<br>○数据共享<br>○单点登录<br>○计数器<br>○限流<br>○点赞<br>○实时排行榜<br>○分布式锁<br>●缓存常见问题<br>○缓存雪崩<br>○缓存击穿<br>○缓存穿透<br>○缓存更新一致性<br>●相关技术：Memcached、Ehcache</p><p><strong>学习建议</strong></p><p>学会如何简单地使用缓存并不难，和数据库类似，无非就是调用 API 对数据进行增删改查。</p><p>因此，建议先能够独立使用它，了解缓存的应用场景；再学习如何在 Java 中操作缓存中间件，并尝试和项目相结合，提高系统的性能。</p><p>跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。</p><p><strong>经典面试题</strong></p><p>1Redis 为什么快？<br>2Redis 有哪些常用的数据结构？<br>3Redis RDB 和 AOF 持久化的区别，如何选择？<br>4如何解决缓存击穿、缓存穿透、雪崩问题？<br>5如何用 Redis 实现点赞功能，怎么设计 Key &#x2F; Value？</p><p><strong>资源</strong></p><p>●视频<br>○⭐ 2022 黑马 Redis 从基础到原理：<a href="https://www.bilibili.com/video/BV1cr4y1671t">https://www.bilibili.com/video/BV1cr4y1671t</a>（结合项目去讲，强烈推荐）<br>○尚硅谷 - 2021 最新 Redis 6 入门到精通教程：<a href="https://www.bilibili.com/video/BV1Rv41177Af">https://www.bilibili.com/video/BV1Rv41177Af</a> （基于 Redis 6 的，推荐）<br>●文档<br>○Redis 命令参考：<a href="http://redisdoc.com/">http://redisdoc.com/</a><br>○Redis 面试题整理：<a href="https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md">https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis问题.md</a><br>●书籍<br>○《Redis 实战》（经典）<br>●工具<br>○⭐ Redis 在线练习：<a href="https://try.redis.io/">https://try.redis.io/</a> （强烈推荐）</p><p><strong>🌖 消息队列（14 天）</strong></p><p>消息队列是用于传输和保存消息的容器，也是大型分布式系统中常用的技术，主要解决应用耦合、异步消息、流量削锋等问题。后台开发必学，也是面试重点。</p><p><strong>知识</strong></p><p>●消息队列的作用<br>●RabbitMQ 消息队列<br>○生产消费模型<br>○交换机模型<br>○死信队列<br>○延迟队列<br>○消息持久化<br>○Java 操作<br>○集群搭建<br>●相关技术：Kafka、ActiveMQ、TubeMQ、RocketMQ</p><p><strong>学习建议</strong></p><p>和缓存一样，学会如何使用消息队列并不难，无非就是调用 API 去生产、转发和消费消息。</p><p>因此，建议先能够独立使用它，了解消息队列的应用场景；再学习如何在 Java 中操作消息队列中间件，并尝试和项目相结合，感受消息队列带来的好处。</p><p>这里我建议初学者先学习 RabbitMQ，比 Kafka 要好理解一些。跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。</p><p><strong>经典面试题</strong></p><p>1使用消息队列有哪些优缺点？<br>2如何保证消息消费的幂等性？<br>3消息队列有哪些路由模型？<br>4你是否用过消息队列，解决过什么问题？</p><p><strong>资源</strong></p><p>●视频<br>○⭐ 尚硅谷 - 2021 最新 RabbitMQ 教程：<a href="https://www.bilibili.com/video/BV1cb4y1o7zz">https://www.bilibili.com/video/BV1cb4y1o7zz</a> （很新很全面）<br>●文档<br>○RabbitMQ 中文文档：<a href="http://rabbitmq.mr-ping.com/">http://rabbitmq.mr-ping.com/</a><br>●书籍<br>○《RabbitMQ 实战：高效部署分布式消息队列》（经典）<br>●工具<br>○⭐ RabbitMQ 在线模拟器：<a href="http://tryrabbitmq.com/">http://tryrabbitmq.com/</a></p><p><strong>🌖 Nginx（14 天）</strong></p><p>Nginx 是主流的、开源的、高性能的 HTTP 和反向代理 web 服务器，可以用于挂载网站、请求转发、负载均衡、网关路由等。前后端开发同学都需要学习，在后端开发的面试中有时会考到。</p><p><strong>知识</strong></p><p>●Nginx 作用<br>●正向代理<br>●反向代理（负载均衡）<br>●常用命令<br>●配置<br>●动静分离（网站部署）<br>●集群搭建<br>●相关技术：HAProxy、Apache</p><p><strong>学习建议</strong></p><p>Nginx 的基本使用非常简单，甚至不需要看任何的视频，跟着一篇文章就能够用它来提供网站访问能力、实现反向代理。</p><p>但是在企业中，Nginx 的使用往往没那么简单，作为负载均衡、请求转发的重要组件，往往需要针对实际场景去写一些特定的配置。因此建议有时间的话，实践下 Nginx 的配置方法，了解 Nginx 基本的设计思想，对今后自己设计系统时也有帮助。</p><p><strong>经典面试题</strong></p><p>1Nginx 有哪些作用？<br>2Nginx 为什么支持高并发？<br>3Nginx 有哪些负载均衡策略？<br>4什么是 Nginx 惊群问题，如何解决它？</p><p><strong>资源</strong></p><p>●视频<br>○⭐ 尚硅谷 - Nginx 教程由浅入深：<a href="https://www.bilibili.com/video/BV1zJ411w7SV">https://www.bilibili.com/video/BV1zJ411w7SV</a> （讲的比较全面）<br>○⭐ Nginx 鱼皮 - 手把手带你从0搭建个人网站：<a href="https://www.bilibili.com/video/BV1rU4y1J785/">https://www.bilibili.com/video/BV1rU4y1J785/</a> （简单演示 Nginx 部署网站）<br>●文档<br>○Nginx 中文文档：<a href="https://www.nginx.cn/doc/index.html">https://www.nginx.cn/doc/index.html</a><br>●工具<br>○Nginx 配置在线生成：<a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN">https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN</a></p><p><strong>🌗 Netty 网络编程（21 天）</strong></p><p>开源的 Java 网络编程框架，用于开发高性能（事件驱动、异步非阻塞）、高可靠的网络服务器和客户端程序。</p><p>很多网络框架和服务器程序都用到了 Netty 作为底层，学好 Netty 不仅可以让我们自己实现高性能服务器，也能更好地理解其他的框架应用、阅读源码。</p><p><strong>知识</strong></p><p>●IO 模型（BIO &#x2F; NIO）<br>●Channel<br>●Buffer<br>●Seletor<br>●Netty 模型<br>●WebSocket 编程（动手做个聊天室）<br>●相关技术：Vertx（中文文档：<a href="http://vertxchina.github.io/vertx-translation-chinese/">http://vertxchina.github.io/vertx-translation-chinese/</a> ，比 Netty 简单多了，实在看不懂 Netty 也可以学习下这个）</p><p><strong>学习建议</strong></p><p>不同于之前学的 SSM 框架，Netty 还是需要一定学习成本的，一方面是国内资源太缺乏，另一方面很多重要的概念（比如 NIO）还是要多动手写代码调试才能理解。</p><p>还是建议先从视频入门，并且不建议在 Netty 上花太多时间，面试的时候一般也就考察一些 Netty 背后的思想（比如 NIO）而非框架本身的语法细节。</p><p><strong>经典面试题</strong></p><p>1Netty 有哪些优点？<br>2什么是 NIO？<br>3介绍 Netty 的零拷贝机制</p><p><strong>资源</strong></p><p>● 视频<br>○ ⭐ 尚硅谷Netty教程：<a href="https://www.bilibili.com/video/BV1DJ411m7NR">https://www.bilibili.com/video/BV1DJ411m7NR</a><br>○ Netty 技术演讲（中文字幕版）：<a href="https://www.youtube.com/watch?v=I8yy2Cy7dDI">https://www.youtube.com/watch?v=I8yy2Cy7dDI</a><br>● 文档<br>○Netty 4 用户指南：<a href="https://www.w3cschool.cn/netty_4_user_guide/">https://www.w3cschool.cn/netty_4_user_guide&#x2F;</a><br>● 书籍<br>○《Netty 实战》</p><p><strong>🌖 微服务（60 天）</strong></p><p>随着互联网的发展，项目越来越复杂，单机且庞大的巨石项目已无法满足开发、运维、并发、可靠性等需求。</p><p>因此，后台架构不断演进，可以将庞大的项目拆分成一个个职责明确、功能独立的细小模块，模块可以部署在多台服务器上，相互配合协作，提供完整的系统能力。</p><p>换言之，想做大型项目，这块儿一定要好好学！</p><p><strong>知识</strong></p><p><strong>Dubbo</strong></p><p>●架构演进<br>●RPC<br>●Zookeeper<br>●服务提供者<br>●服务消费者<br>●项目搭建<br>●相关技术：DubboX（对 Dubbo 的扩展）</p><p><strong>🌖 微服务</strong></p><p>●微服务概念<br>●Spring Cloud 框架<br>○子父工程<br>○服务注册与发现<br>○注册中心 Eureka、Zookeeper、Consul<br>○Ribbon 负载均衡<br>○Feign 服务调用<br>○Hystrix 服务限流、降级、熔断<br>○Resilience4j 服务容错<br>○Gateway（Zuul）微服务网关<br>○Config 分布式配置中心<br>○分布式服务总线<br>○Sleuth + Zipkin 分布式链路追踪<br>●Spring Cloud Alibaba<br>○Nacos 注册、配置中心<br>○OpenFeign 服务调用<br>○Sentinel 流控<br>○Seata 分布式事务</p><p><strong>接口管理</strong></p><p>●Swagger 接口文档<br>●Postman 接口测试<br>●相关技术：YApi、ShowDoc</p><p><strong>学习建议</strong></p><p>时间不急的话，建议先从 Dubbo 学起，对分布式、RPC、微服务有些基本的了解，再去食用 Spring Cloud 全家桶会更香。学完 Spring Cloud 全家桶后，再去学 Spring Cloud Alibaba 就很简单了。</p><p>这部分内容的学习，原理 + 实践都很重要，也不要被各种高大上的词汇唬住了，都是上层（应用层）的东西，基本没有什么算法，跟着视频教程学，其实还是很好理解的。</p><p>分布式相关知识非常多，但这里不用刻意去背，先通过视频教程实战使用一些微服务框架，也能对其中的概念有基本的了解。</p><p>大厂面试的时候很少问 Spring Cloud 框架的细节，更多的是微服务以及各组件的一些思想，比如网关的好处、消息总线的好处等。</p><p><strong>经典面试题</strong></p><p>1什么是微服务，有哪些优缺点？<br>2什么是注册中心，能解决什么问题？</p><p><strong>资源</strong></p><p>● 视频<br>○ ⭐ 尚硅谷 Dubbo 教程：<a href="https://www.bilibili.com/video/BV1ns411c7jV">https://www.bilibili.com/video/BV1ns411c7jV</a><br>○ ⭐ 尚硅谷 SpringCloud（H版&amp;alibaba）框架开发教程（微服务分布式架构）：<a href="https://www.bilibili.com/video/BV18E411x7eT">https://www.bilibili.com/video/BV18E411x7eT</a> （把国外的 Spring Cloud 和国内的 Spring Cloud Alibaba 结合在一起对比着去讲，主流技术栈、知识点都讲到了，真心不错！）<br>● 文档<br>○Apache Dubbo 官方文档：<a href="https://dubbo.apache.org/zh/">https://dubbo.apache.org/zh/</a><br>○Spring Cloud Alibaba 官方文档：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a><br>○⭐ Swagger 教学文档：<a href="https://doc.xiaominfo.com/">https://doc.xiaominfo.com/</a> （跟着快速开始直接用就好了）</p><p><strong>🌖 容器（7 天）</strong></p><p>将应用和环境进行封装，相互隔离、独立部署、便于移植，提高安全性、提高开发和维护效率。</p><p>便于实现微服务、持续集成和交付。</p><p><strong>知识</strong></p><p>●🌖 Docker<br>○容器概念<br>○镜像<br>○部署服务<br>○Dockerfile<br>○Docker Compose<br>○Docker Machine<br>○Docker Swarm<br>○多阶段构建<br>●🌘 K8S（Kubernetes）<br>○K8S 架构<br>○工作负载<br>■资源类型<br>■Pod<br>■Pod 生命周期<br>■Pod 安全策略<br>○K8S 组件<br>○K8S 对象<br>○部署应用<br>○服务<br>■Ingress<br>○Kubectl 命令行<br>○集群管理<br>●相关技术：Apache Mesos、Mesosphere</p><p><strong>学习建议</strong></p><p>业务上云是趋势，但是对于开发同学来说，会用 Docker &#x2F; K8S 部署项目和服务就行。实际工作中，企业一般都有现成的平台直接用，面试考察的也不多，不用花太多时间。</p><p><strong>经典面试题</strong></p><p>1什么是容器？<br>2使用  Docker 有哪些好处？<br>3如何快速启动多个 Docker 节点？</p><p><strong>资源</strong></p><p>● 视频<br>○⭐【狂神说】Docker 最新超详细版教程通俗易懂：<a href="https://www.bilibili.com/video/BV1og4y1q7M4">https://www.bilibili.com/video/BV1og4y1q7M4</a><br>○K8S 视频教程：<a href="https://www.bilibili.com/video/BV1K5411N7j8">https://www.bilibili.com/video/BV1K5411N7j8</a><br>● 书籍<br>○《深入浅出 Docker》：<a href="https://www.zhihu.com/pub/reader/119632192">https://www.zhihu.com/pub/reader/119632192</a><br>● 文档<br>○Docker — 从入门到实践：<a href="https://vuepress.mirror.docker-practice.com/">https://vuepress.mirror.docker-practice.com/</a><br>○菜鸟教程 Docker：<a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a><br>○国外 Docker 官方文档：<a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a><br>● 网站<br>○Docker 中文社区：<a href="https://www.docker.org.cn/">https://www.docker.org.cn/</a> （强烈推荐，有很多 Docker 技术文章和学习笔记）<br>○Docker Blog：<a href="https://www.docker.com/blog/">https://www.docker.com/blog/</a> （国外 Docker 技术博客）<br>● 镜像源<br>○Docker Hub：<a href="https://hub.docker.com/">https://hub.docker.com</a><br>○腾讯软件源：<a href="http://mirrors.tencent.com/#/index">http://mirrors.tencent.com/#/index</a><br>○阿里云 Docker 仓库：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com/</a></p><p><strong>🌗 CI &#x2F; CD（3 天）</strong></p><p>持续集成 &#x2F; 持续交付，贯穿整个研发到项目上线的过程，提高效率。</p><p>大公司一般都有自己的 CI &#x2F; CD 平台。</p><p><strong>知识</strong></p><p>●什么是 CI &#x2F; CD<br>●CI &#x2F; CD 有什么好处<br>●使用任一 CI &#x2F; CD 平台<br>●相关技术：Jenkins、GitLab、微信云托管</p><p><strong>学习建议</strong></p><p>了解它是什么，并且实战使用任一 CI &#x2F; CD 平台，感受它和传统开发运维到底有什么不同，就足够了。其实很简单，不要花太多时间。</p><p>真正要自己去搭建的时候，跟着官方文档来就行。</p><p><strong>资源</strong></p><p>● 视频<br>○⭐【狂神说】CI&#x2F;CD到底是什么？十分钟理解企业级DevOps：<a href="https://www.bilibili.com/video/BV1zf4y127vu">https://www.bilibili.com/video/BV1zf4y127vu</a> （讲的非常棒！带你快速理解 CI &#x2F; CD 的作用和部分原理）<br>○尚硅谷 - Jenkins 持续集成工具教程：<a href="https://www.bilibili.com/video/BV1GW411w7pn">https://www.bilibili.com/video/BV1GW411w7pn</a> （实在要用到 Jenkins 再去学）<br>● 文档<br>○Jenkins 官方文档：<a href="https://www.jenkins.io/zh/">https://www.jenkins.io/zh/</a> （有很多案例，要用的时候查一下就行了）<br>● 实战平台<br>○⭐ 微信云托管：<a href="https://cloud.weixin.qq.com/cloudrun">https://cloud.weixin.qq.com/cloudrun</a> （直播演示过，鱼皮后面会给大家出视频教程）<br>○前端托管 Webify：<a href="https://cloud.tencent.com/product/webify">https://cloud.tencent.com/product/webify</a> （鱼皮给大家出过视频教程的 <a href="https://www.bilibili.com/video/BV11V411p7vf/%EF%BC%89">https://www.bilibili.com/video/BV11V411p7vf/）</a></p><p><strong>练手项目</strong></p><p>更多请见本路线阶段 5：[项目源码（50 套）](###项目源码（50 套）) 。</p><p>● mall-learning：<a href="https://github.com/macrozheng/mall-learningmall">https://github.com/macrozheng/mall-learningmall</a> （学习教程，架构、业务、技术要点全方位解析）<br>● miaosha：<a href="https://github.com/qiurunze123/miaosha">https://github.com/qiurunze123/miaosha</a> （秒杀系统设计与实现）<br>● Mall：<a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a> （包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现）<br>● Spring-Cloud-Admin：<a href="https://github.com/wxiaoqi/Spring-Cloud-AdminCloud-Admin">https://github.com/wxiaoqi/Spring-Cloud-AdminCloud-Admin</a> （基于 Spring Cloud 微服务化开发平台，具有统一授权、认证的后台管理系统）<br>● paascloud-master：<a href="https://github.com/paascloud/paascloud-master">https://github.com/paascloud/paascloud-master</a> （基于 spring cloud + vue + oAuth2.0，前后端分离商城系统）<br>● mall-swarm：<a href="https://github.com/macrozheng/mall-swarm">https://github.com/macrozheng/mall-swarm</a> （一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统）<br>● SecKill：<a href="https://github.com/hfbin/Seckill">https://github.com/hfbin/Seckill</a> （基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统）<br>● jeecg-boot：<a href="https://github.com/zhangdaiscott/jeecg-boot">https://github.com/zhangdaiscott/jeecg-boot</a> （低代码开发平台）<br>● PassJava-Platform：<a href="https://github.com/Jackson0714/PassJava-Platform">https://github.com/Jackson0714/PassJava-Platform</a> （一款面试刷题的 Spring Cloud 开源系统） </p><p><strong>尾声</strong></p><p>看到这里，相信你已经感叹：编程语言一辈子学不完了！</p><p>但是，不用担心，通过对这么多知识点的学习，相信你已经有了一定的积累，也不知不觉地锻炼了自主学习能力、资源检索能力、代码阅读能力、问题解决能力，之后的学习会越来越轻松。</p><p>接下来，可以试着用你学到的技术来解决实际的问题，自主从 0 开始做一些项目，保持编程手感。</p><p><strong>阶段 5：项目实战</strong></p><p><strong>目标</strong></p><p>综合所学技术从 0 到 1 开发和上线一个全面、有特色的、可以写进简历的个人项目。</p><p><strong>学习建议</strong></p><p>其实在之前的框架学习视频中应该就做过几个项目了，但相对不够完整和体系化。</p><p>有想法的同学可以做任何自己想做的项目，推荐参加一些作品类竞赛，练手、拿奖、收获项目经历一举三得。</p><p>暂时没想法的朋友，建议先跟着专门带做项目的视频教程做 1 - 2 套 Java 完整项目，一定要从 0 到 1 自己手写！</p><p>有能力的朋友也可以试着用 GitHub 上的源码来学习啦~</p><p>做一个完整的项目的确很不容易，建议大家根据自己的 <strong>时间、兴趣</strong> 选择 <strong>较新的</strong>、<strong>有配套源码的</strong> 教程，保持耐心。</p><p>如何选择编程学习资源，可以看下我的原创文章：<a href="https://mp.weixin.qq.com/s/mlMql9RJCd7THt6rpGb8UA">https://mp.weixin.qq.com/s/mlMql9RJCd7THt6rpGb8UA</a></p><p>下面推荐一些优质的、较新的项目实战视频教程 + 50 套项目源码。</p><p><strong>视频教程</strong><br><a href="https://yupi.icu/">知识星球</a> 内部分享：<br>1<a href="https://t.zsxq.com/06EIMNr3R">项目训练营（寻爱网项目）</a>：学习从立项到上线的完整做项目流程 + 优化思路<br>2<a href="https://t.zsxq.com/03RjeeYZJ">从 0 到 1 开发用户中心</a>：保姆级前后端完整项目教程，适合刚学完框架的新手<br>3<a href="https://t.zsxq.com/03jmU7eAa">伙伴匹配系统</a>：移动端网站，设计分布式和并发编程知识，适合已经做过一个小项目的同学练习<br>4<a href="https://t.zsxq.com/04bqFI66M">Web 终端项目经验分享</a>：前后端技术选型 + 系统设计 + 源码解读 + 简历亮点全面分享<br>5<a href="https://t.zsxq.com/03auZnAM3">面试刷题网站项目经验分享</a>：从 0 到 1 分享数万用户网站的创作过程和经验分享<br>6<a href="https://t.zsxq.com/07Yr7i6ai">瑞吉外卖 - 外卖点餐系统</a>：Java Spring Boot 入门级项目，适合刚学完框架的同学<br>7<a href="https://t.zsxq.com/07EEiyfq7">尚医通 - 在线预约挂号平台</a>：业务功能完整的 Java Spring Cloud 微服务项目，适合刚学完微服务的同学<br>8<a href="https://t.zsxq.com/07e2FIMzb">硅谷课堂 - 在线学习平台</a>：业务功能完整的 Java Spring Cloud 微服务项目，适合想学习第三方服务对接的同学<br>9<a href="https://t.zsxq.com/07JMnQvne">黑马点评 - 类似大众点评的移动 APP</a>：专门为学习 Redis 定制的单体项目，适合刚学完 Spring Boot、想系统学习 Redis 的同学</p><p>公开：<br>●尚硅谷 - 谷粒学院 - 微服务 + 全栈 - 在线教育实战项目：<a href="https://www.bilibili.com/video/BV1dQ4y1A75e">https://www.bilibili.com/video/BV1dQ4y1A75e</a> （全栈项目，前后端讲得都很全面）<br>● 尚硅谷 - 尚筹网 - Java项目实战开发教程 - SSM 框架 + 微服务架构：<a href="https://www.bilibili.com/video/BV1bE411T7oZ%EF%BC%88500">https://www.bilibili.com/video/BV1bE411T7oZ（500</a> 多集，包含完整的用户权限管理，功能丰富、讲得很细致全面）<br>● 黑马 - 24 小时搞定 Java 毕设电商项目：<a href="https://www.bilibili.com/video/BV13f4y1r7fS">https://www.bilibili.com/video/BV13f4y1r7fS</a><br>● 黑马程序员 Java 项目《传智健康》，超完整的企业级医疗行业项目：<a href="https://www.bilibili.com/video/BV1Bo4y117zV">https://www.bilibili.com/video/BV1Bo4y117zV</a><br>● 黑马程序员 Java 项目《万信金融》企业级开发实战，互联网金融行业解决方案：<a href="https://www.bilibili.com/video/BV1Ub4y1f7rk">https://www.bilibili.com/video/BV1Ub4y1f7rk</a><br>● 黑马程序员 Java 项目 SaaS 移动办公完整版《iHRM 人力资源管理系统》，跨行业 SaaS 办公整合性解决方案：<a href="https://www.bilibili.com/video/BV18A411L7UX">https://www.bilibili.com/video/BV18A411L7UX</a><br>● 黑马程序员 Java 大型分布式微服务闪聚支付项目，Java 移动支付全生态系统：<a href="https://www.bilibili.com/video/BV17v411V79c">https://www.bilibili.com/video/BV17v411V79c</a><br>● 黑马程序员 Java 项目《好客租房》：<a href="https://www.bilibili.com/video/BV1sZ4y1F7PD">https://www.bilibili.com/video/BV1sZ4y1F7PD</a></p><p><strong>常用类库</strong></p><p><strong>工具</strong></p><p>●Guava：谷歌开发的 Java 工具库（<a href="https://github.com/google/guava%EF%BC%89">https://github.com/google/guava）</a><br>●Apache Commons：各类工具库，比如 commons-lang、commons-io、commons-collections 等（<a href="https://github.com/apache/commons-lang%EF%BC%89">https://github.com/apache/commons-lang）</a><br>●Hutool：Java 工具集库（<a href="https://github.com/looly/hutool%EF%BC%89">https://github.com/looly/hutool）</a><br>●Lombok：Java 增强库（<a href="https://github.com/projectlombok/lombok%EF%BC%89">https://github.com/projectlombok/lombok）</a><br>●Apache HttpComponents Client：HTTP 客户端库（<a href="https://github.com/apache/httpcomponents-client%EF%BC%89">https://github.com/apache/httpcomponents-client）</a><br>●OkHttp：适用于 JVM、Android 等平台的 Http 客户端（<a href="https://github.com/square/okhttp%EF%BC%89">https://github.com/square/okhttp）</a><br>●Gson：谷歌的 JSON 处理库（<a href="https://github.com/google/gson%EF%BC%89">https://github.com/google/gson）</a><br>●Jcommander：Java 命令行参数解析框架（<a href="https://github.com/cbeust/jcommander%EF%BC%89">https://github.com/cbeust/jcommander）</a><br>●Apache PDFBox：PDF 操作库（<a href="https://github.com/apache/pdfbox%EF%BC%89">https://github.com/apache/pdfbox）</a><br>●EasyExcel：阿里的 Excel 处理库（<a href="https://github.com/alibaba/easyexcel%EF%BC%89">https://github.com/alibaba/easyexcel）</a><br>●Apache POI：表格文件处理库（<a href="https://github.com/apache/poi%EF%BC%89">https://github.com/apache/poi）</a></p><p><strong>测试</strong></p><p>●JUnit：Java 测试框架（<a href="https://github.com/junit-team/junit4%EF%BC%89">https://github.com/junit-team/junit4）</a><br>●Mockito：Java 单元测试 Mock 框架（<a href="https://github.com/mockito/mockito%EF%BC%89">https://github.com/mockito/mockito）</a><br>●Selenium：浏览器自动化框架（<a href="https://github.com/SeleniumHQ/selenium%EF%BC%89">https://github.com/SeleniumHQ/selenium）</a><br>●htmlunit：Java 模拟浏览器（<a href="https://github.com/HtmlUnit/htmlunit%EF%BC%89">https://github.com/HtmlUnit/htmlunit）</a><br>●TestNG：Java 测试框架（<a href="https://github.com/cbeust/testng%EF%BC%89">https://github.com/cbeust/testng）</a><br>●Jacoco：Java 代码覆盖度库（<a href="https://github.com/jacoco/jacoco%EF%BC%89">https://github.com/jacoco/jacoco）</a></p><p><strong>其他</strong></p><p>●cglib：字节码生成库（<a href="https://github.com/cglib/cglib%EF%BC%89">https://github.com/cglib/cglib）</a><br>●Arthas：Java 诊断工具（<a href="https://github.com/alibaba/arthas%EF%BC%89">https://github.com/alibaba/arthas）</a><br>●config：针对 JVM 的配置库（<a href="https://github.com/lightbend/config%EF%BC%89">https://github.com/lightbend/config）</a><br>●Quasar：Java 纤程库（<a href="https://github.com/puniverse/quasar%EF%BC%89">https://github.com/puniverse/quasar）</a><br>●drools：Java 规则引擎（<a href="https://github.com/kiegroup/drools%EF%BC%89">https://github.com/kiegroup/drools）</a><br>●Caffeine：Java 高性能缓存库（<a href="https://github.com/ben-manes/caffeine%EF%BC%89">https://github.com/ben-manes/caffeine）</a><br>●Disruptor：高性能线程间消息传递库（<a href="https://github.com/LMAX-Exchange/disruptor%EF%BC%89">https://github.com/LMAX-Exchange/disruptor）</a><br>●Knife4j：Swagger 文档增强（<a href="https://doc.xiaominfo.com/%EF%BC%89">https://doc.xiaominfo.com/）</a><br>●Thumbnailator：Java 缩略图生成库（<a href="https://github.com/coobird/thumbnailator%EF%BC%89">https://github.com/coobird/thumbnailator）</a><br>●Logback：Java 日志库（<a href="https://github.com/qos-ch/logback%EF%BC%89">https://github.com/qos-ch/logback）</a><br>●Apache Camel：消息传输集成框架（<a href="https://github.com/apache/camel%EF%BC%89">https://github.com/apache/camel）</a><br>●Quartz：定时任务调度库（<a href="https://github.com/quartz-scheduler/quartz%EF%BC%89">https://github.com/quartz-scheduler/quartz）</a><br>●Apache Mahout：机器学习库（<a href="https://github.com/apache/mahout%EF%BC%89">https://github.com/apache/mahout）</a><br>●Apache OpenNLP：NLP 工具库（<a href="https://github.com/apache/opennlp%EF%BC%89">https://github.com/apache/opennlp）</a><br>●RxJava：JVM 反应式编程框架（<a href="https://github.com/ReactiveX/RxJava%EF%BC%89">https://github.com/ReactiveX/RxJava）</a><br>●JProfiler：性能分析库（<a href="https://www.ej-technologies.com/products/jprofiler/overview.html%EF%BC%89">https://www.ej-technologies.com/products/jprofiler/overview.html）</a><br>●jsoup：HTML 文档解析库（<a href="https://jsoup.org/%EF%BC%89">https://jsoup.org/）</a><br>●webmagic：Java 爬虫框架（<a href="https://github.com/code4craft/webmagic/%EF%BC%89">https://github.com/code4craft/webmagic/）</a></p><p><strong>IDEA 插件</strong></p><p>综合实用性、易用性、流行度、维护频率，精选了以下插件，简单分类为天地二品。</p><p><strong>精选地品插件</strong></p><p>简单好用、增强功能</p><p>● Background Image Plus +<br>○描述：给编辑器设置背景图片（小姐姐图片）<br>○官网：<a href="https://plugins.jetbrains.com/plugin/11247-background-image-plus-">https://plugins.jetbrains.com/plugin/11247-background-image-plus-</a><br>● Chinese Language Pack<br>○描述：中文支持<br>○官网：<a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----">https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----</a><br>● Translation<br>○描述：翻译插件，鼠标选中文本，点击右键即可自动翻译成多国语言。<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8579-translation/">https://plugins.jetbrains.com/plugin/8579-translation/</a><br>● Key Promoter X<br>○描述：快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。<br>○官网：<a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x/">https://plugins.jetbrains.com/plugin/9792-key-promoter-x/</a><br>● Rainbow Brackets<br>○描述：给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读<br>○官网：<a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/</a><br>● CodeGlance<br>○描述：在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7275-codeglance/">https://plugins.jetbrains.com/plugin/7275-codeglance/</a><br>● WakaTime<br>○描述：代码统计和跟踪插件<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7425-wakatime">https://plugins.jetbrains.com/plugin/7425-wakatime</a><br>● Statistic<br>○描述：代码统计<br>○官网：<a href="https://plugins.jetbrains.com/plugin/4509-statistic">https://plugins.jetbrains.com/plugin/4509-statistic</a></p><p><strong>精选天品插件</strong></p><p>提高开发效率和代码质量</p><p>● String Manipulation<br>○描述：字符串快捷处理<br>○官网：<a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation">https://plugins.jetbrains.com/plugin/2162-string-manipulation</a><br>● Tabnine AI Code Completion<br>○描述：使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化<br>○官网：<a href="https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more">https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more</a><br>● GsonFormatPlus<br>○描述：根据 json 生成对象<br>○官网：<a href="https://plugins.jetbrains.com/plugin/14949-gsonformatplus">https://plugins.jetbrains.com/plugin/14949-gsonformatplus</a><br>● JUnitGenerator V2.0<br>○描述：自动生成单元测试<br>○官网：<a href="https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0">https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0</a><br>● RestfulTool<br>○描述：辅助 web 开发的工具集<br>○官网：<a href="https://plugins.jetbrains.com/plugin/14280-restfultool">https://plugins.jetbrains.com/plugin/14280-restfultool</a><br>● SequenceDiagram<br>○描述：自动生成方法调用时序图<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8286-sequencediagram">https://plugins.jetbrains.com/plugin/8286-sequencediagram</a><br>● CheckStyle-IDEA<br>○描述：自动检查 Java 代码规范<br>○官网：<a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea">https://plugins.jetbrains.com/plugin/1065-checkstyle-idea</a><br>● Alibaba Java Coding Guidelines<br>○描述：代码规范检查插件<br>○官网：<a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a><br>● SonarLint<br>○描述：帮助你发现和修复代码的错误和漏洞<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7973-sonarlint">https://plugins.jetbrains.com/plugin/7973-sonarlint</a><br>● MybatisX<br>○描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码，优化体验<br>○官网：<a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></p><p><strong>美化类</strong></p><p>● Extra Icons<br>○描述：图标美化插件，支持更多文件类型<br>○官网：<a href="https://plugins.jetbrains.com/plugin/11058-extra-icons">https://plugins.jetbrains.com/plugin/11058-extra-icons</a><br>● Chinese Language Pack<br>○描述：中文支持<br>○官网：<a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----">https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----</a><br>● Grep Console<br>○描述：自定义设置控制台输出颜色<br>○官网：<a href="https://plugins.jetbrains.com/idea/plugin/7125-grep-console">https://plugins.jetbrains.com/idea/plugin/7125-grep-console</a><br>● Material Theme UI<br>○描述：美观的主题<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8006-material-theme-ui">https://plugins.jetbrains.com/plugin/8006-material-theme-ui</a><br>● Nyan Progress Bar<br>○描述：进度条美化<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar">https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar</a><br>● activate-power-mode<br>○描述：打字特效<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8330-activate-power-mode">https://plugins.jetbrains.com/plugin/8330-activate-power-mode</a><br>● Power Mode II<br>○描述：打字特效插件升级版<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8251-power-mode-ii">https://plugins.jetbrains.com/plugin/8251-power-mode-ii</a><br>● Rainbow Brackets<br>○描述：给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读<br>○官网：<a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/</a><br>● Background Image Plus +<br>○描述：给编辑器设置背景图片<br>○官网：<a href="https://plugins.jetbrains.com/plugin/11247-background-image-plus-">https://plugins.jetbrains.com/plugin/11247-background-image-plus-</a></p><p><strong>代码生成类</strong></p><p>● Codota AI Autocomplete for Java and JavaScript<br>○描述：使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript">https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript</a><br>● Tabnine AI Code Completion<br>○描述：使用 AI 来自动提示和补全代码，比 IDEA 自带的代码补全更加智能化<br>○官网：<a href="https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more">https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more</a><br>● UUID Generator<br>○描述：生成随机的 UUID<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8320-uuid-generator">https://plugins.jetbrains.com/plugin/8320-uuid-generator</a><br>● Randomness<br>○描述：生成随机值<br>○官网：<a href="https://plugins.jetbrains.com/plugin/9836-randomness">https://plugins.jetbrains.com/plugin/9836-randomness</a><br>● .ignore<br>○描述：生成不同语言的版本控制忽略文件<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7495--ignore">https://plugins.jetbrains.com/plugin/7495--ignore</a><br>● Auto filling Java call arguments<br>○描述：通过快捷键自动补全函数的调用参数<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8638-auto-filling-java-call-arguments/">https://plugins.jetbrains.com/plugin/8638-auto-filling-java-call-arguments/</a><br>● GenerateAllSetter<br>○描述：快速生成调用对象 setter 方法的代码<br>○官网：<a href="https://plugins.jetbrains.com/plugin/9360-generateallsetter">https://plugins.jetbrains.com/plugin/9360-generateallsetter</a><br>● GenerateSerialVersionUID<br>○描述：一键为实现 Serializable 接口的类生成 SerialVersionUID<br>○官网：<a href="https://plugins.jetbrains.com/plugin/185-generateserialversionuid/">https://plugins.jetbrains.com/plugin/185-generateserialversionuid/</a><br>● GsonFormatPlus<br>○描述：根据 json 生成对象<br>○官网：<a href="https://plugins.jetbrains.com/plugin/14949-gsonformatplus">https://plugins.jetbrains.com/plugin/14949-gsonformatplus</a><br>● Lombok<br>○ 描述：配合 Lombok 依赖及注解使用，能够大大减少 Java 对象的代码量。IDEA 已自带，无需安装。<br>○ 官网：<a href="https://plugins.jetbrains.com/plugin/6317-lombok/">https://plugins.jetbrains.com/plugin/6317-lombok/</a><br>● Easy Code<br>○描述：根据数据库表生成 Java entity、dao、mapper、service、controller 等代码<br>○官网：<a href="https://plugins.jetbrains.com/plugin/10954-easy-code">https://plugins.jetbrains.com/plugin/10954-easy-code</a><br>● Easy Javadoc<br>○描述：快速生成 Javadoc 文档<br>○官网：<a href="https://plugins.jetbrains.com/plugin/12977-easy-javadoc">https://plugins.jetbrains.com/plugin/12977-easy-javadoc</a><br>● JavaDoc<br>○描述：生成 Javadoc 文档<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7157-javadoc">https://plugins.jetbrains.com/plugin/7157-javadoc</a><br>● Json2Pojo<br>○描述：根据 JSON 生成 POJO，根据 POJO 生成 JSON<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8533-json2pojo">https://plugins.jetbrains.com/plugin/8533-json2pojo</a><br>● JUnitGenerator V2.0<br>○描述：自动生成单元测试<br>○官网：<a href="https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0">https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0</a><br>● Jindent - Source Code Formatter<br>○描述：根据自定义模板来生成 javadoc 注释<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8309-jindent--source-code-formatter">https://plugins.jetbrains.com/plugin/8309-jindent--source-code-formatter</a><br>● MybatisX<br>○描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码，优化体验<br>○官网：<a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a><br>● MyBatisCodeHelperPro<br>○描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码（收费）<br>○官网：<a href="https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro">https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro</a></p><p><strong>功能提效类</strong></p><p><strong>源码阅读</strong></p><p>●Call Graph<br>○描述：生成调用关系图，便于查看源码<br>○官网：<a href="https://plugins.jetbrains.com/plugin/12304-call-graph">https://plugins.jetbrains.com/plugin/12304-call-graph</a><br>●Jump to Line<br>○描述：支持跳转到任意行进行调试<br>○官网：<a href="https://plugins.jetbrains.com/plugin/14877-jump-to-line">https://plugins.jetbrains.com/plugin/14877-jump-to-line</a><br>●SequenceDiagram<br>○描述：自动生成方法调用时序图<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8286-sequencediagram">https://plugins.jetbrains.com/plugin/8286-sequencediagram</a><br>●jclasslib Bytecode Viewer<br>○描述：字节码查看器<br>○官网：<a href="https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer">https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer</a><br>●BrowseWordAtCaret<br>○描述： 快速在相同单词间进行跳转<br>○官网：<a href="https://plugins.jetbrains.com/plugin/201-browsewordatcaret">https://plugins.jetbrains.com/plugin/201-browsewordatcaret</a><br>●CodeGlance<br>○描述：在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7275-codeglance/">https://plugins.jetbrains.com/plugin/7275-codeglance/</a></p><p><strong>代码规范</strong></p><p>●CheckStyle-IDEA<br>○描述：自动检查 Java 代码规范<br>○官网：<a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea">https://plugins.jetbrains.com/plugin/1065-checkstyle-idea</a><br>●Alibaba Java Coding Guidelines<br>○描述：代码规范检查插件<br>○官网：<a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a><br>●SonarLint<br>○描述：帮助你发现和修复代码的错误和漏洞<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7973-sonarlint">https://plugins.jetbrains.com/plugin/7973-sonarlint</a><br>●FindBugs-IDEA<br>○描述：帮你找出代码中潜藏的 Bug<br>○官网：<a href="https://plugins.jetbrains.com/plugin/3847-findbugs-idea">https://plugins.jetbrains.com/plugin/3847-findbugs-idea</a><br>●MetricsReloaded<br>○描述：代码复杂度分析<br>○官网：<a href="https://plugins.jetbrains.com/plugin/93?pr=idea">https://plugins.jetbrains.com/plugin/93?pr=idea</a></p><p><strong>格式处理</strong></p><p>● CamelCase<br>○描述：快速字符串格式转换工具，如驼峰式<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7160-camelcase">https://plugins.jetbrains.com/plugin/7160-camelcase</a><br>● Json Parser<br>○描述：验证和格式化 Json 字符串的工具<br>○官网：<a href="https://plugins.jetbrains.com/plugin/10650-json-parser">https://plugins.jetbrains.com/plugin/10650-json-parser</a><br>● Properties to YAML Converter<br>○描述：把 Properties 文件的格式转为 YAML 格式<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter">https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter</a><br>● String Manipulation<br>○描述：字符串快捷处理<br>○官网：<a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation">https://plugins.jetbrains.com/plugin/2162-string-manipulation</a></p><p><strong>代码统计</strong></p><p>●WakaTime<br>○描述：代码统计和跟踪插件<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7425-wakatime">https://plugins.jetbrains.com/plugin/7425-wakatime</a><br>●Statistic<br>○描述：代码统计<br>○官网：<a href="https://plugins.jetbrains.com/plugin/4509-statistic">https://plugins.jetbrains.com/plugin/4509-statistic</a></p><p><strong>代码检索</strong></p><p>●OnlineSearch<br>○描述：选择文本后支持不同搜索引擎进行搜索<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8298-onlinesearch/">https://plugins.jetbrains.com/plugin/8298-onlinesearch/</a><br>●CodeSearch<br>○描述：快捷地打开搜索引擎进行搜索<br>○官网：<a href="https://plugins.jetbrains.com/plugin/12578-codesearch">https://plugins.jetbrains.com/plugin/12578-codesearch</a></p><p><strong>其他</strong></p><p>● Leetcode Editor<br>○描述：在 IDEA 里刷算法题<br>○官网：<a href="https://plugins.jetbrains.com/plugin/12132-leetcode-editor">https://plugins.jetbrains.com/plugin/12132-leetcode-editor</a><br>● File Watchers<br>○描述：监听文件，当其发生变化时自动执行命令<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7177-file-watchers">https://plugins.jetbrains.com/plugin/7177-file-watchers</a><br>● PlantUML integration<br>○描述：UML 建模工具，只需简单的代码就能画出复杂的 UML 类图<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7017-plantuml-integration">https://plugins.jetbrains.com/plugin/7017-plantuml-integration</a><br>● Bytecode Editor<br>○描述：字节码编辑工具<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8461-bytecode-editor">https://plugins.jetbrains.com/plugin/8461-bytecode-editor</a><br>● Alibaba Cloud Toolkit<br>○描述：阿里云工具集<br>○官网：<a href="https://plugins.jetbrains.com/plugin/11386-alibaba-cloud-toolkit">https://plugins.jetbrains.com/plugin/11386-alibaba-cloud-toolkit</a><br>● Tencent Cloud Toolkit<br>○描述：腾讯云工具集<br>○官网：<a href="https://plugins.jetbrains.com/plugin/15653-tencent-cloud-toolkit">https://plugins.jetbrains.com/plugin/15653-tencent-cloud-toolkit</a><br>● EduTools<br>○描述：面向教育者，允许创建、分享和加入练习<br>○官网：<a href="https://plugins.jetbrains.com/plugin/10081-edutools">https://plugins.jetbrains.com/plugin/10081-edutools</a><br>● IDE Features Trainer<br>○描述：IntelliJ IDEA 官方出的学习辅助插件<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8554-ide-features-trainer">https://plugins.jetbrains.com/plugin/8554-ide-features-trainer</a><br>● JRebel Plugin<br>○描述：项目热更新，提高效率（可惜要收费）<br>○官网：<a href="https://plugins.jetbrains.com/plugin/4441-jrebel-and-xrebel-for-intellij">https://plugins.jetbrains.com/plugin/4441-jrebel-and-xrebel-for-intellij</a><br>● Key Promoter X<br>○描述：快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。<br>○官网：<a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x/">https://plugins.jetbrains.com/plugin/9792-key-promoter-x/</a><br>● Translation<br>○描述：翻译插件，鼠标选中文本，点击右键即可自动翻译成多国语言。<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8579-translation/">https://plugins.jetbrains.com/plugin/8579-translation/</a><br>● idea_seat<br>○描述：自动提醒，防止你久坐不动<br>○官网：<a href="https://github.com/s-unscrupulous/idea_seat">https://github.com/s-unscrupulous/idea_seat</a><br>● RestfulTool<br>○描述：辅助 web 开发的工具集<br>○官网：<a href="https://plugins.jetbrains.com/plugin/14280-restfultool">https://plugins.jetbrains.com/plugin/14280-restfultool</a><br>● Multirun<br>○描述：同时启动多应用<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7248-multirun">https://plugins.jetbrains.com/plugin/7248-multirun</a></p><p><strong>扩展增强类</strong></p><p>●Free Mybatis Plugin<br>○描述：MyBatis 增强插件，支持 mapper &#x3D;&gt; xml 的跳转、代码生成等功能<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin">https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin</a><br>●MyBatis Log Plugin<br>○描述：MyBatis SQL 提取和格式化输出<br>○官网：<a href="https://plugins.jetbrains.com/plugin/10065-mybatis-log-plugin">https://plugins.jetbrains.com/plugin/10065-mybatis-log-plugin</a><br>●Maven Helper<br>○描述：Maven 辅助插件<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7179-maven-helper">https://plugins.jetbrains.com/plugin/7179-maven-helper</a><br>●Gradle View<br>○描述：Gradle 项目管理工具的扩展<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7150-gradle-view">https://plugins.jetbrains.com/plugin/7150-gradle-view</a><br>●Arthas Idea<br>○描述： Arthas 命令生成插件。Arthas 是阿里开源的 Java 在线诊断工具，该插件可以自动生成 Arthas 在线 Java 代码诊断命令，不用再到官网翻文档拼命令啦！<br>○官网：<a href="https://plugins.jetbrains.com/plugin/13581-arthas-idea/">https://plugins.jetbrains.com/plugin/13581-arthas-idea/</a><br>●GitToolBox<br>○描述： Git 增强插件。在自带的 Git 功能之上，新增了查看 Git 状态、自动拉取代码、提交通知等功能。最好用的是可以查看到每一行代码的最近一次提交信息。<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7499-gittoolbox/">https://plugins.jetbrains.com/plugin/7499-gittoolbox/</a><br>●BashSupport<br>○描述：支持 Bash 脚本文件的高亮和提示等<br>○官网：<a href="https://plugins.jetbrains.com/plugin/4230-bashsupport">https://plugins.jetbrains.com/plugin/4230-bashsupport</a><br>●Git Flow Integration<br>○描述：Git Flow 的图形界面操作<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7315-git-flow-integration">https://plugins.jetbrains.com/plugin/7315-git-flow-integration</a><br>●Gitee<br>○描述：开源中国的码云插件<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8383-gitee">https://plugins.jetbrains.com/plugin/8383-gitee</a><br>●Drools<br>○描述：规则引擎的扩展<br>○官网：<a href="https://plugins.jetbrains.com/plugin/16871-drools">https://plugins.jetbrains.com/plugin/16871-drools</a><br>●EnvFile<br>○描述：对多环境配置文件的支持<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7861-envfile">https://plugins.jetbrains.com/plugin/7861-envfile</a><br>●Kubernetes<br>○描述：容器管理的扩展<br>○官网：<a href="https://plugins.jetbrains.com/plugin/10485-kubernetes">https://plugins.jetbrains.com/plugin/10485-kubernetes</a><br>●Vue.js<br>○描述：Vue.js 前端框架的扩展<br>○官网：<a href="https://plugins.jetbrains.com/plugin/9442-vue-js">https://plugins.jetbrains.com/plugin/9442-vue-js</a><br>●Scala<br>○描述：Scala 语言的扩展<br>○官网：<a href="https://plugins.jetbrains.com/plugin/1347-scala">https://plugins.jetbrains.com/plugin/1347-scala</a><br>●Zookeeper<br>○描述：Zookeeper 中间件的扩展<br>○官网：<a href="https://plugins.jetbrains.com/plugin/7364-zookeeper">https://plugins.jetbrains.com/plugin/7364-zookeeper</a><br>●Jms messenger<br>○描述：对 Java 消息服务的扩展<br>○官网：<a href="https://plugins.jetbrains.com/plugin/10949-jms-messenger">https://plugins.jetbrains.com/plugin/10949-jms-messenger</a><br>●MapStruct Support<br>○描述：对 MapStruct 对象转换的支持<br>○官网：<a href="https://plugins.jetbrains.com/plugin/10036-mapstruct-support">https://plugins.jetbrains.com/plugin/10036-mapstruct-support</a><br>●Big Data Tools<br>○描述：提供了 HDFS 等大数据框架的工具集<br>○官网：<a href="https://plugins.jetbrains.com/plugin/12494-big-data-tools">https://plugins.jetbrains.com/plugin/12494-big-data-tools</a><br>●CSV<br>○描述：支持 CSV 文件的高亮和提示等<br>○官网：<a href="https://plugins.jetbrains.com/plugin/10037-csv">https://plugins.jetbrains.com/plugin/10037-csv</a><br>●Ideolog<br>○描述：识别和格式化 log 日志文件<br>○官网：<a href="https://plugins.jetbrains.com/plugin/9746-ideolog">https://plugins.jetbrains.com/plugin/9746-ideolog</a><br>●Toml<br>○描述：支持 toml 文件的高亮和提示等<br>○官网：<a href="https://plugins.jetbrains.com/plugin/8195-toml">https://plugins.jetbrains.com/plugin/8195-toml</a><br>●.env files support<br>○描述：支持 .env 文件的高亮和提示等<br>○官网：<a href="https://plugins.jetbrains.com/plugin/9525--env-files-support">https://plugins.jetbrains.com/plugin/9525--env-files-support</a></p><p><strong>常用软件</strong><br><strong>开发相关</strong></p><p>●JetBrains IDEA：Java 集成开发环境，凭学生邮箱可申请免费使用（<a href="https://www.jetbrains.com/idea/%EF%BC%89">https://www.jetbrains.com/idea/）</a><br>●Reset Jetbrains：你懂的<br>●Visual Studio Code：插件化代码编辑器（<a href="https://code.visualstudio.com/%EF%BC%89">https://code.visualstudio.com/）</a><br>●Sublime Text：轻量代码编辑器（<a href="https://www.sublimetext.com/%EF%BC%89">https://www.sublimetext.com/）</a><br>●Navicat：数据库管理软件（<a href="https://www.navicat.com.cn/%EF%BC%89">https://www.navicat.com.cn/）</a><br>●JMeter：Java 性能测试工具（<a href="https://jmeter.apache.org/%EF%BC%89">https://jmeter.apache.org/）</a><br>●JVisual VM：Java 运行状态可视化工具（<a href="https://visualvm.github.io/%EF%BC%89">https://visualvm.github.io/）</a><br>●XShell：SSH 连接软件（<a href="https://www.netsarang.com/zh/xshell/%EF%BC%89">https://www.netsarang.com/zh/xshell/）</a><br>●XFtp：FTP 连接软件（<a href="https://www.netsarang.com/zh/xftp/%EF%BC%89">https://www.netsarang.com/zh/xftp/）</a><br>●Redis Desktop Manager：Redis 可视化管理工具（<a href="https://github.com/uglide/RedisDesktopManager%EF%BC%89">https://github.com/uglide/RedisDesktopManager）</a><br>●Postman：接口测试工具（<a href="https://www.postman.com/%EF%BC%89">https://www.postman.com/）</a><br>●VMware：虚拟机软件（<a href="https://www.vmware.com/%EF%BC%89">https://www.vmware.com/）</a><br>●Chocolatey：Windows 软件包管理器（<a href="https://chocolatey.org/%EF%BC%89">https://chocolatey.org/）</a><br>●Typora：写文档软件（<a href="https://typora.io/%EF%BC%89">https://typora.io/）</a></p><p><strong>效率</strong></p><p>●Ditto：强大的剪切板（<a href="https://ditto-cp.sourceforge.io/%EF%BC%89">https://ditto-cp.sourceforge.io/）</a><br>●uTools：插件化的效率工具（<a href="https://u.tools/%EF%BC%89">https://u.tools/）</a><br>●XMind：思维导图软件（<a href="https://www.xmind.cn/%EF%BC%89">https://www.xmind.cn/）</a><br>●Qdir：Windows 多窗口管理器（<a href="https://q-dir.en.softonic.com/%EF%BC%89">https://q-dir.en.softonic.com/）</a></p><p><strong>项目源码（50 套）</strong></p><p><strong>电商秒杀</strong></p><p>● 天猫整站 J2EE：<a href="https://how2j.cn/module/115.htm">https://how2j.cn/module/115.htm</a><br>● 天猫整站 SSM：<a href="https://how2j.cn/module/134.html">https://how2j.cn/module/134.html</a><br>● 天猫整站 Springboot：<a href="https://how2j.cn/module/156.html">https://how2j.cn/module/156.html</a><br>● mall-learning：<a href="https://github.com/macrozheng/mall-learningmall">https://github.com/macrozheng/mall-learningmall</a> （学习教程，架构、业务、技术要点全方位解析）<br>● SpringBoot 电商商城系统 Mall4j：<a href="https://github.com/gz-yami/mall4j">https://github.com/gz-yami/mall4j</a><br>● SpringBoot 完整电商系统 Mall：<a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a> （包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现）<br>● newbee-mall：<a href="https://github.com/newbee-ltd/newbee-mall">https://github.com/newbee-ltd/newbee-mall</a> （一套电商系统，包括 newbee-mall 商城系统及 newbee-mall-admin 商城后台管理系统，基于 Spring Boot 2.X 及相关技术栈开发）<br>● paascloud-master：<a href="https://github.com/paascloud/paascloud-master">https://github.com/paascloud/paascloud-master</a> （基于 spring cloud + vue + oAuth2.0，前后端分离商城系统）<br>● mall-swarm：<a href="https://github.com/macrozheng/mall-swarm">https://github.com/macrozheng/mall-swarm</a> （一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统）<br>● onemall：<a href="https://github.com/YunaiV/onemall">https://github.com/YunaiV/onemall</a> （mall 商城，基于微服务的思想，构建在 B2C 电商场景下的项目实战。核心技术栈，是 Spring Boot + Dubbo 。未来，会重构成 Spring Cloud Alibaba）<br>● litemall：<a href="https://github.com/linlinjava/litemall">https://github.com/linlinjava/litemall</a> （又一个小商城，litemall &#x3D; Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端）<br>● xmall：<a href="https://github.com/Exrick/xmall">https://github.com/Exrick/xmall</a> （基于SOA架构的分布式电商购物商城 前后端分离 前台商城:Vue全家桶 后台管理系统）<br>● miaosha：<a href="https://github.com/qiurunze123/miaosha">https://github.com/qiurunze123/miaosha</a> （秒杀系统设计与实现）<br>● SecKill：<a href="https://github.com/hfbin/Seckill">https://github.com/hfbin/Seckill</a> （基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统） </p><p><strong>博客论坛</strong></p><p>●<a href="https://github.com/langhsu/mblog">Mblog</a>：开源 Java 博客系统<br>●<a href="https://github.com/halo-dev/halo">halo</a>：一个优秀的开源博客发布应用<br>●<a href="https://github.com/Qbian61/forum-java">forum-java</a>：一款用 Java（spring boot） 实现的现代化社区（论坛&#x2F;问答&#x2F;BBS&#x2F;社交网络&#x2F;博客）系统平台<br>●<a href="https://github.com/lenve/vhr">vhr</a>：微人事是一个前后端分离的人力资源管理系统，项目采用 SpringBoot+Vue 开发。<br>●<a href="https://github.com/cloudfavorites/favorites-web">favorites-web</a>:云收藏 Spring Boot 2.X 开源项目。云收藏是一个使用 Spring Boot 构建的开源网站，可以让用户在线随时随地收藏的一个网站，在网站上分类整理收藏的网站或者文章。<br>●<a href="https://github.com/codedrinker/community">community</a>：码问，开源论坛、问答系统，现有功能提问、回复、通知、最新、最热、消除零回复功能。技术栈 Spring、Spring Boot、MyBatis、MySQL&#x2F;H2、Bootstrap<br>●<a href="https://github.com/yourkevin/NiterForum">NiterForum</a>：尼特社区-NiterForum-一个论坛&#x2F;社区程序。后端Springboot&#x2F;MyBatis&#x2F;Maven&#x2F;MySQL，前端Thymeleaf&#x2F;Layui。可供初学者，学习、交流使用。<br>●<a href="https://github.com/lenve/VBlog">VBlog</a>：V部落，Vue+SpringBoot实现的多用户博客管理平台!<br>●<a href="https://github.com/damoqiongqiu/NiceFish">NiceFish</a>：SpringBoot&#x2F;SpringCloud 前后端分离项目<br>●<a href="https://github.com/ZHENFENG13/My-Blog">My-Blog</a>： My Blog 是由 SpringBoot + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验。<br>●<a href="https://github.com/ZHENFENG13/My-Blog-layui">My-Blog-layui</a>：layui 版本的 My-Blog : A simple &amp; beautiful blogging system implemented with spring-boot &amp; layui &amp; thymeleaf &amp; mybatis My Blog 是由  SpringBoot + Layui + Mybatis + Thymeleaf 等技术实现的 Java  博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验<br>●<a href="https://github.com/88250/symphony">symphony</a>：Java 实现的现代化社区 </p><p><strong>管理系统</strong></p><p>●<a href="https://github.com/wxiaoqi/Spring-Cloud-Admin">Spring-Cloud-Admin</a>：Cloud-Admin 是国内首个基于 Spring Cloud 微服务化开发平台，具有统一授权、认证后台管理系统，其中包含具备用户管理、资源权限管理、网关 API 管理等多个模块，支持多业务系统并行开发，可以作为后端服务的开发脚手架。代码简洁，架构清晰，适合学习和直接项目中使用。核心技术采用 Spring Boot2 以及 Spring Cloud Gateway 相关核心组件，前端采用 vue-element-admin 组件。<br>●<a href="https://github.com/tomsun28/bootshiro">bootshiro</a>：基于 springboot+shiro+jwt 的资源无状态认证权限管理系统后端<br>●<a href="https://github.com/72crm/72crm-java">悟空CRM</a>：基于jfinal+vue+ElementUI的前后端分离CRM系统<br>●<a href="https://github.com/elunez/eladmin">EL-ADMIN</a>：基于 SpringBoot 的后台管理系统<br>●<a href="https://gitee.com/log4j/pig">pig</a>：基于 Spring Boot 2.2、 Spring Cloud Hoxton &amp; Alibaba、 OAuth2 的 RBAC 权限管理系统。<br>●<a href="https://github.com/wuyouzhuguli/FEBS-Shiro">FEBS-Shiro</a>：Spring Boot 2.1.3，Shiro1.4.0 &amp; Layui 2.5.4 权限管理系统。<br>●<a href="https://github.com/Heeexy/SpringBoot-Shiro-Vue">Spring Boot-Shiro-Vue</a>：基于Spring Boot-Shiro-Vue 的权限管理<br>●<a href="https://github.com/ZeroWdd/studentmanager">studentmanager</a>：基于springboot+mybatis学生管理系统<br>●<a href="https://github.com/jishenghua/jshERP">jshERP</a>：华夏ERP基于SpringBoot框架和SaaS模式，立志为中小企业提供开源好用的ERP软件，目前专注进销存+财务功能。主要模块有零售管理、采购管理、销售管理、仓库管理、财务管理、报表查询、系统管理等。支持预付款、收入支出、仓库调拨、组装拆卸、订单等特色功能。拥有库存状况、出入库统计等报表。同时对角色和权限进行了细致全面控制，精确到每个按钮和菜单。<br>●<a href="https://github.com/misterchaos/HotelSystem">HotelSystem</a>：酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架 </p><p><strong>开发平台</strong></p><p>●<a href="https://github.com/2014shijina2014/open-capacity-platform">open-capacity-platform</a>：微服务能力开发平台<br>●<a href="https://github.com/zhangdaiscott/jeecg-boot">jeecg-boot</a>：JeecgBoot是一款基于BPM的低代码平台！前后端分离架构 SpringBoot 2.x，SpringCloud，Ant  Design&amp;Vue，Mybatis-plus，Shiro，JWT，支持微服务。强大的代码生成器让前后端代码一键生成，实现低代码开发！</p><p><strong>其他</strong></p><p>●<a href="https://github.com/mindskip/xzs">学之思在线考试系统</a>：一款 java + vue 的前后端分离的考试系统<br>●<a href="https://github.com/Jackson0714/PassJava-Platform">PassJava-Platform</a>：一款面试刷题的 Spring Cloud 开源系统<br>●<a href="https://github.com/kekingcn/kkFileView">kkFileView</a>：使用spring boot打造文件文档在线预览项目<br>●<a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter">dynamic-datasource</a>：一个基于springboot的快速集成多数据源的启动器<br>●<a href="https://github.com/373675032/moti-cloud">moti-cloud</a>：莫提网盘，基于 SpringBoot+MyBatis+ThymeLeaf+BootStrap，适合初学者<br>●<a href="https://github.com/qiurunze123/threadandjuc">threadandjuc</a>：three-high-import 高可用\高可靠\高性能，三高多线程导入系统（该项目意义为理论贯通)<br>●<a href="https://github.com/proxyee-down-org/proxyee-down">proxyee-down</a>：http下载工具，基于http代理，支持多连接分块下载<br>●<a href="https://github.com/sfturing/hosp_order">hosp_order</a>：医院预约挂号系统，基于 SSM 框架<br>●<a href="https://how2j.cn/module/170.html">趋势投资 SpringCloud</a><br>●<a href="https://how2j.cn/module/176.html">DiyTomcat</a></p><p><strong>阶段 6：Java 高级</strong></p><p><strong>目标</strong></p><p>不满足于能做，而是通过更 <strong>深入</strong> 和 <strong>广泛</strong> 的学习，实现高质量的代码和更优秀的架构，培养解决问题的能力。</p><p>已经到了这个阶段，建议除了看完成的教程外，平时多自主搜索信息去学习，积少成多。比如遇到了一个不了解的名词，可以去网上搜一下，感兴趣的话再进行下一步的学习。</p><p><strong>🌖 并发编程（21 天）</strong></p><p>对 Java 后端开发程序员来说，懂得如何利用有限的系统资源来提高系统的性能是很重要的，也是大厂面试考察的重点，因此并发编程（尤其是 Java 并发包的使用）这块的知识很重要。</p><p>把它放到高级，是因为在学并发编程前，需要有一定的编程经验、了解一定的操作系统知识。</p><p><strong>知识</strong></p><p>●线程和进程<br>●线程状态<br>●并行和并发<br>●同步和异步<br>●Synchronized<br>●Volatile 关键字<br>●Lock 锁<br>●死锁<br>●可重入锁<br>●线程安全<br>●线程池<br>●JUC 的使用<br>●AQS<br>●Fork Join<br>●CAS</p><p><strong>学习建议</strong></p><p>并发编程入门不难，依然是 <strong>先学会使用</strong> 基础的 Java 并发包， 再通过大量地实践和测试，了解一些原理，才能真正掌握何时使用、如何更合理地使用并发编程。而不是张口闭口多线程，上天入地高并发。</p><p><strong>经典面试题</strong></p><p>1volatile 关键字的作用<br>2使用线程池有哪些好处？<br>3线程池参数如何设置？<br>4什么是线程安全问题，如何解决？<br>5介绍 synchronized 的锁升级机制<br>6CopyOnWriteArrayList 适用于哪种场景？</p><p><strong>资源</strong></p><p>● 视频<br>○⭐【尚硅谷】大厂必备技术之JUC并发编程2021最新版：<a href="https://www.bilibili.com/video/BV1Kw411Z7dF">https://www.bilibili.com/video/BV1Kw411Z7dF</a> （特点是短、精、新）<br>○黑马程序员全面深入学习Java并发编程：<a href="https://www.bilibili.com/video/BV16J411h7Rd">https://www.bilibili.com/video/BV16J411h7Rd</a> （讲的很细、全面深入）<br>● 书籍<br>○⭐《Java并发编程实战》（国外的经典）<br>○⭐《Java 并发编程艺术》（国人写的，理论思想内容较多，有时间建议反复看）<br>○⭐《图解 Java 多线程设计模式》：<a href="https://www.aliyundrive.com/s/MBKzUxWWBbe">https://www.aliyundrive.com/s/MBKzUxWWBbe</a> 提取码: 9gc7（如果已经学了 Java 并发编程，可以额外学习，这里的设计模式）<br>● 项目<br>○⭐ Java 并发知识点总结：<a href="https://github.com/CL0610/Java-concurrency">https://github.com/CL0610/Java-concurrency</a></p><p><strong>🌖 JVM（30 天）</strong></p><p>想要深入理解 Java，探秘 Java 跨平台的奥秘，一定要了解 Java 底层的虚拟机技术。</p><p>了解虚拟机、掌握虚拟机性能调优方法，有助于你写出更高性能、资源占用更小的优质程序。</p><p>在学习 JVM 的过程中，也能学到很多精妙的设计，开拓思路。</p><p><strong>知识</strong></p><p>●JVM 内存结构<br>●JVM 生命周期<br>●主流虚拟机<br>●Java 代码执行流程<br>●类加载<br>○类加载器<br>○类加载过程<br>○双亲委派机制<br>●垃圾回收<br>○垃圾回收器<br>○垃圾回收策略<br>○垃圾回收算法<br>○StopTheWorld<br>●字节码<br>●内存分配和回收<br>●JVM 性能调优<br>○性能分析方法<br>○常用工具<br>○参数设置<br>●Java 探针<br>●线上故障分析</p><p><strong>学习建议</strong></p><p>JVM 的知识略显枯燥，建议先看视频，有实操的地方一定要实操！自己多去分析。</p><p>第一遍不理解没有关系，可以再看书来巩固，想要真正学好，《深入理解 Java 虚拟机（第三版）》一定要读。</p><p>如果只是为了通过面试可以直接看更精简的视频，比如狂神的。</p><p><strong>经典面试题</strong></p><p>1介绍 JVM 的内存模型？<br>2JVM 内存为什么要分代？<br>3介绍一次完整的 GC 流程<br>4介绍双亲委派模型，为什么需要它？</p><p><strong>资源</strong></p><p>●视频<br>○⭐ 尚硅谷宋红康 - JVM 全套教程详解：<a href="https://www.bilibili.com/video/BV1PJ411n7xZ">https://www.bilibili.com/video/BV1PJ411n7xZ</a> （讲得相当全面！附有实操）<br>○【狂神说Java】JVM快速入门篇：<a href="https://www.bilibili.com/video/BV1iJ411d7jS">https://www.bilibili.com/video/BV1iJ411d7jS</a> （讲得有点浅，但都是面试重点，时间紧的小伙伴可以直接看这个）<br>●书籍<br>○⭐《深入理解 Java 虚拟机（第三版）》（有理论有实践，内容丰富，不可多得的 JVM 学习神书，就是有点废头发）<br>●项目<br>○⭐ Java 虚拟机底层原理知识总结：<a href="https://github.com/doocs/jvm">https://github.com/doocs/jvm</a><br>●实战<br>○阿里云 JVM 实战：<a href="https://developer.aliyun.com/graph/java/point/64">https://developer.aliyun.com/graph/java/point/64</a><br>●工具<br>○Arthas 开源 Java 诊断工具：<a href="https://github.com/alibaba/arthas">https://github.com/alibaba/arthas</a></p><p><strong>🌖 Java 高级知识</strong><br>通过阅读文章了解即可<br><strong>知识</strong><br>●动态代理<br>●Java 探针<br>●字节码，参考：<a href="https://github.com/fuzhengwei/itstack-demo-bytecode">https://github.com/fuzhengwei/itstack-demo-bytecode</a><br>●UnSafe 类<br>●协程 &#x2F; 纤程</p><p><strong>架构设计</strong></p><p><strong>🌖 分布式</strong></p><p>●分布式理论<br>○CAP<br>○BASE<br>●分布式缓存<br>○Redis<br>○Memcached<br>○Etcd<br>●一致性算法<br>○Raft<br>○Paxos<br>○一致性哈希<br>●分布式事务<br>○解决方案<br>■2PC<br>■3PC<br>■TCC<br>■本地消息表<br>■MQ 事务消息<br>■最大努力通知<br>○LCN 分布式事务框架：<a href="https://github.com/codingapi/tx-lcn">https://github.com/codingapi/tx-lcn</a><br>●分布式 id 生成<br>○Leaf 分布式 id 生成服务：<a href="https://github.com/Meituan-Dianping/Leaf">https://github.com/Meituan-Dianping/Leaf</a><br>●分布式任务调度<br>○XXL-JOB 调度平台：<a href="https://www.xuxueli.com/xxl-job/">https://www.xuxueli.com/xxl-job/</a><br>○elastic-job：<a href="https://gitee.com/elasticjob/elastic-job">https://gitee.com/elasticjob/elastic-job</a><br>●分布式服务调用<br>○trpc<br>●分布式存储<br>○HDFS<br>○Ceph<br>●分布式数据库<br>○TiDB<br>○OceanBase<br>●分布式文件系统<br>○HDFS<br>●分布式协调<br>○Zookeeper<br>●分布式监控<br>○Prometheus<br>○Zabbix<br>●分布式消息队列<br>○RabbitMQ<br>○Kafka<br>○Apache Pulsar<br>●分布式日志收集<br>○Elastic Stack<br>○Loki<br>●分布式搜索引擎<br>○Elasticsearch<br>●分布式链路追踪<br>○Apache SkyWalking<br>●分布式配置中心<br>○Apollo<br>○Nacos</p><p><strong>🌗 高可用</strong></p><p>●限流<br>●降级熔断<br>●冷备<br>●双机热备<br>●同城双活<br>●异地双活<br>●异地多活<br>●容灾备份</p><p><strong>🌗 高并发</strong></p><p>●数据库<br>○分库分表<br>■MyCat 中间件<br>■Apache ShardingSphere 中间件<br>○读写分离<br>●缓存<br>○缓存雪崩<br>○缓存击穿<br>○缓存穿透<br>●负载均衡<br>○负载均衡算法<br>○软硬件负载均衡（2、3、4、7 层）</p><p><strong>🌘 服务网格</strong></p><p>服务网格用来描述组成应用程序的微服务网络以及它们之间的交互。服务网格的规模和复杂性不断的增长，它将会变得越来越难以理解和管理，常见的需求包括服务发现、负载均衡、故障恢复、度量和监控等。</p><p><strong>知识</strong></p><p>●Istio<br>○流量管理<br>○安全性<br>○可观测性<br>●Envoy（开源的边缘和服务代理）</p><p><strong>资源</strong></p><p>●资料大全：<a href="https://www.servicemesher.com/awesome-servicemesh/">https://www.servicemesher.com/awesome-servicemesh/</a><br>●istio 官方文档：<a href="https://preliminary.istio.io/latest/zh">https://preliminary.istio.io/latest/zh</a><br>●istio 视频教程：<a href="https://www.bilibili.com/video/BV1Lf4y1x7j8">https://www.bilibili.com/video/BV1Lf4y1x7j8</a><br>●在线体验 istio：<a href="https://katacoda.com/courses/istio/">https://katacoda.com/courses/istio/</a></p><p><strong>🌘 DDD 领域驱动设计</strong></p><p>将数据、业务流程抽象成容易理解的领域模型，通过用代码实现领域模型，来组成完整的业务系统。</p><p><strong>知识</strong></p><p>●DDD 的优势<br>●DDD 的适用场景<br>●DDD 核心概念<br>○领域模型分类：失血、贫血、充血、涨血<br>○子域划分：核心域、通用域、支撑域<br>○限界上下文<br>○实体和值对象<br>○聚合设计<br>○领域事件<br>●DDD 实践</p><p><strong>资源</strong></p><p>●DDD 入门：<a href="https://juejin.cn/post/7004002483601145863">https://juejin.cn/post/7004002483601145863</a><br>●DDD 编码实践：<a href="https://juejin.cn/post/6844903903104860174">https://juejin.cn/post/6844903903104860174</a><br>●DDD 实践教程：<a href="https://www.bilibili.com/video/BV1Y341167Xp">https://www.bilibili.com/video/BV1Y341167Xp</a></p><p><strong>🌘 其他</strong></p><p>●Sidecar<br>●Serverless<br>●云原生</p><p><strong>学习建议</strong></p><p>架构设计的学习没有顶点，多看文章，思考每种设计的优缺点和适用场景，有机会的话在企业中实践即可。</p><p>还在学校、或者初入这行的同学切记，千万不要一味地去背诵架构设计的八股文。你可以背，但是这一块的知识只有结合具体的项目才有意义，所以要多做项目去实践设计的合理性，而不是什么设计都咔咔往系统里去怼。比如面试问到分布式事务，能结合自己项目中用分布式事务解决问题的经验去回答最好。</p><p><strong>🌘 其他技术</strong></p><p>●热数据探测技术：京东 HotKey<br>●数据库流水订阅：阿里 Canal<br>●监控告警<br>●应用安全<br>●故障演练<br>●流量回放</p><p><strong>阶段 7：Java 求职</strong></p><p><strong>目标</strong></p><p>找到好工作</p><p><strong>建议</strong></p><p>1尽早做规划，可以通过大厂招聘官网的岗位描述来了解岗位的要求<br>2雕琢一份优秀的简历，推荐阅读：<a href="https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA">https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA</a><br>3多读面经，坚持刷算法<br>4多参与面试，持续复盘总结</p><p><strong>资源</strong></p><p><strong>校招岗位</strong></p><p>●⭐ 牛客求职校招版：<a href="https://www.nowcoder.com/recommend/campus">https://www.nowcoder.com/recommend/campus</a><br>●阿里 Java 开发：<a href="https://campus.alibaba.com/position.htm?refno=12699">https://campus.alibaba.com/position.htm?refno=12699</a><br>●腾讯后台开发：<a href="https://join.qq.com/post_detail.html?pid=1&id=101&tid=2">https://join.qq.com/post_detail.html?pid&#x3D;1&amp;id&#x3D;101&amp;tid&#x3D;2</a><br>●腾讯全栈开发：<a href="https://join.qq.com/post_detail.html?pid=1&id=137&tid=2">https://join.qq.com/post_detail.html?pid&#x3D;1&amp;id&#x3D;137&amp;tid&#x3D;2</a><br>●腾讯运营开发：<a href="https://join.qq.com/post_detail.html?pid=1&id=105&tid=2">https://join.qq.com/post_detail.html?pid&#x3D;1&amp;id&#x3D;105&amp;tid&#x3D;2</a><br>●美团后端开发：<a href="https://campus.meituan.com/jobs?jobFamily=1&jobId=4005&jobType=1&pageNo=2">https://campus.meituan.com/jobs?jobFamily=1&jobId=4005&jobType=1&pageNo=2</a><br>●华为软件开发：<a href="https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044">https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044</a></p><p><strong>社招岗位</strong></p><p>●⭐ 牛客求职社招版：<a href="https://www.nowcoder.com/recommend/fulltime">https://www.nowcoder.com/recommend/fulltime</a><br>●阿里社招：<a href="https://job.alibaba.com/zhaopin/positionList.htm">https://job.alibaba.com/zhaopin/positionList.htm</a><br>●腾讯社招：<a href="https://careers.tencent.com/search.html">https://careers.tencent.com/search.html</a></p><p><strong>实习</strong></p><p>●⭐ 牛客实习广场：<a href="https://nowpick.nowcoder.com/w/intern/center">https://nowpick.nowcoder.com/w/intern/center</a><br>●实习僧：<a href="https://www.shixiseng.com/">https://www.shixiseng.com/</a></p><p><strong>内推</strong></p><p>●牛客内推：<a href="https://www.nowcoder.com/discuss/referral/index">https://www.nowcoder.com/discuss/referral/index</a></p><p><strong>鱼皮经历</strong></p><p>●从 0 开始的编程学习进大厂经历<br>○⭐ 我学计算机的四年，共勉：<a href="https://mp.weixin.qq.com/s/Nc7Ee2UyrPg6hGseQUCzeg">https://mp.weixin.qq.com/s/Nc7Ee2UyrPg6hGseQUCzeg</a><br>●实习经历<br>○ ⭐ 我的第一份实习：<a href="https://mp.weixin.qq.com/s/SwGiRzyTkCOOCUXfXPR1Pw">https://mp.weixin.qq.com/s/SwGiRzyTkCOOCUXfXPR1Pw</a><br>○ ⭐ 我的第二份实习，字节跳动：<a href="https://mp.weixin.qq.com/s/3q-YIfuZBjPjSnamNwOraw">https://mp.weixin.qq.com/s/3q-YIfuZBjPjSnamNwOraw</a></p><p><strong>知识总结</strong></p><p>●⭐ 牛客 Java 面试宝典：<a href="https://www.nowcoder.com/tutorial/94">https://www.nowcoder.com/tutorial/94</a><br>●⭐ JavaGuide：<a href="https://snailclimb.gitee.io/javaguide/#/">https://snailclimb.gitee.io/javaguide/#/</a><br>●⭐ CS-Notes：<a href="http://www.cyc2018.xyz/">http://www.cyc2018.xyz/</a><br>●阿里 Java 技术图谱：<a href="https://developer.aliyun.com/graph/java">https://developer.aliyun.com/graph/java</a></p><p><strong>面经</strong></p><p>● ⭐ 牛客面经：<a href="https://www.nowcoder.com/discuss/experience?tagId=639">https://www.nowcoder.com/discuss/experience?tagId=639</a><br>● 秋招总结&amp;Java心得（双非硕士，已拿11+5家Offer）：<a href="https://www.nowcoder.com/discuss/327041">https://www.nowcoder.com/discuss/327041</a><br>● 被疫情逼得gap year的完全菜鸡的春招之路。：<a href="https://www.nowcoder.com/discuss/427812">https://www.nowcoder.com/discuss/427812</a><br>● 谨以此文纪念2019年春招：<a href="https://www.nowcoder.com/discuss/181212">https://www.nowcoder.com/discuss/181212</a><br>● 2019秋招经验谈：<a href="https://www.nowcoder.com/discuss/122463">https://www.nowcoder.com/discuss/122463</a><br>● 秋招心得：<a href="https://www.nowcoder.com/discuss/317888">https://www.nowcoder.com/discuss/317888</a><br>● 非科班本科菜鸡投的337家(Java后台)：<a href="https://www.nowcoder.com/discuss/133333">https://www.nowcoder.com/discuss/133333</a><br>● 2018 这一年：<a href="https://www.nowcoder.com/discuss/137593">https://www.nowcoder.com/discuss/137593</a><br>● 双非的秋招，感谢牛客：<a href="https://www.nowcoder.com/discuss/142181">https://www.nowcoder.com/discuss/142181</a><br>● 二本本科Java上岸(滴滴京东58)2019秋招心得+面经：<a href="https://www.nowcoder.com/discuss/333912">https://www.nowcoder.com/discuss/333912</a><br>● 碎碎念流水账特别长 of 自己的 Java 秋招：<a href="https://www.nowcoder.com/discuss/354154">https://www.nowcoder.com/discuss/354154</a><br>● 秋招之路：个人历程以及面经总结：<a href="https://www.nowcoder.com/discuss/344311">https://www.nowcoder.com/discuss/344311</a><br>● 【秋招面经总结】菜逼的坎坷之路（JAVA后台研发）：<a href="https://www.nowcoder.com/discuss/352030">https://www.nowcoder.com/discuss/352030</a><br>● 阿里11面+EMC+网易+美团面经：<a href="https://www.nowcoder.com/discuss/105302">https://www.nowcoder.com/discuss/105302</a><br>● 2018秋招阿里巴巴java笔试试题：<a href="https://www.nowcoder.com/discuss/67379">https://www.nowcoder.com/discuss/67379</a><br>● 我的秋招经验分享（已拿BAT头条网易）：<a href="https://www.nowcoder.com/discuss/117071">https://www.nowcoder.com/discuss/117071</a><br>● 20届的阿里 头条 网易  滴滴 百度 小米等Java面经：<a href="https://www.nowcoder.com/discuss/68289">https://www.nowcoder.com/discuss/68289</a><br>● 拿了5个offer，回馈牛友发一波面经（长文详细）：<a href="https://www.nowcoder.com/discuss/79051">https://www.nowcoder.com/discuss/79051</a><br>● 【总结】零基础学习一年拿到BAT三家offer：<a href="https://www.nowcoder.com/discuss/188241">https://www.nowcoder.com/discuss/188241</a><br>● 本科生秋招经验总结帖：<a href="https://www.nowcoder.com/discuss/296586">https://www.nowcoder.com/discuss/296586</a><br>● 双非渣硕校招总结+Java面经（网易阿里百度等）：<a href="https://www.nowcoder.com/discuss/134850">https://www.nowcoder.com/discuss/134850</a><br>● 2018秋招笔试科大讯飞java笔试试题：<a href="https://www.nowcoder.com/discuss/67684">https://www.nowcoder.com/discuss/67684</a><br>● 头条后台研发面经（共三面）：<a href="https://www.nowcoder.com/discuss/94233">https://www.nowcoder.com/discuss/94233</a><br>● 一点点小经验和几家Java面经：<a href="https://www.nowcoder.com/discuss/138434">https://www.nowcoder.com/discuss/138434</a><br>● 感谢牛客网！发一波面经！阿里、网易游戏、京东等offer。：<a href="https://www.nowcoder.com/discuss/101712">https://www.nowcoder.com/discuss/101712</a><br>● 非科班水硕的春招实习总结- Java 后台开发：<a href="https://www.nowcoder.com/discuss/186528">https://www.nowcoder.com/discuss/186528</a><br>● 十面阿里，七面头条，六个Offer，春招结束：<a href="https://www.nowcoder.com/discuss/80156">https://www.nowcoder.com/discuss/80156</a><br>● 成功上岸，最后一波回馈：<a href="https://www.nowcoder.com/discuss/176434">https://www.nowcoder.com/discuss/176434</a><br>● 【Java后台开发面经】阿里|网易|头条|腾讯|华为：<a href="https://www.nowcoder.com/discuss/108655">https://www.nowcoder.com/discuss/108655</a><br>● 三跨学生的面经（头条、拼多多、华为、vivo）：<a href="https://www.nowcoder.com/discuss/195640">https://www.nowcoder.com/discuss/195640</a></p><p><strong>面试题解</strong></p><p>●⭐ 2021 最新 Java 笔试、面试题合集：<a href="https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ">https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ</a> （密码：lkw1）<br>●牛客网 Java开发校招面试考点汇总（附面试题和答案）：<a href="https://www.nowcoder.com/discuss/161991">https://www.nowcoder.com/discuss/161991</a><br>●50w字+的技术类校招面试题汇总（附答案+考点）：<a href="https://www.nowcoder.com/discuss/164726">https://www.nowcoder.com/discuss/164726</a><br>●硬件，软件（后端开发，算法，数据分析等）历年企业笔试真题汇总：<a href="https://www.nowcoder.com/discuss/212783">https://www.nowcoder.com/discuss/212783</a></p><p><strong>视频</strong></p><p>● ⭐ 尚硅谷 2021 逆袭版 Java 面试题第三季：<a href="https://www.bilibili.com/video/BV1Hy4y1B78T">https://www.bilibili.com/video/BV1Hy4y1B78T</a><br>● ⭐ 阿里大佬透彻讲解 Java 面试 500 道必考题：<a href="https://www.bilibili.com/video/BV1yU4y1J7Bb">https://www.bilibili.com/video/BV1yU4y1J7Bb</a></p><p><strong>阶段 8：持续学习</strong></p><p><strong>目标</strong></p><p>持续追求技术的深度和广度，培养自己的 <strong>核心竞争力</strong> 和 <strong>不可替代性</strong> ，学无止境！</p><p><strong>学习建议</strong></p><p>自主学习，自主搜索教程，多看书，多阅读技术博客，多实践。</p><p><strong>学习方向</strong></p><p><strong>框架源码</strong></p><p>●Spring<br>●SpringBoot<br>●SpringMVC<br>●MyBatis<br>●Netty<br>●Dubbo<br>●SpringCloud</p><p><strong>计算机原理</strong></p><p>●《算法导论》：<a href="https://www.bilibili.com/video/av48922404">https://www.bilibili.com/video/av48922404</a><br>●《现代操作系统》：<a href="https://www.bilibili.com/video/av9555596">https://www.bilibili.com/video/av9555596</a><br>●《深入理解计算机系统》：<a href="https://www.bilibili.com/video/av31289365">https://www.bilibili.com/video/av31289365</a><br>●《编译原理》： <a href="https://www.bilibili.com/video/av17649289">https://www.bilibili.com/video/av17649289</a><br>●《计算机网络：自顶向下方法》：<a href="https://www.bilibili.com/video/BV1JV411t7ow">https://www.bilibili.com/video/BV1JV411t7ow</a><br>●《计算机程序的构造和解释》：<a href="https://www.bilibili.com/video/av8515129">https://www.bilibili.com/video/av8515129</a><br>●《数据库系统概论》：<a href="https://www.bilibili.com/video/BV1G54y1d7ZK">https://www.bilibili.com/video/BV1G54y1d7ZK</a></p><p><strong>数据库 &#x2F; 中间件 &#x2F; 分布式</strong></p><p>●数据库<br>○MySQL<br>○PostgreSQL<br>●缓存<br>○Redis<br>●队列<br>○Apache Kafka<br>○Apache Pulsar<br>●搜索引擎<br>○Elastic Stack<br>■Elasticsearch<br>■logstash<br>■kibana<br>■beats<br>●容器<br>○Docker<br>○K8S</p><p><strong>解决方案</strong></p><p>●广告系统<br>●电商系统<br>●搜索系统<br>●支付转账<br>●游戏后台<br>●即时通讯<br>●社交系统<br>●CMS 系统<br>●ERP 系统<br>●OA 系统<br>●代码生成<br>●权限管理<br>●秒杀活动</p><p><strong>架构设计</strong></p><p>同阶段 6 架构设计部分</p><p><strong>大数据</strong></p><p>●5V 特点<br>●Hadoop<br>●HDFS<br>●MapReduce<br>●Spark<br>●Flink<br>●Storm<br>●Hive<br>●HBase<br>●Druid<br>●Kylin<br>●Pig<br>●Mahout</p><p><strong>前沿技术</strong></p><p>●云原生：<a href="https://www.jianshu.com/p/a37baa7c3eff">https://www.jianshu.com/p/a37baa7c3eff</a><br>○Quasar Framework：<a href="http://www.quasarchs.com/">http://www.quasarchs.com/</a><br>●服务网格：<a href="https://www.redhat.com/zh/topics/microservices/what-is-a-service-mesh">https://www.redhat.com/zh/topics/microservices/what-is-a-service-mesh</a><br>○istio：<a href="https://github.com/istio/istio">https://github.com/istio/istio</a><br>●GraalVM：<a href="https://juejin.cn/post/6850418120570437646">https://juejin.cn/post/6850418120570437646</a> （高性能的通用虚拟机）<br>○官网：<a href="https://www.graalvm.org/">https://www.graalvm.org/</a><br>●ZGC：<a href="https://juejin.cn/post/6859276583656980493">https://juejin.cn/post/6859276583656980493</a> （新一代垃圾回收器）<br>○官网：<a href="http://openjdk.java.net/projects/zgc/">http://openjdk.java.net/projects/zgc/</a></p><p><strong>自学 Java 专题资源</strong></p><p>●⭐ GitHub Java 专区：<a href="https://github.com/topics/java">https://github.com/topics/java</a><br>●⭐ GitHub Java 合集：<a href="https://github.com/akullpp/awesome-java">https://github.com/akullpp/awesome-java</a><br>●StackOverflow：<a href="https://stackoverflow.com/questions/tagged/java">https://stackoverflow.com/questions/tagged/java</a> （解决问题必备）<br>●⭐ 掘金 Java 专区：<a href="https://juejin.cn/tag/Java">https://juejin.cn/tag/Java</a><br>●美团技术团队：<a href="https://tech.meituan.com/">https://tech.meituan.com/</a><br>●阿里技术团队：<a href="https://102.alibaba.com/tech/list/">https://102.alibaba.com/tech/list/</a><br>●有赞技术团队：<a href="https://tech.youzan.com/tag/back-end/">https://tech.youzan.com/tag/back-end/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 鱼皮 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列</title>
      <link href="/2023/04/10/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/2023/04/10/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<ol><li><p>什么是消息队列？（强烈建议读一下下面的文章）<br><a href="https://blog.csdn.net/qq_35190492/article/details/103153444?ops_request_misc=%7B%22request_id%22:%22166208835716782244858093%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166208835716782244858093&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-103153444-null-null.142%5Ev44%5Epc_rank_34_queryrelevant25&utm_term=%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97&spm=1018.2226.3001.4187">什么是消息队列</a></p><p><a href="https://blog.csdn.net/sinat_40770656/article/details/118583827?ops_request_misc=%7B%22request_id%22:%22166235508616782391857680%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166235508616782391857680&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-5-118583827-null-null.142%5Ev46%5Epc_rank_34_queryrelevant25&utm_term=%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97&spm=1018.2226.3001.4187">消息队列（定义、结构、如何创建、消息队列的发送与接收、发送与接收实例）_咋么又饿了的博客-CSDN博客_如何创建消息队列</a></p><p>（读完上面的文章我意识到这篇尚硅谷的rabbitMQ可能不够，后面还要学一下Kafka，但还是先学一下这个熟悉熟悉基本原理）</p><h1 id="MQ（消息队列的相关概念）"><a href="#MQ（消息队列的相关概念）" class="headerlink" title="MQ（消息队列的相关概念）"></a>MQ（消息队列的相关概念）</h1><p>:::info</p><h3 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h3><p>MQ(message queue)，从字面意思上看，本质是个队列，FIFO 先入先出（单向通道），只不过队列中存放的内容是message 而已，还是一种跨进程的通信机制，用于上下游传递消息。在互联网架构中，MQ 是一种非常常见的上下游“逻辑解耦+物理解耦”的消息通信服务。使用了 MQ 之后，消息发送上游只需要依赖 MQ，不用依赖其他服务。<br>（这就是一个队列，字面意思，或者说可存储的，要排队的容器）</p><h3 id="为什么要用MQ-功能"><a href="#为什么要用MQ-功能" class="headerlink" title="为什么要用MQ(功能)"></a>为什么要用MQ(功能)</h3><p>1.流量消峰<br>举个例子，如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正<br>常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。那么使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。<br>_ 用一个比喻，一条河流，假如它的下游能容纳的水量是有限的（系统最多处理一万次订单），为了防止洪水冲垮堤坝，我们应该怎么办呢？_<br><em>我们可以在上游修建一个水库（使用MQ队列），洪峰来的时候，我们先把水给蓄起来，闸口里只放出下游能承受地住的水量。</em><br>也就是让消息排起队来，一个一个慢慢的处理，好处是系统不会宕机，坏处是处理时间会变慢。<br>2.应用解耦<br>以电商应用为例，应用中有订单系统、库存系统、物流系统、支付系统。用户创建订单后，如果耦合<br>调用库存系统、物流系统、支付系统，任何一个子系统出了故障，都会造成下单操作异常。<br>当转变成基于 消息队列的方式后，系统间调用的问题会减少很多，比如物流系统因为发生故障，需要几分钟来修复。在 这几分钟的时间里，物流系统要处理的内存被缓存在消息队列中，用户的下单操作可以正常完成。当物流 系统恢复后，继续处理订单信息即可，中单用户感受不到物流系统的故障，提升系统的可用性。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/rabbitmq01.png#id=kWSy5&originHeight=291&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>3.异步处理<br>（这里我觉得尚硅谷举得栗子不太好，我就自己换了）<br>用户下单支付，支付操作中包括优惠卷换算，积分加减，短信提醒下单成功。。。。<br>如果不去异步处理的话，支付完成的时间响应会很长，而进行了异步处理这样子最多只用100毫秒用户知道下单成功了，至于短信你迟几秒发给他他根本不在意是吧。<br>通过提高系统性能（减少响应所需时间）<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/rabbitmq02.jpg#id=qHgzX&originHeight=472&originWidth=476&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="MQ的分类"><a href="#MQ的分类" class="headerlink" title="MQ的分类"></a>MQ的分类</h1><p>1.ActiveMQ ⭐<br>优点：单机吞吐量万级，时效性 ms 级，可用性高，基于主从架构实现高可用性，消息可靠性较<br>低,有概率丢失数据<br>缺点:官方社区现在对 ActiveMQ 5.x <strong>维护越来越少，高吞吐量场景较少使用</strong>。<br>2.Kafka⭐⭐⭐⭐<br>大数据的杀手锏，谈到大数据领域内的消息传输，则绕不开 Kafka，这款为<strong>大数据而生</strong>的消息中间件，<br>以其<strong>百万级</strong> <strong>TPS <strong>的吞吐量名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥着举足轻重的作用。目前已经被 LinkedIn，Uber, Twitter, Netflix 等大公司所采纳。<br>优点: 性能卓越，单机写入 TPS 约在百万条&#x2F;秒，最大的优点，就是吞</strong>吐量高</strong>。时效性 ms 级可用性非<br>常高，kafka 是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用,消费者采用 Pull 方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;有优秀的第三方KafkaWeb 管理界面 Kafka-Manager；在日志领域比较成熟，被多家公司和多个开源项目使用；功能支持： 功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及<strong>日志采集</strong>被大规模使用<br>缺点：Kafka 单机超过 64 个队列&#x2F;分区，Load 会发生明显的飙高现象，队列越多，load 越高，发送消<br>息响应时间变长，使用短轮询方式，实时性取决于轮询间隔时间，消费失败不支持重试；支持消息顺序，但是一台代理宕机后，就会产生消息乱序，<strong>社区更新较慢</strong>；<br>3.RocketMQ⭐⭐⭐⭐<br>RocketMQ 出自阿里巴巴的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一<br>些改进。被阿里巴巴广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog 分发等场景。<br>优点:<strong>单机吞吐量十万级</strong>,可用性非常高，分布式架构,<strong>消息可以做到</strong> <strong>0 丢失,<strong>MQ 功能较为完善，还是分<br>布式的，扩展性好,<strong>支持</strong> <strong>10 亿级别的消息堆积</strong>，不会因为堆积导致性能下降,源码是 java 我们可以自己阅读源码，定制自己公司的 MQ<br>缺点：</strong>支持的客户端语言不多</strong>，目前是 java 及 c++，其中 c++不成熟；社区活跃度一般,没有在MQ<br>核心中去实现 JMS 等接口,有些系统要迁移需要修改大量代码<br>4.RabbitMQ⭐⭐<br>2007 年发布，是一个在AMQP(高级消息队列协议)基础上完成的，可复用的企业消息系统，是<strong>当前最</strong><br><strong>主流的消息中间件之一</strong>。<br>优点:由于 erlang 语言的<strong>高并发特性</strong>，性能较好；<strong>吞吐量到万级</strong>，MQ 功能比较完备,健壮、稳定、易<br>用、跨平台、<strong>支持多种语言</strong> 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持 AJAX 文档齐全；开源提供的管理界面非常棒，用起来很好用,<strong>社区活跃度高</strong>；更新频率相当高<br><a href="https://www.rabbitmq.com/news.html">https://www.rabbitmq.com/news.html</a><br>缺点：商业版需要收费,学习成本较高</p><h1 id="MQ的选择"><a href="#MQ的选择" class="headerlink" title="MQ的选择"></a>MQ的选择</h1><p>1.Kafka<br>Kafka 主要特点是基于Pull 的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集<br>和传输，适合产生<strong>大量数据</strong>的互联网服务的数据收集业务。<strong>大型公司</strong>建议可以选用，如果有<strong>日志采集</strong>功能，肯定是首选 kafka 了。<br>2.RocketMQ<br>天生为<strong>金融互联网</strong>领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削<br>峰，在大量交易涌入时，后端可能无法及时处理的情况。RoketMQ 在稳定性上可能更值得信赖，这些业务场景在阿里双 11 已经经历了多次考验，如果你的业务有上述并发场景，建议可以选RocketMQ。<br>3.RabbitMQ<br>结合 erlang 语言本身的并发优势，性能好<strong>时效性微秒级</strong>，<strong>社区活跃度也比较高</strong>，管理界面用起来十分<br>方便，如果你的<strong>数据量没有那么大</strong>，中小型公司优先选择功能比较完备的 RabbitMQ。<br>:::</p><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="RabbitMQ概念"><a href="#RabbitMQ概念" class="headerlink" title="RabbitMQ概念"></a>RabbitMQ概念</h2><blockquote><p>RabbitMQ 是一个消息中间件：它接受并转发消息。你可以把它当做一个快递站点，当你要发送一个包<br>裹时，你把你的包裹放到快递站，快递员最终会把你的快递送到收件人那里，按照这种逻辑RabbitMQ 是一个快递站，一个快递员帮你传递快件。RabbitMQ 与快递站的主要区别在于，它不处理快件而是接收，存储和转发消息数据。</p><h2 id="四大核心概念"><a href="#四大核心概念" class="headerlink" title="四大核心概念"></a>四大核心概念</h2><p><strong>生产者</strong><br>产生数据发送消息的程序是生产者<br><strong>交换机</strong><br>交换机是 RabbitMQ 非常重要的一个部件，一方面它接收来自生产者的消息，另一方面它将消息<br>推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推<br>送到多个队列，亦或者是把消息丢弃，这个得有交换机类型决定<br><strong>队列</strong><br>队列是 RabbitMQ 内部使用的一种数据结构，尽管消息流经 RabbitMQ 和应用程序，但它们只能存<br>储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区。许多生产者可<br>以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。这就是我们使用队列的方式<br><strong>消费者</strong><br>消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序。请注意生产者，消费<br>者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又是可以是消费者。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/rabbitmq03.png#id=XNUkT&originHeight=374&originWidth=980&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="RabbitMQ-核心部分-六大模式"><a href="#RabbitMQ-核心部分-六大模式" class="headerlink" title="RabbitMQ 核心部分(六大模式)"></a>RabbitMQ 核心部分(六大模式)</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/rabbitmq04.png#id=oGRa6&originHeight=569&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>简单模式、工作模式、发布订阅模式、路由模式、主题模式、发布确认模式(后面会逐一学习)</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/rabbitmq05.png#id=SvRIN&originHeight=391&originWidth=806&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><strong>Broker</strong>：接收和分发消息的应用，RabbitMQ Server 就是 Message Broker<br><strong>Virtual host</strong>：出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似<br>于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出多个 vhost，每个用户在自己的 vhost 创建 exchange／queue 等<br><strong>Connection</strong>：publisher／consumer 和 broker 之间的 TCP 连接<br><strong>Channel</strong>：如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP<br>Connection 的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个 thread 创建单独的 channel 进行通讯，AMQP method 包含了 channel id 帮助客户端和 message broker 识别 channel，所以 channel 之间是完全隔离的。<strong>Channel 作为轻量级的Connection 极大减少了操作系统建立</strong> <strong>TCP connection 的开销</strong><br><strong>Exchange</strong>：message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发<br>消息到 queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout<br>(multicast)<br><strong>Queue</strong>：消息最终被送到这里等待 consumer 取走<br><strong>Binding</strong>：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key，Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据</p></blockquote><h1 id="Rabbit-MQ安装"><a href="#Rabbit-MQ安装" class="headerlink" title="Rabbit MQ安装"></a>Rabbit MQ安装</h1><blockquote><p>RabbitMQ的安装： 安装虚拟机Vmware → 下载rabbitMQ环境**Erlang安装包→ **安装RabbitMQ</p></blockquote><p>(激活码我放到了集群那儿)</p><p><a href="https://blog.csdn.net/xhmico/article/details/122505951?ops_request_misc=%7B%22request_id%22:%22166389578616800180651835%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166389578616800180651835&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-122505951-null-null.142%5Ev50%5Econtrol,201%5Ev3%5Econtrol_2&utm_term=%E8%99%9A%E6%8B%9F%E6%9C%BA&spm=1018.2226.3001.4187"><strong>虚拟机-安装与使用（详细教程）_多加点辣也没关系的博客-CSDN博客_虚拟机怎么安装</strong></a></p><p>RabbitMQ<strong>官网</strong><br><a href="https://www.rabbitmq.com/download.html"><strong>Downloading and Installing RabbitMQ — RabbitMQ</strong></a></p><p>Window安装(我用的是这个，端口15672是可视化页面端口，但尽量用Linux下面集群好配一下。 后面我后悔了，一定要用Linux版的。😭)<br><a href="https://blog.csdn.net/tirster/article/details/121938987?ops_request_misc=&request_id=&biz_id=102&utm_term=Windows%E4%B8%8B%E5%AE%89%E8%A3%85RabbitMQ&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-121938987.nonecase&spm=1018.2226.3001.4187"><strong>【Windows安装RabbitMQ详细教程】_慕之寒的博客-CSDN博客_rabbitmq安装</strong></a></p><p>Linux安装（刚开始这个我没试，下面集群我试了）<br><a href="https://blog.csdn.net/qq_45173404/article/details/116429302?ops_request_misc=%7B%22request_id%22:%22166391581116782248542745%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166391581116782248542745&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116429302-null-null.142%5Ev50%5Econtrol,201%5Ev3%5Econtrol_2&utm_term=linux%E5%AE%89%E8%A3%85rabbitmq&spm=1018.2226.3001.4187"><strong>RabbitMQ超详细安装教程（Linux）_Baret-H的博客-CSDN博客_linux安装rabbitmq</strong></a></p><p><strong>Erlang与RabbitMQ版面对应</strong><br><a href="https://www.rabbitmq.com/which-erlang.html"><strong>RabbitMQ Erlang Version Requirements — RabbitMQ</strong></a></p><p>版本不对应报错<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/rabbitmq06.png#id=pXeA7&originHeight=145&originWidth=943&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=shadow&title="><br>出现下面这个错误，执行命令：rabbitmqctl stop表示正在停止和停止节点rabbit@xxx，再重新启动服务就不会报这个错误。systemctl start rabbitmq-server  启动rabbitMQ。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/rabbitmq07.png#id=qgcyL&originHeight=70&originWidth=983&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>有时进不去15672端口，可能是防火墙的原因。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#看查防火墙状态  关闭防火墙</span><br><span class="line">systemctl status firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"># 防火墙添加15672和5672的端口</span><br><span class="line">firewall-cmd --permanent --add-port=15672/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=5672/tcp</span><br><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><p>安装命令Linux(按照以下顺序执行)</p><p>1.官网地址<br><a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a><br>2.文件上传<br>上传到&#x2F;usr&#x2F;local&#x2F;software 目录下(如果没有 software 需要自己创建)<br>3.安装文件(分别按照以下顺序安装)<br>rpm -ivh erlang-21.3-1.el7.x86_64.rpm<br>yum install socat -y<br>rpm -ivh rabbitmq-server-3.8.8-1.el7.noarch.rpm<br>3.常用命令(按照以下顺序执行)<br>添加开机启动 RabbitMQ 服务<br>chkconfig rabbitmq-server on<br>启动服务(路径&#x2F;sbin&#x2F;service）<br>&#x2F;sbin&#x2F;service rabbitmq-server start<br>查看服务状态<br>&#x2F;sbin&#x2F;service rabbitmq-server status<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/rabbitmq08.png#id=UXvXu&originHeight=128&originWidth=662&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>停止服务(选择执行)<br>&#x2F;sbin&#x2F;service rabbitmq-server stop<br>开启 web 管理插件<br>rabbitmq-plugins enable rabbitmq_management<br>用默认账号密码(guest)访问地址 <a href="http://47.115.185.244:15672/%E5%87%BA%E7%8E%B0%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98">http://47.115.185.244:15672/出现权限问题</a><br>（出现：你和网站不是私密连接，也需要设置密码。）<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/rabbitmq09.png#id=PsoiX&originHeight=224&originWidth=448&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>4.添加一个新的用户<br>创建账号<br>rabbitmqctl add_user admin 123<br>设置用户角色<br>rabbitmqctl set_user_tags admin administrator<br>设置用户权限<br>#set_permissions [-p ]  <br>rabbitmqctl set_permissions -p “&#x2F;“ admin “.<em>“ “.</em>“ “.*”<br>用户 user_admin 具有&#x2F;vhost1 这个 virtual host 中所有资源的配置、写、读权限<br>当前用户和角色<br>rabbitmqctl list_users<br>(或者在这也行，我是在这加的，wind版，用一用翻译一下，对比一下guest就弄出来了)<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/rabbitmq10.png#id=CD2Xh&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>5.再次利用 admin 用户登录</p><ol start="6"><li>重置命令<br>关闭应用的命令为<br>rabbitmqctl stop_app<br>清除的命令为<br>rabbitmqctl reset<br>重新启动命令为<br>rabbitmqctl start_app</li></ol><h1 id="HELLO-WORLD（简单模式）"><a href="#HELLO-WORLD（简单模式）" class="headerlink" title="HELLO WORLD（简单模式）"></a>HELLO WORLD（简单模式）</h1><blockquote><p>在本教程的这一部分中，我们将用 Java 编写两个程序。发送单个消息的生产者和接收消息并打印<br>出来的消费者。我们将介绍 Java API 中的一些细节。<br>在下图中，“ P”是我们的生产者，“ C”是我们的消费者。中间的框是一个队列RabbitMQ 代表使用者保留的消息缓冲区<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/rabbitmq11.png#id=AZvhV&originHeight=136&originWidth=604&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--指定 jdk编译版本--&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;source&gt;<span class="number">8</span>&lt;/source&gt;</span><br><span class="line">                &lt;target&gt;<span class="number">8</span>&lt;/target&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!--rabbitmq 依赖客户端--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">5.8</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--操作文件流的一个依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.6</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;!-- 我报rg.slf4j的错误，就加上了这个依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        　　&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">        　　&lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;</span><br><span class="line">        　　&lt;version&gt;<span class="number">1.7</span><span class="number">.25</span>&lt;/version&gt;</span><br><span class="line">        　　&lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者：发消息 （生产者的作用类似于RPC-WebService中的客户端和服务端）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>  2022/09/06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line">    <span class="comment">// 消息的队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;HELLO WORLD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建连接的工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//工厂IP连接Rabbit MQ的队列</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);<span class="comment">//端口5672 是rabbitMQ,端口15672是RabbitMQ可视化页面的端口</span></span><br><span class="line">        <span class="comment">//用户名</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="comment">//密码</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span>  factory.newConnection();</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个队列(queueDeclare参数解析)</span></span><br><span class="line"><span class="comment">         * 1.队列名称</span></span><br><span class="line"><span class="comment">         * 2.队列是否持久化 默认消息存储在内存中</span></span><br><span class="line"><span class="comment">         * 3.该队列是否只供一个消费者进行消费 是否进行共享 true可以多个消费者消费</span></span><br><span class="line"><span class="comment">         * 4.是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true 自动删除</span></span><br><span class="line"><span class="comment">         * 5.其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//消息</span></span><br><span class="line">        String message=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 发送一个消息（basicPublish参数解析）</span></span><br><span class="line"><span class="comment">         * 1.发送到那个交换机</span></span><br><span class="line"><span class="comment">         * 2.路由的 key是哪个 本次队列的名称</span></span><br><span class="line"><span class="comment">         * 3.其他的参数信息</span></span><br><span class="line"><span class="comment">         * 4.发送消息的消息体</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="literal">null</span>,message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这整个流程可以看看上面的工作原理图</span></span><br></pre></td></tr></table></figure><p>连接失败解决：linux防火墙开放 5672 端口<br><strong>这整个流程可以看看上面的工作原理图</strong><br>运行发送完毕<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/rabbitmq12.png#id=elKQq&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者:接收消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/9/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="comment">//队列的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;HELLO WORLD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);   <span class="comment">//端口5672 是rabbitMQ,端口15672是RabbitMQ可视化页面的端口</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="comment">//创建连接，创建信道</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息.........&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//推送的消息如何进行消费的接口回调  (简单来说就是消息接受到了，在这里可以进行操作，并要回调告诉生产者)</span></span><br><span class="line">        DeliverCallback deliverCallback=(consumerTag,delivery)-&gt;&#123;</span><br><span class="line">            String message= <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody());</span><br><span class="line">            System.out.println(message);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取消消费的一个回调接口 如在消费的时候队列被删除掉了</span></span><br><span class="line">        CancelCallback cancelCallback=(consumerTag)-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消息消费被中断&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消费者消费消息</span></span><br><span class="line"><span class="comment">         * 1.消费哪个队列</span></span><br><span class="line"><span class="comment">         * 2.消费成功之后是否要自动应答 true 代表自动应答 false 手动应答</span></span><br><span class="line"><span class="comment">         * 3.消费者成功消费的回调(这里注意，老师讲的有瑕疵，看的弹幕)</span></span><br><span class="line"><span class="comment">         * 4.当一个消费者取消订阅时的回调接口;取消消费者订阅队列时</span></span><br><span class="line"><span class="comment"> *除了使用&#123;<span class="doctag">@link</span> Channel#basicCancel&#125;之外的所有方式都会调用该回调方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="literal">true</span>,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者这里 关于channel.basicConsume(QUEUE_NAME,true,deliverCallback,cancelCallback);里面的参数解析尚硅谷老师讲的有点小瑕疵。写出来没问题，只是讲解参数分析有误，就不好理解。（大家可以看看下面这个）<br><a href="%5Bhttps://blog.csdn.net/qq_18671415/article/details/105546395?ops_request_misc=%7B%22request_id%22:%22166244573416782248546891%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166244573416782248546891&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2%5D(https://blog.csdn.net/qq_18671415/article/details/105546395?ops_request_misc=%7B%22request_id%22:%22166244573416782248546891%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166244573416782248546891&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2"><strong>RabbitMQ中basicConsume、basicCancel、basicPublish方法</strong></a>allbaidu_landing_v2~default-2-105546395-null-null.142v46pc_rank_34_queryrelevant25&amp;utm_term&#x3D; channel.basicConsume(QUEUE_NAME%2Ctrue%2CdeliverCallback%2CcancelCallback)%3B&amp;spm&#x3D;1018.2226.3001.4187)</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/13rabbitmq.png#id=eD8El&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="Work-Queues-（工作模式）"><a href="#Work-Queues-（工作模式）" class="headerlink" title="Work Queues （工作模式）"></a>Work Queues （工作模式）</h1><p>:::success<br>Work queues，也被称为（Task queues），任务模型。<br>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用work 模型：让多个消费者绑定到一个队列，共同消费队列中的消息。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。（多个消费者如何去消费大量的消息，不会重复或丢失呢？）<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/14rabbitmq.png#id=S536X&originHeight=422&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="轮询分发消息"><a href="#轮询分发消息" class="headerlink" title="轮询分发消息"></a>轮询分发消息</h2><p>一个生产者发送消息，由多个工作线程（消费者）<a href="https://so.csdn.net/so/search?q=%E8%BD%AE%E8%AF%A2&spm=1001.2101.3001.7020">轮询</a>接收。（简单理解就好，就是你一个我一个）</p><h2 id="抽取工具类"><a href="#抽取工具类" class="headerlink" title="抽取工具类"></a>抽取工具类</h2><p>连接RabbitMQ工厂，创建信道。（代码重复进行提取）<br>:::</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接RabbitMQ工厂，创建信道的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>  2022/09/06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqUtils</span> &#123;</span><br><span class="line">        <span class="comment">//得到一个连接的 channel</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Channel <span class="title function_">getChannel</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">            <span class="comment">//创建一个连接工厂</span></span><br><span class="line">            <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">            factory.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">            factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="keyword">return</span> channel;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.tow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.CancelCallback;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者01（工作线程）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/9/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer01</span> &#123;</span><br><span class="line">    <span class="comment">//队列的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;HELLO WORLD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接受消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消息接收回调</span></span><br><span class="line">        DeliverCallback deliverCallback=(consumerTag, delivery)-&gt;&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">receivedMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody());</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到消息:&quot;</span>+receivedMessage);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//消息接受被取消</span></span><br><span class="line">        CancelCallback cancelCallback=(consumerTag)-&gt;&#123;</span><br><span class="line">            System.out.println(consumerTag+<span class="string">&quot;消费者取消消费接口回调逻辑&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *     消费者消费消息</span></span><br><span class="line"><span class="comment">         * 1.消费哪个队列</span></span><br><span class="line"><span class="comment">         * 2.消费成功之后是否要自动应答 true 代表自动应答 false 手动应答</span></span><br><span class="line"><span class="comment">         * 3.消费者成功消费的回调(这里注意，老师讲的有瑕疵，看的弹幕，不用紧张学到后面自然就懂了这个参数是啥)</span></span><br><span class="line"><span class="comment">         * 4.当一个消费者取消订阅时的回调接口;取消消费者订阅队列时</span></span><br><span class="line"><span class="comment">         *除了使用&#123;<span class="doctag">@link</span> Channel#basicCancel&#125;之外的所有方式都会调用该回调方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;C1 消费者启动等待消费.................. &quot;</span>);</span><br><span class="line">        <span class="comment">//        System.out.println(&quot;C2 消费者启动等待消费.................. &quot;);</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="literal">true</span>,deliverCallback,cancelCallback);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行多个线程（idea2021）<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/15rabbitmq.png#id=d2TFR&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>实在不行，在复制一份consumer02,在分别启动<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/16rabbitmq.png#id=qFRhx&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.tow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  生产者：发送大量消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/9/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer01</span> &#123;</span><br><span class="line">    <span class="comment">//队列的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;HELLO WORLD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送大量消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="comment">//连接</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//队列声明</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个队列(queueDeclare参数解析)</span></span><br><span class="line"><span class="comment">         * 1.队列名称</span></span><br><span class="line"><span class="comment">         * 2.队列是否持久化 默认消息存储在内存中</span></span><br><span class="line"><span class="comment">         * 3.该队列是否只供一个消费者进行消费 是否进行共享 true可以多个消费者消费</span></span><br><span class="line"><span class="comment">         * 4.是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true 自动删除</span></span><br><span class="line"><span class="comment">         * 5.其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从控制台中接受信息,并发送</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 发送一个消息（basicPublish参数解析）</span></span><br><span class="line"><span class="comment">             * 1.发送到那个交换机</span></span><br><span class="line"><span class="comment">             * 2.路由的 key是哪个 本次队列的名称</span></span><br><span class="line"><span class="comment">             * 3.其他的参数信息</span></span><br><span class="line"><span class="comment">             * 4.发送消息的消息体</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="literal">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;发送消息完成：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/17rabbitmq.png#id=eqzwF&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="消息应答"><a href="#消息应答" class="headerlink" title="消息应答"></a>消息应答</h1><p>:::warning<br>消费者完成一个任务可能需要一段时间，如果其中一个消费者处理一个长的任务并仅只完成了部分突然它挂掉了，会发生什么情况。<br>RabbitMQ 一旦向消费者传递了一条消息，便立即将该消息标记为删除。在这种情况下，突然有个消费者挂掉了，我们将丢失正在处理的消息。以及后续发送给该消费这的消息，因为它无法接收到。<br><strong>为了保证消息在发送过程中不丢失，rabbitmq 引入消息应答机制，消息应答就是:消费者在接收</strong><br><strong>到消息并且处理该消息之后，告诉 rabbitmq 它已经处理了，rabbitmq 可以把该消息删除了。</strong><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/18rabbitma.png#id=hDKDv&originHeight=343&originWidth=480&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="自动应答"><a href="#自动应答" class="headerlink" title="自动应答"></a>自动应答</h2><p><strong>消息发送后立即被认为已经传送成功</strong>，这种模式需要在高吞吐量和数据传输安全性方面做权<br>衡,因为这种模式如果消息在接收到之前，消费者那边出现连接或者 channel 关闭，那么消息就丢失<br>了,当然另一方面这种模式消费者那边可以传递过载的消息，没有对传递的消息数量进行限制， 当<br>然这样有可能使得消费者这边由于接收太多还来不及处理的消息，导致这些消息的积压，最终使<br>得内存耗尽，最终这些消费者线程被操作系统杀死，所以这种模式仅适用在消费者可以高效并以<br>某种速率能够处理这些消息的情况下使用。</p><h2 id="手动应答（没明白往下面看）"><a href="#手动应答（没明白往下面看）" class="headerlink" title="手动应答（没明白往下面看）"></a>手动应答（没明白往下面看）</h2><p>Channel.basicAck(用于肯定确认)RabbitMQ 已知道该消息并且成功的处理消息，可以将其丢弃了<br>Channel.basicNack(用于否定确认)<br>Channel.basicReject(用于否定确认)与 Channel.basicNack 相比少一个参数Multiple<br>Multiple 的解释<br><strong>手动应答的好处是可以批量应答并且减少网络拥堵</strong><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/19rabbitmq.png#id=XetN6&originHeight=135&originWidth=706&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>multiple 的 true 和 false 代表不同意思<br>true 代表批量应答 channel（信道） 上未应答的消息<br>比如说 true（信道可创建多个）<br> channel（信道) 上有传送 tag 的消息 5,6,7,8 当前 tag 是 8 那么此时<br>5至8 的这些还未应答的消息都会被确认收到消息应答<br>false 同上面相比<br>只会应答 tag&#x3D;8 的消息 5,6,7 这三个消息依然不会被确认收到消息应答<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/20rabbitmq.png#id=tmCVo&originHeight=589&originWidth=696&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>(讲的有些模糊，可以看一下下面的文章，也就是说原本是自动应答，是可以改成手动应答的，下面也有直接写的手动应答的代码)<br>:::</p><p><a href="https://blog.csdn.net/u010502101/article/details/124901370?ops_request_misc=%7B%22request_id%22:%22166245544216782425135936%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=166245544216782425135936&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-4-124901370-null-null.142%5Ev46%5Epc_rank_34_queryrelevant25&utm_term=rabbitmq%E6%B6%88%E6%81%AF%E5%BA%94%E7%AD%94&spm=1018.2226.3001.4187"><strong>RabbitMQ之消息应答机制_苍鹰蛟龙的博客-CSDN博客_rabbitmq应答机制</strong></a></p><p>:::warning</p><h2 id="消息自动重新入队"><a href="#消息自动重新入队" class="headerlink" title="消息自动重新入队"></a>消息自动重新入队</h2><p>如果消费者由于某些原因失去连接(其通道已关闭，连接已关闭或 TCP 连接丢失)，导致消息<br>未发送 ACK（应答） 确认，RabbitMQ 将了解到消息未完全处理，并将对其重新排队。如果此时其他消费者可以处理，它将很快将其重新分发给另一个消费者。这样，即使某个消费者偶尔死亡，也可以确<br>保不会丢失任何消息。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/21rabbitmq.png#id=wtV8J&originHeight=358&originWidth=830&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="消息手动应答代码"><a href="#消息手动应答代码" class="headerlink" title="消息手动应答代码"></a>消息手动应答代码</h2><p>:::</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.autoAnswer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  自动应答</span></span><br><span class="line"><span class="comment"> *  生产者：发送消息，手动应答时消息是不会丢失的，丢失会重新放回队列中消费</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/9/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer01</span> &#123;</span><br><span class="line">    <span class="comment">//队列的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACK_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ACK-AUTO-ANSWER&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送大量消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="comment">//连接</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//队列声明</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个队列(queueDeclare参数解析)</span></span><br><span class="line"><span class="comment">         * 1.队列名称</span></span><br><span class="line"><span class="comment">         * 2.队列是否持久化 默认消息存储在内存中</span></span><br><span class="line"><span class="comment">         * 3.该队列是否只供一个消费者进行消费 是否进行共享 true可以多个消费者消费</span></span><br><span class="line"><span class="comment">         * 4.是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true 自动删除</span></span><br><span class="line"><span class="comment">         * 5.其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(ACK_QUEUE_NAME,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从控制台中接受信息,并发送</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 发送一个消息（basicPublish参数解析）</span></span><br><span class="line"><span class="comment">             * 1.发送到那个交换机</span></span><br><span class="line"><span class="comment">             * 2.路由的 key是哪个 本次队列的名称</span></span><br><span class="line"><span class="comment">             * 3.其他的参数信息</span></span><br><span class="line"><span class="comment">             * 4.发送消息的消息体</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,ACK_QUEUE_NAME,<span class="literal">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;发送消息完成：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 沉睡工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/9/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> second)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             Thread.sleep(<span class="number">1000</span>*second);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException _ignored) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.autoAnswer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.CancelCallback;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"><span class="keyword">import</span> deng.utils.SleepUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者01（工作线程）</span></span><br><span class="line"><span class="comment"> * 手动应答时消息是不会丢失的，丢失会重新放回队列中消费</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/9/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer01</span> &#123;</span><br><span class="line">    <span class="comment">//队列的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACK_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ACK-AUTO-ANSWER&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接受消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动应答,消息接收,回调</span></span><br><span class="line">        DeliverCallback deliverCallback=(consumerTag, delivery)-&gt;&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//沉睡一秒，模拟业务处理</span></span><br><span class="line">            SleepUtils.sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//沉睡十秒，模拟业务处理</span></span><br><span class="line"><span class="comment">//            SleepUtils.sleep(10);</span></span><br><span class="line">            System.out.println(<span class="string">&quot;接收到消息:&quot;</span>+ <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">            <span class="comment">//手动应答</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 1.消息标记 tag</span></span><br><span class="line"><span class="comment">             * 2.是否批量应答未应答消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicAck(delivery.getEnvelope().getDeliveryTag(),<span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//消息接受被取消</span></span><br><span class="line">        CancelCallback cancelCallback=(consumerTag)-&gt;&#123;</span><br><span class="line">            System.out.println(consumerTag+<span class="string">&quot;消费者取消消费接口回调逻辑&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *     采用手动应答  消费者消费消息</span></span><br><span class="line"><span class="comment">         * 1.消费哪个队列</span></span><br><span class="line"><span class="comment">         * 2.消费成功之后是否要自动应答 true 代表自动应答 false 手动应答</span></span><br><span class="line"><span class="comment">         * 3.消费者成功消费的回调(这里注意，老师讲的有瑕疵，看的弹幕)</span></span><br><span class="line"><span class="comment">         * 4.当一个消费者取消订阅时的回调接口;取消消费者订阅队列时</span></span><br><span class="line"><span class="comment">         *除了使用&#123;<span class="doctag">@link</span> Channel#basicCancel&#125;之外的所有方式都会调用该回调方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;C1 消费者启动等待消费（快速版1S）.................. &quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;C2 消费者启动等待消费（慢速版10S）.................. &quot;);</span></span><br><span class="line">        channel.basicConsume(ACK_QUEUE_NAME,<span class="literal">false</span>,deliverCallback,cancelCallback);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的报错运行发送，我这里是发送的有点快就会报这个错误。<br>（没有进行轮询）<br>（原因是因为static去定义信道造成，改了也有问题）<br>最后是因为我没去改应答方式，true要改为false<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/22rabbitmq.png#id=XqMoc&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/23rabbitmq.png#id=EUNRZ&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>:::warning<br>在发送者发送消息 dd，发出消息之后的把 C2 消费者停掉，按理说该 C2 来处理该消息，但是<br>由于它处理时间较长，在还未处理完，也就是说 C2 还没有执行 ack 代码的时候，C2 被停掉了，<br>此时会看到消息被 C1 接收到了，说明消息 dd 被重新入队，然后分配给能处理消息的 C1 处理了<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/24rabbitmq.png#id=Sg70d&originHeight=398&originWidth=831&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>:::</p><h1 id="RabbitMQ持久化"><a href="#RabbitMQ持久化" class="headerlink" title="RabbitMQ持久化"></a>RabbitMQ持久化</h1><blockquote><p>刚刚我们已经看到了如何处理任务不丢失的情况，但是如何保障当 RabbitMQ 服务停掉以后消<br>息生产者发送过来的消息不丢失。默认情况下 RabbitMQ 退出或由于某种原因崩溃时，它忽视队列<br>和消息，除非告知它不要这样做。确保消息不会丢失需要做两件事：我们需要将队列和消息都标<br>记为持久化。</p><h2 id="队列实现持久化"><a href="#队列实现持久化" class="headerlink" title="队列实现持久化"></a>队列实现持久化</h2><p>之前我们创建的队列都是非持久化的，rabbitmq 如果重启的化，该队列就会被删除掉，如果<br>要队列实现持久化 需要在声明队列的时候把 durable 参数设置为持久化<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/25rabbitmq.png#id=osIkC&originHeight=62&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>但是需要注意的就是如果之前声明的队列不是持久化的，需要把原先队列先删除，或者重新创建一个持久化的队列，不然就会出现错误</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/29rabbitmq.png#id=Hros2&originHeight=38&originWidth=1548&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/26rabbitmq.png#id=udjhz&originHeight=897&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>删除修改之后运行，这个时候即使重启 rabbitmq 队列也依然存在</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/27rabbitmq.png#id=ZsJ4i&originHeight=897&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="消息实现持久化"><a href="#消息实现持久化" class="headerlink" title="消息实现持久化"></a>消息实现持久化</h2><p>要想让消息实现持久化需要在消息生产者修改代码，MessageProperties.PERSISTENT_TEXT_PLAIN 添加这个属性。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/28rabbitmq.png#id=v0wx3&originHeight=438&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>将消息标记为持久化并不能完全保证不会丢失消息。尽管它告诉 RabbitMQ 将消息保存到磁盘，但是<br>这里依然存在当消息刚准备存储在磁盘的时候 但是还没有存储完，消息还在缓存的一个间隔点。此时并没有真正写入磁盘。持久性保证并不强，但是对于我们的简单任务队列而言，这已经绰绰有余了。如果需要更强有力的持久化策略，参考后边课件发布确认章节。</p></blockquote><h1 id="不公平分发"><a href="#不公平分发" class="headerlink" title="不公平分发"></a>不公平分发</h1><p>:::danger<br>在最开始的时候我们学习到 RabbitMQ 分发消息采用的轮询分发，但是在某种场景下这种策略并不是<br>很好，比方说有两个消费者在处理任务，其中有个消费者 1 处理任务的速度非常快，而另外一个消费者 2处理速度却很慢，这个时候我们还是采用轮训分发的化就会到这处理速度快的这个消费者很大一部分时间处于空闲状态，而处理慢的那个消费者一直在干活，这种分配方式在这种情况下其实就不太好，但是RabbitMQ 并不知道这种情况它依然很公平的进行分发。<br>为了避免这种情况，我们可以设置参数 channel.basicQos(1);（1是不公平分发，0是轮询分发，其他数值是预取值）<br>（两个消费者都添加一下啊）<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/30rabbitmq.png#id=TJBlq&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/31rabbitmq.png#id=eMBCX&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="预取值"><a href="#预取值" class="headerlink" title="预取值"></a>预取值</h2><p>&#x2F;&#x2F;预取值，规定信道中最多只能存三条消息（沉睡时间给长一点）<br>int prefetchCount &#x3D; 3;<br>channel.basicQos(prefetchCount);<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/32rabbitmq.png#id=BTZ8n&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/33rabbitmq.png#id=QZKVm&originHeight=897&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/34rabbitmq.png#id=ebB7X&originHeight=897&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>本身消息的发送就是异步发送的，所以在任何时候，channel （信道）上肯定不止只有一个消息，另外来自消费者的手动确认本质上也是异步的。因此这里就存在一个未确认的消息缓冲区，因此希望开发人员能<strong>限制此缓冲区的大小，以避免缓冲区里面无限制的未确认消息问题</strong>。这个时候就可以通过使用 basic.qos 方法设置“预取计数”值来完成的。<strong>该值定义通道上允许的未确认消息的最大数量</strong>。一旦数量达到配置的数量，RabbitMQ 将停止在通道上传递更多消息，除非至少有一个未处理的消息被确认，例如，假设在通道上有未确认的消息 5、6、7，8，并且通道的预取计数设置为 4，此时RabbitMQ 将不会在该通道上再传递任何消息，除非至少有一个未应答的消息被 ack（应答）。比方说 tag&#x3D;6 这个消息刚刚被确认 ACK，RabbitMQ 将会感知这个情况到并再发送一条消息。<br>消息应答和 QoS 预取值对用户吞吐量有重大影响。通常，增加预取值将提高向消费者传递消息的速度。<strong>虽然自动应答传输消息速率是最佳的，但是，在这种情况下已传递但尚未处理的消息的数量也会增加，从而增加了消费者的</strong> <strong>RAM 消耗</strong>(随机存取存储器)应该小心使用具有无限预处理的自动确认模式或手动确认模式，消费者消费了大量的消息如果没有确认的话，会导致消费者连接节点的内存消耗变大，所以找到合适的预取值是一个反复试验的过程，不同的负载该值取值也不同 100 到 300 范围内的值通常可提供最佳的吞吐量，并且不会给消费者带来太大的风险。预取值为 1 是最保守的。当然这将使吞吐量变得很低，特别是消费者连接延迟很严重的情况下，特别是在消费者连接等待时间较长的环境中。对于大多数应用来说，稍微高一点的值将是最佳的。<br>:::</p><h1 id="发布确认（持久化确认）"><a href="#发布确认（持久化确认）" class="headerlink" title="** **发布确认（持久化确认）"></a>** **发布确认（持久化确认）</h1><p>:::danger</p><h2 id="发布确认原理"><a href="#发布确认原理" class="headerlink" title="发布确认原理"></a>发布确认原理</h2><p>生产者将信道设置成 confirm 模式，一旦信道进入 confirm 模式，所有在该信道上面发布的消息都将会被指派一个唯一的 ID(从 1 开始)，一旦消息被投递到所有匹配的队列之后，broker（ 接收和分发消息的应用，RabbitMQ Server 就是 Message Broker。工作原理中有提到）就会发送一个确认给生产者(包含消息的唯一 ID)，这就使得生产者知道消息已经正确到达目的队列了，<br>如果<strong>消息和队列是可持久化</strong>的，那么确认消息会在将<strong>消息写入磁盘</strong>之后发出，broker 回传给生产者的确认消息中 delivery-tag 域包含了确认消息的序列号，此外 broker 也可以设置basic.ack 的multiple域，表示到这个序列号之前的所有消息都已经得到了处理。<br>confirm 模式最大的好处在于他是<strong>异步的</strong>，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果 RabbitMQ 因为自身内部错误导致消息丢失，就会发送一条 nack 消息，生产者应用程序同样可以在回调方法中处理该 nack 消息。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/35rabbitmq.png#id=f3FHI&originHeight=474&originWidth=1174&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="发布确认的策略"><a href="#发布确认的策略" class="headerlink" title="发布确认的策略"></a>发布确认的策略</h2><p>发布确认默认是没有开启的，如果要开启需要调用方法 confirmSelect，每当你要想使用发布确认，都需要在 channel 上调用该方法<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/36rabbitmq.png#id=tHIqD&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="单个确认发布"><a href="#单个确认发布" class="headerlink" title="单个确认发布"></a>单个确认发布</h3><p>这是一种简单的确认方式，它是一种同步确认发布的方式，也就是发布一个消息之后只有它<br>被确认发布，后续的消息才能继续发布,waitForConfirmsOrDie(long)这个方法只有在消息被确认<br>的时候才返回，如果在指定时间范围内这个消息没有被确认那么它将抛出异常。<br>这种确认方式有一个最大的缺点就是:发布速度特别的慢，因为如果没有确认发布的消息就会<br>阻塞所有后续消息的发布，这种方式最多提供每秒不超过数百条发布消息的吞吐量。当然对于某<br>些应用程序来说这可能已经足够了。<br>:::</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.puback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  发布确认模式</span></span><br><span class="line"><span class="comment"> *      1.单个确认</span></span><br><span class="line"><span class="comment"> *      2.批量确认</span></span><br><span class="line"><span class="comment"> *      3.异步批量确认</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/9/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfirmMessage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量发送  消息  的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MESSAGE_COUNT</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//      1.单个确认</span></span><br><span class="line">        ConfirmMessage.publishMessageIndividually();</span><br><span class="line">        <span class="comment">//      2.批量确认</span></span><br><span class="line">        <span class="comment">//      3.异步批量确认</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单个确认</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">publishMessageIndividually</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//队列声明（队列名称）现在用uuid自动生产</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">    channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动发布确认</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line">        <span class="comment">//记录开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送消息（批量）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="literal">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//单个消息进行发布确认</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> channel.waitForConfirms();</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;发布&quot;</span> + MESSAGE_COUNT +<span class="string">&quot;个单独确认消息，耗时：&quot;</span>+ (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/37rabbitmq.png#id=iD7R1&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><blockquote><h3 id="批量确认发布"><a href="#批量确认发布" class="headerlink" title="批量确认发布"></a>批量确认发布</h3><p>上面那种方式非常慢，与单个等待确认消息相比，先发布一批消息然后一起确认可以极大地<br>提高吞吐量，当然这种方式的缺点就是:当发生故障导致发布出现问题时，不知道是哪个消息出现<br>问题了，我们必须将整个批处理保存在内存中，以记录重要的信息而后重新发布消息。当然这种<br>方案仍然是同步的，也一样阻塞消息的发布。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.puback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  发布确认模式</span></span><br><span class="line"><span class="comment"> *      1.单个确认</span></span><br><span class="line"><span class="comment"> *      2.批量确认</span></span><br><span class="line"><span class="comment"> *      3.异步批量确认</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/9/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfirmMessage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量发送  消息  的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MESSAGE_COUNT</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//      1.单个确认</span></span><br><span class="line"><span class="comment">//        ConfirmMessage.publishMessageIndividually();</span></span><br><span class="line">        <span class="comment">//      2.批量确认</span></span><br><span class="line">        ConfirmMessage.publishMessageBatch();</span><br><span class="line">        <span class="comment">//      3.异步批量确认</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单个确认</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">publishMessageIndividually</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//队列声明（队列名称）现在用uuid自动生产</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动发布确认</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line">        <span class="comment">//记录开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送消息（批量）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="literal">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//单个消息进行发布确认</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> channel.waitForConfirms();</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;发布&quot;</span> + MESSAGE_COUNT +<span class="string">&quot;个单独确认消息，耗时：&quot;</span>+ (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量发布确认(真·单个确认加强版)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">publishMessageBatch</span><span class="params">()</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//队列声明（队列名称）现在用uuid自动生产</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">    channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动发布确认</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line">        <span class="comment">//记录开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//批量确认消息大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//未确认消息个数</span></span><br><span class="line">        <span class="comment">//批量发送消息  批量发布确认</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="literal">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="comment">//当消息发送100条时发布确认一次</span></span><br><span class="line">            <span class="keyword">if</span> (i%batchSize == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//发布确认</span></span><br><span class="line">                channel.confirmSelect();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;发布&quot;</span> + MESSAGE_COUNT +<span class="string">&quot;个批量确认消息，耗时：&quot;</span>+ (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/38rabbitmq.png#id=AD7fj&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><blockquote><h3 id="异步确认发布"><a href="#异步确认发布" class="headerlink" title="异步确认发布"></a>异步确认发布</h3><p>异步确认虽然编程逻辑比上两个要复杂，但是性价比最高，无论是可靠性还是效率都没得说，<br>他是利用回调函数来达到消息可靠性传递的，这个中间件也是通过函数回调来保证是否投递成功，<br>下面就让我们来详细讲解异步确认是怎么实现的。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/39rabbitmq.png#id=M0bxu&originHeight=414&originWidth=836&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>(我的理解：异步yyds,就是把回调确认信息的功能交给其他程序做，就是异步，单独提取出来不影响broker中的Vhost，这样生产者就可以一直发消息，broker去异步处理确认信息是否没有遗漏是异步的，是另一个程序做的，没有遗漏就回调确认收到，遗漏了就回调没有确认收到，传回key消息序列，这时信道中没有接受到确认发布的消息是不会删除发出的信息的。)</p><h3 id="如何处理异步未确认消息"><a href="#如何处理异步未确认消息" class="headerlink" title="如何处理异步未确认消息"></a>如何处理异步未确认消息</h3><p>最好的解决的解决方案就是把未确认的消息放到一个基于内存的能被发布线程访问的队列，<br>比如说用 ConcurrentLinkedQueue 这个队列在 confirm callbacks 与发布线程之间进行消息的传<br>递。</p><h3 id="以上-3-种发布确认速度对比"><a href="#以上-3-种发布确认速度对比" class="headerlink" title="以上 3 种发布确认速度对比"></a>以上 3 种发布确认速度对比</h3><p>单独发布消息：<br>同步等待确认，简单，但吞吐量非常有限。<br>批量发布消息：<br>批量同步等待确认，简单，合理的吞吐量，一旦出现问题但很难推断出是那条<br>消息出现了问题。<br>异步处理：<br>最佳性能和资源使用，在出现错误的情况下可以很好地控制，但是实现起来稍微难些</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.puback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConfirmCallback;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ConcurrentModificationException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentNavigableMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentSkipListMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  发布确认模式</span></span><br><span class="line"><span class="comment"> *      1.单个确认</span></span><br><span class="line"><span class="comment"> *      2.批量确认</span></span><br><span class="line"><span class="comment"> *      3.异步批量确认</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/9/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfirmMessage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量发送  消息  的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MESSAGE_COUNT</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//      1.单个确认</span></span><br><span class="line"><span class="comment">//        ConfirmMessage.publishMessageIndividually();</span></span><br><span class="line">        <span class="comment">//      2.批量确认</span></span><br><span class="line"><span class="comment">//        ConfirmMessage.publishMessageBatch();</span></span><br><span class="line">        <span class="comment">//      3.异步批量确认</span></span><br><span class="line">        ConfirmMessage.publishMessageAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单个确认</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">publishMessageIndividually</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//队列声明（队列名称）现在用uuid自动生产</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//启动发布确认</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line">        <span class="comment">//记录开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送消息（批量）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="literal">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//单个消息进行发布确认</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> channel.waitForConfirms();</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;发布&quot;</span> + MESSAGE_COUNT +<span class="string">&quot;个单个确认消息，耗时：&quot;</span>+ (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量发布确认(真·单个确认加强版)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">publishMessageBatch</span><span class="params">()</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//队列声明（队列名称）现在用uuid自动生产</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动发布确认</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line">        <span class="comment">//记录开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//批量确认消息大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//未确认消息个数</span></span><br><span class="line">        <span class="comment">//批量发送消息  批量发布确认</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="literal">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="comment">//当消息发送100条时发布确认一次</span></span><br><span class="line">            <span class="keyword">if</span> (i%batchSize == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//发布确认</span></span><br><span class="line">                channel.confirmSelect();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;发布&quot;</span> + MESSAGE_COUNT +<span class="string">&quot;个批量确认消息，耗时：&quot;</span>+ (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//异步发布确认</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">publishMessageAsync</span><span class="params">()</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">            <span class="comment">//队列声明（队列名称）现在用uuid自动生产</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">            channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//启动发布确认</span></span><br><span class="line">            channel.confirmSelect();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 线程安全有序的一个哈希表 用于高并发的情况下</span></span><br><span class="line"><span class="comment">             *  1.轻松的将序号与消息进行关联</span></span><br><span class="line"><span class="comment">             *  2.轻松的删除，只需要序号</span></span><br><span class="line"><span class="comment">             *  3.支持并发访问</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            ConcurrentSkipListMap&lt;Long,String&gt; outstandingConfirms = <span class="keyword">new</span> <span class="title class_">ConcurrentSkipListMap</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">//broker异步  准备消息监听器，监听那些消息成功了，那些消息失败了</span></span><br><span class="line">            <span class="comment">//消息确认成功，回调函数</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * deliveryTag 消息标记</span></span><br><span class="line"><span class="comment">             * multiple  是否批量确认</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">ConfirmCallback</span> <span class="variable">ackCallback</span> <span class="operator">=</span> (deliveryTag, multiple)-&gt;&#123;</span><br><span class="line">                <span class="keyword">if</span> (multiple)&#123;</span><br><span class="line">                    <span class="comment">//②：删除已经确认的消息  剩下的就是未确认的消息</span></span><br><span class="line">                    ConcurrentNavigableMap&lt;Long, String&gt; confirmsMap</span><br><span class="line">                            = outstandingConfirms.headMap(deliveryTag);</span><br><span class="line">                    confirmsMap.clear();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    outstandingConfirms.headMap(deliveryTag);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;确认的消息：&quot;</span> + deliveryTag);</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">//消息确认失败，回调函数</span></span><br><span class="line">            <span class="type">ConfirmCallback</span> <span class="variable">nackCallback</span> <span class="operator">=</span> (deliveryTag, multiple)-&gt;&#123;</span><br><span class="line">                <span class="comment">//③：未确认消息有哪些</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> outstandingConfirms.get(deliveryTag);</span><br><span class="line">                System.out.println(<span class="string">&quot;未确认的消息：&quot;</span> + message + <span class="string">&quot;标记：&quot;</span> + deliveryTag);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">//addConfirmListener 两个参数一个是消息确认成功的操作，一个是消息确认失败的操作</span></span><br><span class="line">            channel.addConfirmListener(ackCallback,nackCallback);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//记录开始时间(因为异步)</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//异步的批量发送消息</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="literal">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">                <span class="comment">//①：此处记录下所有要发的消息，消息的总和</span></span><br><span class="line">                outstandingConfirms.put(channel.getNextPublishSeqNo(),message);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//记录结束时间</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;发布&quot;</span> + MESSAGE_COUNT +<span class="string">&quot;个异步确认消息，耗时：&quot;</span>+ (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/40rabbitmq.png#id=CY5sK&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h1><blockquote><p>在上一节中，我们创建了一个工作队列。我们假设的是工作队列背后，每个任务都恰好交付给一个消<br>费者(工作进程)。在这一部分中，我们将做一些完全不同的事情；我们将消息传达给多个消费者。这种模式称为** ”发布&#x2F;订阅**“。（在此之前，不管是简单模式或者是工作模式，消息都是只能消费一次的，且是轮询或者不公平分发的。）</p><h2 id="Exchanges-概念"><a href="#Exchanges-概念" class="headerlink" title="Exchanges 概念"></a>Exchanges 概念</h2><p>RabbitMQ 消息传递模型是: <strong>生产者生产的消息直接发送出去</strong>。实际上，通常生产者甚至都不知道这些消息传递传递到了哪些队列中。<br>**交换机(exchange)负责处理，生产者将消息发送到交换机(exchange)**，交换机工作的内容非常简单，一方面它接收来自生产者的消息，另一方面将它们推入队列。交换机必须确切知道如何处理收到的消息。是应该把这些消息放到特定队列还是说把他们到许多队列中还是说应该丢弃它们。这就的由交换机的类型来决定。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/41rabbitmq.png#id=XRUSO&originHeight=231&originWidth=743&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="无名exchange"><a href="#无名exchange" class="headerlink" title="无名exchange"></a>无名exchange</h3><p>在本教程的前面部分我们对 exchange 一无所知，但仍然能够将消息发送到队列。之前能实现的<br>原因是因为我们使用的是默认交换，我们通过空字符串(“”)进行标识。<br>第一个参数是交换机的名称。空字符串表示默认或无名称交换机：消息能路由发送到队列中其实<br>是由 routingKey(bindingkey)绑定 key 指定的，如果它存在的话<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/42rabbitmq.png#id=lWJ0a&originHeight=277&originWidth=1105&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="临时队列"><a href="#临时队列" class="headerlink" title="临时队列"></a>临时队列</h3><p>之前的章节我们使用的是具有特定名称的队列(还记得 hello 和 ack_queue 吗？)。队列的名称我们<br>来说至关重要-我们需要指定我们的消费者去消费哪个队列的消息。<br>!<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/43rabbitmq.png#id=dc4DP&originHeight=86&originWidth=823&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>每当我们连接到 Rabbit 时，我们都需要一个全新的空队列，为此我们可以创建一个具有<strong>随机名称</strong><br><strong>的队列</strong>，或者能让服务器为我们选择一个随机队列名称那就更好了。其次<strong>一旦我们断开了消费者的连</strong><br><strong>接，队列将被自动删除。</strong><br>创建临时队列的方式如下:<br>String queueName &#x3D; channel.queueDeclare().getQueue();<br>创建出来之后长成这样:<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/44rabbitmq.png#id=XBZic&originHeight=202&originWidth=818&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="绑定-bindings"><a href="#绑定-bindings" class="headerlink" title="绑定**(bindings)**"></a>绑定**(bindings)**</h3><p>什么是 bingding 呢，binding 其实是 exchange 和 queue 之间的桥梁，它告诉我们 exchange 和那个队列进行了绑定关系。（这种关系可以制定，当我想发消息给Q1不给Q2时，就需要这个关系指定）比如说下面这张图告诉我们的就是 X 与 Q1 和 Q2 进行了绑定<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/45rabbitmq.png#id=AOlEc&originHeight=168&originWidth=679&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="Exchanges-的类型"><a href="#Exchanges-的类型" class="headerlink" title="Exchanges 的类型"></a>Exchanges 的类型</h2><p>**direct**直接<br>**topic **主题<br>**headers **标题<br>**fanout**扇出（广播）</p></blockquote><h1 id="Fanout（发布订阅模式）"><a href="#Fanout（发布订阅模式）" class="headerlink" title="Fanout（发布订阅模式）"></a><strong>Fanout（</strong>发布订阅模式<strong>）</strong></h1><p>:::tips</p><h2 id="Fanout-介绍"><a href="#Fanout-介绍" class="headerlink" title="Fanout 介绍"></a>Fanout 介绍</h2><p>Fanout 这种类型非常简单。正如从名称中猜到的那样，它是将接收到的所有消息<strong>广播</strong>到它知道的<br>所有队列中。系统中默认有些 fanout类型的exchange<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/46rabbitmq.png#id=IdMmj&originHeight=401&originWidth=718&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="Fanout-实战"><a href="#Fanout-实战" class="headerlink" title="Fanout 实战"></a>Fanout 实战</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/47rabbitmq.png#id=Gnuqe&originHeight=228&originWidth=823&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>交换机Logs 和临时队列的绑定关系如下图<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/48rabbitmq.png#id=buLfp&originHeight=258&originWidth=558&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>:::</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  (生产者)</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/9/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmitLog</span> &#123;</span><br><span class="line">    <span class="comment">//交换机名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 声明一个 exchange</span></span><br><span class="line"><span class="comment">        * 1.exchange 的名称</span></span><br><span class="line"><span class="comment">        * 2.exchange的类型</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入信息&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者发出消息&quot;</span> + message);</span><br><span class="line">             &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *      （消费者）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/9/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveLogs01</span> &#123;</span><br><span class="line">    <span class="comment">//交换机名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 生成一个临时的队列 队列的名称是随机的</span></span><br><span class="line"><span class="comment">        * 当消费者断开和该队列的连接时 队列自动删除</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把该临时队列绑定我们的 exchange 其中 routingkey(也称之为 binding key)为空字符串</span></span><br><span class="line">        <span class="comment">// fanout类型下是不会判断key的   会把消息发送给所有人</span></span><br><span class="line">        channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息,把接收到的消息打印在屏幕........... &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消息确认回调消息</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;ReceiveLogs01控制台打印接收到的消息&quot;</span>+message);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接受消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/49rabbitmq.png#id=HKQkn&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>:::tips</p><h2 id="弹幕再吵什么？（看热闹看热闹）"><a href="#弹幕再吵什么？（看热闹看热闹）" class="headerlink" title="弹幕再吵什么？（看热闹看热闹）"></a>弹幕再吵什么？（看热闹看热闹）</h2><p>交换机声明的地方？<br>在三个地方都声明了，我看到比较多的解释是，防止启动时，有生产者或消费者开始发送消息了，而交换机没有声明的情况发生。<br>队列声明的地方从生产者变为消费者？<br>无妨，没有问题。<br>:::</p><h1 id="Direct-exchange交换机类型-路由"><a href="#Direct-exchange交换机类型-路由" class="headerlink" title="Direct (exchange交换机类型:路由)"></a>Direct (exchange交换机类型:路由)</h1><p>:::info<br>在上一节中，我们构建了一个简单的订阅发布系统。我们能够向许多接收者发布消息。在本<br>节我们将向其中添加一些特别的功能-比方说我们只让某个消费者订阅发布的部分消息。（看不懂的就不看，直接看栗子。对比学习。）<br>例如我们只把严重错误消息定向存储到日志文件(以节省磁盘空间)，同时仍然能够在控制台上打印所有消息。<br>我们再次来回顾一下什么是 <strong>bindings，绑定是交换机和队列之间的桥梁关系。</strong>也可以这么理解：<br><strong>队列只对它绑定的交换机的消息感兴趣</strong>。绑定用参数：routingKey 来表示也可称该参数为 binding key，创建绑定我们用代码:channel.queueBind(queueName, EXCHANGE_NAME, “routingKey”);<strong>绑定之后的意义由其交换类型决定。（</strong>其中 routingkey(也称之为 binding key)之前为空字符串<br>&#x2F;&#x2F; 空字符串  fanout类型下是不会判断key的   会把消息发送给所有人<strong>）</strong></p><h2 id="Direct-exchange-介绍"><a href="#Direct-exchange-介绍" class="headerlink" title="Direct exchange 介绍"></a>Direct exchange 介绍</h2><p>上一节中的我们的系统将所有消息广播给所有消费者，对此我们想做一些改变，例如我们希<br>望将消息写入磁盘的程序仅接收严重错误(errros)，而不存储哪些警告(warning)或信息(info)消息避免浪费磁盘空间。Fanout 这种交换类型并不能给我们带来很大的灵活性-它只能进行无意识的<br>广播，在这里我们将使用 direct 这种类型来进行替换，这种类型的工作方式是，消息只去到它绑定的<br>routingKey 队列中去。（上面理解为日志系统）<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/50rabbitmq.png#id=oPTNU&originHeight=337&originWidth=742&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>在上面这张图中，我们可以看到 X 交换机绑定了两个队列，绑定类型是 direct。队列Q1 绑定键为 error，队列 Q2 绑定键有两个:一个绑定键为 info，另一个绑定键为 warning。（没有绑定有没有丢弃不确定，没试过)<br>:::</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月14日 13:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: DirectLogs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:    生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectLogs</span> &#123;</span><br><span class="line">    <span class="comment">//交换机名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 声明一个 exchange</span></span><br><span class="line"><span class="comment">         * 1.exchange 的名称</span></span><br><span class="line"><span class="comment">         * 2.exchange的类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入信息&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="comment">//发送，根据kek链接来确定  key:error/warning/info</span></span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">&quot;warning&quot;</span>, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者发出消息&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *消费者1/2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/9/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveLogsDirect01</span> &#123;</span><br><span class="line">    <span class="comment">//交换机</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.<span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//声明交换机类型</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line">        <span class="comment">//生成队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;console&quot;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Binding连接，key=infoconsole队列名</span></span><br><span class="line">        channel.queueBind(<span class="string">&quot;console&quot;</span>, EXCHANGE_NAME, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">        channel.queueBind(<span class="string">&quot;console&quot;</span>, EXCHANGE_NAME, <span class="string">&quot;warning&quot;</span>);</span><br><span class="line">        <span class="comment">//消费者2的信道key链接</span></span><br><span class="line">        <span class="comment">// channel.queueBind(&quot;disk&quot;, EXCHANGE_NAME, &quot;error&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息........... &quot;</span>);</span><br><span class="line">        <span class="comment">//消息确认回调消息</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            java.lang.<span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.lang.String(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;ReceiveLogsDirect01控制台打印接收到的消息&quot;</span>+message);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//接受消息</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;console&quot;</span>, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/51rabbitmq.png#id=brV7n&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="Topics-主题模式-通配符"><a href="#Topics-主题模式-通配符" class="headerlink" title="Topics(主题模式:通配符)"></a>Topics(主题模式:通配符)</h1><blockquote><p><strong>Topic类型的Exchange与Direct相比，都是可以根据RoutingKey把消息路由到不同的队列。只不过Topic类型Exchange可以让队列在绑定Routing key的时候使用通配符！</strong></p><h2 id="Topic-（通配符）的要求"><a href="#Topic-（通配符）的要求" class="headerlink" title="Topic （通配符）的要求"></a>Topic （通配符）的要求</h2><p>发送到类型是 topic 交换机的消息的 routing_key 不能随意写，必须满足一定的要求，它<strong>必须是一个单</strong><br><strong>词列表，以点号分隔开</strong>。这些单词可以是任意单词，比如说：”stock.usd.nyse”, “nyse.vmw”,<br>“quick.orange.rabbit”.这种类型的。当然这个单词列表最多不能超过 255 个字节。<br>在这个规则列表中，其中有两个替换符是大家需要注意的<br>**_(星号)可以代替一个单词_</p><p><strong>#(井号)可以替代零个或多个单词</strong></p><h3 id="Topic-匹配案例"><a href="#Topic-匹配案例" class="headerlink" title="Topic 匹配案例"></a>Topic 匹配案例</h3><p>下图绑定关系如下<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/52rabbitmq.png#id=J4Pp9&originHeight=194&originWidth=631&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>Q1–&gt;绑定的是<br>中间带 orange 带 3 个单词的字符串(<em>.orange.</em>)<br>Q2–&gt;绑定的是<br>最后一个单词是 rabbit 的 3 个单词(<em>.</em>.rabbit)<br>第一个单词是 lazy 的多个单词(lazy.#)</p><p>上图是一个队列绑定关系图，我们来看看他们之间数据接收情况是怎么样的<br>quick.orange.rabbit被队列 Q1Q2 接收到<br>lazy.orange.elephant被队列 Q1Q2 接收到<br>quick.orange.fox被队列 Q1 接收到<br>lazy.brown.fox被队列 Q2 接收到<br>lazy.pink.rabbit虽然满足两个绑定但只被队列 Q2 接收一次<br>quick.brown.fox不匹配任何绑定不会被任何队列接收到会被丢弃<br>quick.orange.male.rabbit是四个单词不匹配任何绑定会被丢弃<br>lazy.orange.male.rabbit是四个单词但匹配 Q2</p><p>当队列绑定关系是下列这种情况时需要引起注意<br><strong>当一个队列绑定键是#,那么这个队列将接收所有数据，就有点像</strong> <strong>fanout 了</strong><br>**如果队列绑定键当中没有#和_出现，那么该队列绑定类型就是_ <strong>direct 了</strong><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/53rabbitmq.png#id=VHeu1&originHeight=194&originWidth=631&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.topics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月14日 15:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: EmitLogTopic</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:    生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmitLogTopic</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topics_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Q1--&gt;绑定的是</span></span><br><span class="line"><span class="comment">             *中间带 orange带 3个单词的字符串(*.orange.*)</span></span><br><span class="line"><span class="comment">             * Q2--&gt;绑定的是</span></span><br><span class="line"><span class="comment">             *最后一个单词是 rabbit的 3 个单词(*.*.rabbit)</span></span><br><span class="line"><span class="comment">             *第一个单词是 lazy 的多个单词(lazy.#)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        Map&lt;String, String&gt; bindingKeyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        bindingKeyMap.put(<span class="string">&quot;quick.orange.rabbit&quot;</span>,<span class="string">&quot;被队列 Q1Q2接收到&quot;</span>);</span><br><span class="line">        bindingKeyMap.put(<span class="string">&quot;lazy.orange.elephant&quot;</span>,<span class="string">&quot;被队列 Q1Q2接收到&quot;</span>);</span><br><span class="line">        bindingKeyMap.put(<span class="string">&quot;quick.orange.fox&quot;</span>,<span class="string">&quot;被队列 Q1接收到&quot;</span>);</span><br><span class="line">        bindingKeyMap.put(<span class="string">&quot;lazy.brown.fox&quot;</span>,<span class="string">&quot;被队列 Q2接收到&quot;</span>);</span><br><span class="line">        bindingKeyMap.put(<span class="string">&quot;lazy.pink.rabbit&quot;</span>,<span class="string">&quot;虽然满足两个绑定但只被队列 Q2 接收一次&quot;</span>);</span><br><span class="line">        bindingKeyMap.put(<span class="string">&quot;quick.brown.fox&quot;</span>,<span class="string">&quot;不匹配任何绑定不会被任何队列接收到会被丢弃&quot;</span>);</span><br><span class="line">        bindingKeyMap.put(<span class="string">&quot;quick.orange.male.rabbit&quot;</span>,<span class="string">&quot;是四个单词不匹配任何绑定会被丢弃&quot;</span>);</span><br><span class="line">        bindingKeyMap.put(<span class="string">&quot;lazy.orange.male.rabbit&quot;</span>,<span class="string">&quot;是四个单词但匹配 Q2&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; bindingKeyEntry : bindingKeyMap.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">routingkey</span> <span class="operator">=</span> bindingKeyEntry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> bindingKeyEntry.getValue();</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME,routingkey,<span class="literal">null</span>,message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者发出消息:&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.topics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月14日 14:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ReceiveLogsTopic01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:    消费1/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveLogsTopic01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换机</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.<span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topics_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//声明交换机类型</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);</span><br><span class="line">        <span class="comment">//生成队列  队列名 Q1</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;Q1&quot;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// channel.queueDeclare(&quot;Q2&quot;, false, false, false, null);</span></span><br><span class="line">        <span class="comment">//Binding连接，key通配符</span></span><br><span class="line">        channel.queueBind(<span class="string">&quot;Q1&quot;</span>, EXCHANGE_NAME, <span class="string">&quot;*.orange.*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// channel.queueBind(&quot;Q2&quot;, EXCHANGE_NAME, &quot;*.*.rabbit&quot;);</span></span><br><span class="line">        <span class="comment">// channel.queueBind(&quot;Q2&quot;, EXCHANGE_NAME, &quot;lazy.#&quot;);</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息........... &quot;</span>);</span><br><span class="line">        <span class="comment">//消息确认回调消息</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            java.lang.<span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.lang.String(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;接受队列：Q1，绑定键：&quot;</span> + delivery.getEnvelope().getRoutingKey()+<span class="string">&quot;；消息为：&quot;</span>+message);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//接受消息</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;Q1&quot;</span>, <span class="literal">true</span>, deliverCallback, consumerTag -&gt; &#123;&#125;);</span><br><span class="line">        <span class="comment">// channel.basicConsume(&quot;Q2&quot;, true, deliverCallback, consumerTag -&gt; &#123;&#125;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/54rabbitmq.png#id=rEUzc&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h1><blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>先从概念解释上搞清楚这个定义，死信，顾名思义就是无法被消费的消息，字面意思可以这样理<br>解，一般来说，producer 将消息投递到 broker 或者直接到queue 里了，consumer 从 queue 取出消息进行消费，但某些时候由于特定的<strong>原因导致</strong> <strong>queue 中的某些消息无法被消费</strong>，这样的消息如果没有<br>后续的处理，就变成了死信，有死信自然就有了死信队列。<br>应用场景:为了保证订单业务的消息数据不丢失，需要使用到 RabbitMQ 的死信队列机制，当消息<br>消费发生异常时，将消息投入死信队列中.还有比如说: 用户在商城下单成功并点击去支付后在指定时<br>间未支付时自动失效</p><h3 id="死信的来源"><a href="#死信的来源" class="headerlink" title="死信的来源"></a>死信的来源</h3><p>消息 TTL （ time to live 的缩写，也就是生存时间）过期<br>队列达到最大长度(队列满了，无法再添加数据到 mq 中)<br>消息被拒绝(basic.reject 或 basic.nack)并且 requeue&#x3D;false.<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/55rabbitmq.png#id=WxCsy&originHeight=392&originWidth=832&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>简述一下上面的过程，也是下面代码实现的过程。<br>生产者发送消息，消费者声明交换机（谁声明都行），normal_exchange交换机，信道zhangsan,队列normal_queue；这时可关闭c1消费者，消息无法接收，形成死信；normal_queue回去链接死信交换机dead_exchange和死信队列dead_queue,死信交换机和死信队列的routingKey&#x3D;lisi,死信消息就会到C2消费。（可去<a href="http://127.0.0.1:15672/">http://127.0.0.1:15672/</a>可视化页面查看)</p><h3 id="TTL补充"><a href="#TTL补充" class="headerlink" title="TTL补充"></a>TTL补充</h3><p>消息设置TTL<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/56rabbitmq.png#id=focaa&originHeight=88&originWidth=852&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>队列设置TTL<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/57rabbitmq.png#id=HX7yE&originHeight=86&originWidth=806&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.eight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月15日 9:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Producer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:    死信队列生产者代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line">    <span class="comment">//普通交换机</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NORMAL_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;normal_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//死信消息  设置消息的TTL时间 10s=10000ms</span></span><br><span class="line">        AMQP.<span class="type">BasicProperties</span> <span class="variable">basicProperties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties().builder().expiration(<span class="string">&quot;10000&quot;</span>).build();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;info&quot;</span> + i;</span><br><span class="line">            channel.basicPublish(NORMAL_EXCHANGE,<span class="string">&quot;zhangsan&quot;</span>,basicProperties,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.eight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: DengGanWen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月14日 16:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Consumer01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:    死信 消费者01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通交换机</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NORMAL_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;normal_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//死信交换机</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;dead_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//普通队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NORMAL_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;normal_queue&quot;</span>;</span><br><span class="line">    <span class="comment">//死信队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;dead_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//声明交换机  普通和死信</span></span><br><span class="line">        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line">        channel.exchangeDeclare(DEAD_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明队列  普通和死信   普通队列链接死信队列</span></span><br><span class="line">        Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//队列的TTL过期时间 10s</span></span><br><span class="line"><span class="comment">//        arguments.put(&quot;x-message-ttl&quot;,100000);</span></span><br><span class="line">        <span class="comment">//正常队列设置死信交换机</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,DEAD_EXCHANGE);</span><br><span class="line">        <span class="comment">//设置死信链接key Routingkey=lisi</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个队列(queueDeclare参数解析)</span></span><br><span class="line"><span class="comment">         * 1.队列名称</span></span><br><span class="line"><span class="comment">         * 2.队列里面的消息是否持久化 默认消息存储在内存中</span></span><br><span class="line"><span class="comment">         * 3.该队列是否只供一个消费者进行消费 是否进行共享 true可以多个消费者消费</span></span><br><span class="line"><span class="comment">         * 4.是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true 自动删除</span></span><br><span class="line"><span class="comment">         *          5.其他参数（死信交换机链接和设置）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(NORMAL_QUEUE,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,arguments);</span><br><span class="line">        channel.queueDeclare(DEAD_QUEUE,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定普通交换机和普通队列</span></span><br><span class="line">        channel.queueBind(NORMAL_QUEUE,NORMAL_EXCHANGE,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="comment">//绑定死信交换机和死信队列</span></span><br><span class="line">        channel.queueBind(DEAD_QUEUE,DEAD_EXCHANGE,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接受消息。。。。。&quot;</span>);</span><br><span class="line"></span><br><span class="line">        DeliverCallback deliverCallback=(consumerTag,delivery)-&gt;&#123;</span><br><span class="line">            String message= <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody());</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer01接受的消息是：&quot;</span> + message);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(NORMAL_QUEUE,<span class="literal">true</span>, deliverCallback,consumerTag-&gt;&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.eight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"><span class="keyword">import</span> deng.utils.RabbitMqUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: DengGanWen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月14日 16:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Consumer02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:    死信 消费者02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer02</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//死信交换机</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;dead_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//死信队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;dead_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//声明交换机  普通和死信</span></span><br><span class="line">        channel.exchangeDeclare(DEAD_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个队列(queueDeclare参数解析)</span></span><br><span class="line"><span class="comment">         * 1.队列名称</span></span><br><span class="line"><span class="comment">         * 2.队列里面的消息是否持久化 默认消息存储在内存中</span></span><br><span class="line"><span class="comment">         * 3.该队列是否只供一个消费者进行消费 是否进行共享 true可以多个消费者消费</span></span><br><span class="line"><span class="comment">         * 4.是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true 自动删除</span></span><br><span class="line"><span class="comment">         *          5.其他参数（死信交换机链接和设置）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(DEAD_QUEUE,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定死信交换机和死信队列</span></span><br><span class="line">        channel.queueBind(DEAD_QUEUE,DEAD_EXCHANGE,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接受消息。。。。。&quot;</span>);</span><br><span class="line"></span><br><span class="line">        DeliverCallback deliverCallback=(consumerTag,delivery)-&gt;&#123;</span><br><span class="line">            String message= <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody());</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer02接受的消息是：&quot;</span> + message);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(DEAD_QUEUE,<span class="literal">true</span>, deliverCallback,consumerTag-&gt;&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/58rabbitmq.png#id=Sh6WQ&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>关掉C1,形成死信<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/59rabbitmq.png#id=ti71z&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><blockquote><p>文中提到了两处过去时间的设定<br>一处是在消费者中<br>&#x2F;&#x2F;队列TTL过期时间 10s<br>arguments.put(“x-message-ttl”,100000);<br>一处在生产者中（最好由生产者指定）<br>&#x2F;&#x2F;死信消息  设置TTL时间 10s&#x3D;10000ms<br>AMQP.BasicProperties basicProperties &#x3D; new AMQP.BasicProperties().builder().expiration(“10000”).build();</p><p>使用第一种的需要注释掉这句，关掉他去消费，不然他会缓存在队列里，有TTL的话消息就慢慢的会过期。<br>&#x2F;&#x2F;        channel.basicConsume(NORMAL_QUEUE,true, deliverCallback,consumerTag-&gt;{});</p><h3 id="队列达到最大长度的死信"><a href="#队列达到最大长度的死信" class="headerlink" title="队列达到最大长度的死信"></a>队列达到最大长度的死信</h3><p>上面是TTL过期的死信，下面是队列达到最大长度的死信<br>（秒弹幕看到的：RabbitMQ-3.10版本，在设置完队列最大值后，还要设置溢出策略[x-overflow为reject-publish-dlx]）<br>记得在启动前把之前的队列和交换机删除，可以在声明队列时把autoDelete设置为true，这样就不用每次手动删除队列了，每次断开链接会自动删除，也就是第四个参数<br>channel.queueDeclare(<em>NORMAL_QUEUE</em>,false,false,true,arguments);<br>添加下面的代码（过期时间开启一个就行）<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/60rabbitmq.png#id=ZVyaM&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>刚开始，11条消息，5条会直接到dead_exchange和dead_queue中去，有6条消息会在normal中，之后TTL过期就会全部到dead中去（时间大概1~2分钟）。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/61rabbitmq.png#id=hF8ju&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/62rabbitmq.png#id=w1TA3&originHeight=897&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/63rabbitmq.png#id=xwX80&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="消息拒绝的死信"><a href="#消息拒绝的死信" class="headerlink" title="消息拒绝的死信"></a>消息拒绝的死信</h3><p>注意关掉TTL和最大长度限制<br>channel.basicPublish(<em>NORMAL_EXCHANGE</em>,”zhangsan”,null,message.getBytes(StandardCharsets.<em>UTF_8</em>));第三个值为null，之前是设置TTL的。</p></blockquote><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/64rabbitmq.png#id=Q8ttD&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/65rabbitmq.png#id=crZLX&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote><h1 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h1><blockquote><p>延迟队列,队列内部是有序的，最重要的特性就体现在它的延时属性上，延时队列中的元素是希望<br>在指定时间到了以后或之前取出和处理，简单来说，延时队列就是用来存放需要在指定时间被处理的<br>元素的队列。（死信队列另一种称呼，就是一个消息定时没有被处理就会被丢到死信或其他交换机里处理。）</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1.订单在十分钟之内未支付则自动取消<br>2.新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒。<br>3.用户注册成功后，如果三天内没有登陆则进行短信提醒。<br>4.用户发起退款，如果三天内没有得到处理则通知相关运营人员。<br>5.预定会议后，需要在预定的时间点前十分钟通知各个与会人员参加会议<br>这些场景都有一个特点，需要在某个事件发生之后或者之前的指定时间点完成某一项任务，如：<br>发生订单生成事件，在十分钟之后检查该订单支付状态，然后将未支付的订单进行关闭；看起来似乎<br>使用定时任务，一直轮询数据，每秒查一次，取出需要被处理的数据，然后处理不就完事了吗？如果<br>数据量比较少，确实可以这样做，比如：对于“如果账单一周内未支付则进行自动结算”这样的需求，<br>如果对于时间不是严格限制，而是宽松意义上的一周，那么每天晚上跑个定时任务检查一下所有未支<br>付的账单，确实也是一个可行的方案。但对于数据量比较大，并且时效性较强的场景，如：“订单十<br>分钟内未支付则关闭“，短期内未支付的订单数据可能会有很多，活动期间甚至会达到百万甚至千万<br>级别，对这么庞大的数据量仍旧使用轮询的方式显然是不可取的，很可能在一秒内无法完成所有订单<br>的检查，同时会给数据库带来很大压力，无法满足业务要求而且性能低下。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/66rabbitmq.png#id=j0SC0&originHeight=830&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>下面就是整合springboot来使用了，冲冲冲。</p></blockquote><h1 id="Springboot整合"><a href="#Springboot整合" class="headerlink" title="Springboot整合"></a>Springboot整合</h1><blockquote><h2 id="代码架构图"><a href="#代码架构图" class="headerlink" title="代码架构图"></a>代码架构图</h2><p>创建两个队列 QA 和 QB，两者队列 TTL 分别设置为 10S 和 40S，然后在创建一个交换机 X 和死信交<br>换机 Y，它们的类型都是direct，创建一个死信队列 QD，它们的绑定关系如下：<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/67rabbitmq.png#id=zGIiQ&originHeight=217&originWidth=828&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>(注意这里的流程是设置TTL过期，进入死信交换机里被消费。)<br>新建springboot项目，引入依赖（springboot版本不宜太高，2.5.0；注意导入包）<br><strong>项目整体预览</strong><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/68rabbitmq.png#id=AaOKo&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--RabbitMQ 依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- springboot-test--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--alibaba-json--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">1.2</span><span class="number">.47</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--swaggerAPI接口感觉我啥用，没事可以进去看看--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--RabbitMQ 测试依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-rabbit-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.rabbitmq.host=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">spring.rabbitmq.port=<span class="number">5672</span></span><br><span class="line">spring.rabbitmq.username=admin</span><br><span class="line">spring.rabbitmq.password=<span class="number">123</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.deng.gan.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月16日 14:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TTLQueueConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:    TTL队列   配置文件代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TTLQueueConfig</span> &#123;</span><br><span class="line">    <span class="comment">//交换机和队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">X_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;X&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_A</span> <span class="operator">=</span> <span class="string">&quot;QA&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_B</span> <span class="operator">=</span> <span class="string">&quot;QB&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">Y_DEAD_LETTER_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;Y&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_LETTER_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;QD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明 xExchange普通交换机    类型是direct</span></span><br><span class="line">    <span class="meta">@Bean(&quot;xExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">xExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(X_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 声明 xExchange死信交换机    类型是direct</span></span><br><span class="line">    <span class="meta">@Bean(&quot;yExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">yExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(Y_DEAD_LETTER_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明队列 A        ttl为 10s并绑定到对应的死信交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;queueA&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueA</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//声明当前队列绑定的死信交换机</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, Y_DEAD_LETTER_EXCHANGE);</span><br><span class="line">        <span class="comment">//声明当前队列的死信路由 key</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;YD&quot;</span>);</span><br><span class="line">        <span class="comment">//声明队列的 TTL</span></span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_A).withArguments(args).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明队列 B        ttl 为 40s 并绑定到对应的死信交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;queueB&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueB</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//声明当前队列绑定的死信交换机</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, Y_DEAD_LETTER_EXCHANGE);</span><br><span class="line">        <span class="comment">//声明当前队列的死信路由 key</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;YD&quot;</span>);</span><br><span class="line">        <span class="comment">//声明队列的 TTL</span></span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">40000</span>);</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_B).withArguments(args).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">// 声明队列 A绑定 X交换机</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">queueaBindingX</span><span class="params">(<span class="meta">@Qualifier(&quot;queueA&quot;)</span> Queue queueA,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueA).to(xExchange).with(<span class="string">&quot;XA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//声明队列 B绑定 X交换机</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">queuebBindingX</span><span class="params">(<span class="meta">@Qualifier(&quot;queueB&quot;)</span> Queue queueB,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueB).to(xExchange).with(<span class="string">&quot;XB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明死信队列 QD</span></span><br><span class="line">    <span class="meta">@Bean(&quot;queueD&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueD</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(DEAD_LETTER_QUEUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//声明死信队列 QD绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">deadLetterBindingQAD</span><span class="params">(<span class="meta">@Qualifier(&quot;queueD&quot;)</span> Queue queueD,</span></span><br><span class="line"><span class="params">                                        <span class="meta">@Qualifier(&quot;yExchange&quot;)</span> DirectExchange yExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueD).to(yExchange).with(<span class="string">&quot;YD&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.deng.gan.controler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月16日 14:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: SendMsgControler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:    发送消息的控制层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;ttl&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMsgControler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;sendMsg/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;当前时间：&#123;&#125;,发送一条信息给两个 TTL 队列:&#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), message);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;X&quot;</span>, <span class="string">&quot;XA&quot;</span>, <span class="string">&quot;消息来自 ttl 为 10S 的队列: &quot;</span>+message);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;X&quot;</span>, <span class="string">&quot;XB&quot;</span>, <span class="string">&quot;消息来自 ttl为 40S的队列: &quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.deng.gan.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月16日 14:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: DeadLetterQueueConsumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:监听消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLetterQueueConsumer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;QD&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveD</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody());</span><br><span class="line">        log.info(<span class="string">&quot;当前时间：&#123;&#125;,收到死信队列信息&#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>().toString(), msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，通过访问<a href="http://localhost:8080/ttl/sendMsg/%7Bmessage%7D">http://localhost:8080/ttl/sendMsg/{message}</a> 可得到<br>因为没有AB队列对应的消费者，TTL已过期就会链接到死信交换机被消费；这里是通过日志监听体现出来的。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/69rabbitmq.png#id=ZA2yb&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>而我在想，我能不能给AB队列加一个消费者看看，能不能行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.deng.gan.controler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.deng.gan.RabbitMqUtils;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月16日 15:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Consumer01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换机</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">X_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;X&quot;</span>;</span><br><span class="line">    <span class="comment">//队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_A</span> <span class="operator">=</span> <span class="string">&quot;QA&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_B</span> <span class="operator">=</span> <span class="string">&quot;QB&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="comment">//链接rabbitMQ，我偷懒复制过来的方法</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//声明交换机  普通</span></span><br><span class="line"><span class="comment">//        channel.exchangeDeclare(X_EXCHANGE, BuiltinExchangeType.DIRECT);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个队列(queueDeclare参数解析)</span></span><br><span class="line"><span class="comment">         * 1.队列名称</span></span><br><span class="line"><span class="comment">         * 2.队列里面的消息是否持久化 默认消息存储在内存中</span></span><br><span class="line"><span class="comment">         * 3.该队列是否只供一个消费者进行消费 是否进行共享 true可以多个消费者消费</span></span><br><span class="line"><span class="comment">         * 4.是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true 自动删除</span></span><br><span class="line"><span class="comment">         *          5.其他参数（死信交换机链接和设置）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        channel.queueDeclare(QUEUE_A,false,false,true,null);</span></span><br><span class="line"><span class="comment">//        channel.queueDeclare(QUEUE_B,false,false,true,null);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定交换机和队列</span></span><br><span class="line">        channel.queueBind(QUEUE_A,X_EXCHANGE,<span class="string">&quot;XA&quot;</span>);</span><br><span class="line">        channel.queueBind(QUEUE_B,X_EXCHANGE,<span class="string">&quot;XB&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接受消息。。。。。&quot;</span>);</span><br><span class="line"></span><br><span class="line">        DeliverCallback deliverCallbackA=(consumerTag, delivery)-&gt;&#123;</span><br><span class="line">            String message= <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody());</span><br><span class="line">            System.out.println(<span class="string">&quot;ConsumerA接受的消息是：&quot;</span> + message);</span><br><span class="line">        &#125;;</span><br><span class="line">        DeliverCallback deliverCallbackB=(consumerTag, delivery)-&gt;&#123;</span><br><span class="line">            String message= <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody());</span><br><span class="line">            System.out.println(<span class="string">&quot;ConsumerB接受的消息是：&quot;</span> + message);</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_A,<span class="literal">true</span>, deliverCallbackA,consumerTag-&gt;&#123;&#125;);</span><br><span class="line">        channel.basicConsume(QUEUE_B,<span class="literal">true</span>, deliverCallbackB,consumerTag-&gt;&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这比较笨，不会，就弄成这样；<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/70rabbitmq.png#id=ctOpx&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>（弹幕大佬：注意：由于队列的先进先出特性，只有当过期的消息到了队列的顶端（队首），才会被真正的丢弃或者进入死信队列。所以在考虑使用RabbitMQ来实现延迟任务队列的时候，需要确保业务上每个任务的延迟时间是一致的。如果遇到不同的任务类型需要不同的延时的话，需要为每一种不同延迟时间的消息建立单独的消息队列。)</p><h1 id="延时队列优化"><a href="#延时队列优化" class="headerlink" title="延时队列优化"></a>延时队列优化</h1><p>:::danger</p><h2 id="代码架构图-1"><a href="#代码架构图-1" class="headerlink" title="代码架构图"></a>代码架构图</h2><p>在这里新增了一个队列 QC,绑定关系如下,该队列不设置TTL 时间<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/71rabbitmq.png#id=bOhnQ&originHeight=207&originWidth=805&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>然后发送俩个延时消息，不设置TTL，而是在生产者中延时模拟程序处理相应时间。<br>在TTLQueueConfig中加入QC配置<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/72rabbitmq.png#id=mtsmk&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>:::</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_C</span> <span class="operator">=</span> <span class="string">&quot;QC&quot;</span>;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//声明队列 C 死信交换机</span></span><br><span class="line"><span class="meta">@Bean(&quot;queueC&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">queueC</span><span class="params">()</span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//声明当前队列绑定的死信交换机</span></span><br><span class="line">    args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, Y_DEAD_LETTER_EXCHANGE);</span><br><span class="line">    <span class="comment">//声明当前队列的死信路由 key</span></span><br><span class="line">    args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;YD&quot;</span>);</span><br><span class="line">    <span class="comment">//没有声明 TTL属性而是把延迟放到生产者</span></span><br><span class="line">    <span class="keyword">return</span> QueueBuilder.durable(QUEUE_C).withArguments(args).build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明队列 B绑定 X交换机</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">queuecBindingX</span><span class="params">(<span class="meta">@Qualifier(&quot;queueC&quot;)</span> Queue queueC,</span></span><br><span class="line"><span class="params">                              <span class="meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(queueC).to(xExchange).with(<span class="string">&quot;XC&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:::danger<br>在SendMsgControler中加入新的发送消息<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/73rabbitmq.png#id=WzPNM&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>:::</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;sendExpirationMsg/&#123;message&#125;/&#123;ttlTime&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message, <span class="meta">@PathVariable</span> String ttlTime)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;当前时间：&#123;&#125;,发送一条时长&#123;&#125;毫秒 TTL信息给队列 C:&#123;&#125;&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>().toString(),ttlTime, message);</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;X&quot;</span>, <span class="string">&quot;XC&quot;</span>, message, correlationData -&gt; &#123;</span><br><span class="line">        <span class="comment">//发送消息时延迟类似模拟程序运行处理相应的时间</span></span><br><span class="line">        correlationData.getMessageProperties().setExpiration(ttlTime);</span><br><span class="line">        <span class="keyword">return</span> correlationData;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:::danger<br>发起请求<br><a href="http://localhost:8080/ttl/sendExpirationMsg/%E4%BD%A0%E5%A5%BD">http://localhost:8080/ttl/sendExpirationMsg/你好</a> 1&#x2F;20000<br><a href="http://localhost:8080/ttl/sendExpirationMsg/%E4%BD%A0%E5%A5%BD">http://localhost:8080/ttl/sendExpirationMsg/你好</a> 2&#x2F;2000<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/74rabbitmq.png#id=v7u8n&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>注意时间，“你好1”是延迟20s的，“你好2”是延迟2秒的，也就是说，在“你好2”完成延迟后，还需要等待“你好1”。<br>看起来似乎没什么问题，但是在最开始的时候，就介绍过如果使用在消息属性上设置 TTL 的方式，消<br>息可能并不会按时“死亡“，因为 <strong>RabbitMQ 只会检查第一个消息是否过期</strong>，如果过期则丢到死信队列，<strong>如果第一个消息的延时时长很长，而第二个消息的延时时长很短，第二个消息并不会优先得到执行</strong>。<br><strong>队列的特性：先进先出。（这是本身的问题，且不管是在生产者中延时，还是TTL过期延时都要遵循这个特性，也就是上面有提到的TTL时间设置要尽量保持一直的原因。)</strong><br>:::</p><h1 id="Rabbitmq-插件实现延迟队列"><a href="#Rabbitmq-插件实现延迟队列" class="headerlink" title="**Rabbitmq **插件实现延迟队列"></a>**Rabbitmq **插件实现延迟队列</h1><p>windows下rabbitmq安装延时插件（处理各种问题）_@黑夜中的一盏明灯的博客-CSDN博客<br><a href="https://blog.csdn.net/qq_51269815/article/details/126649517?ops_request_misc=&request_id=&biz_id=102&utm_term=rabbitmq%E5%AE%89%E8%A3%85%E5%BB%B6%E6%97%B6%E6%8F%92%E4%BB%B6&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-126649517.nonecase&spm=1018.2226.3001.4187"><strong><strong>windows下rabbitmq安装延时插件（处理各种问题）</strong></strong></a>** **</p><p>_Linux下安装RabbitMq以及延时插件_lc.技术界的小学生的博客-CSDN博客</p><p><a href="https://blog.csdn.net/liang1gsdsdfd/article/details/109242939?ops_request_misc=%7B%22request_id%22:%22166355623816800192284358%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=166355623816800192284358&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~pc_rank_34-3-109242939-null-null.142%5Ev47%5Epc_rank_34_default_23,201%5Ev3%5Econtrol_1&utm_term=rabbitmq%E5%AE%89%E8%A3%85%E5%BB%B6%E6%97%B6%E6%8F%92%E4%BB%B6&spm=1018.2226.3001.4187"><strong>Linux下安装RabbitMq以及延时插件</strong></a></p><p>:::warning<br>这里的延迟是指的TTL过期时间，我和之前所讲的类似程序运行时间要区分开，我自己也弄得比较混，注意。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/75rabbitmq.png#id=loX4P&originHeight=897&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="代码架构图-2"><a href="#代码架构图-2" class="headerlink" title="代码架构图"></a>代码架构图</h2><p>在这里新增了一个队列delayed.queue,一个自定义交换机 delayed.exchange，绑定关系如下:<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/76rabbitmq.png#id=QO9oe&originHeight=104&originWidth=797&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>:::</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.deng.gan.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.CustomExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月19日 14:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: DelayedQueueConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:    延迟插件config配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayedQueueConfig</span> &#123;</span><br><span class="line">    <span class="comment">//队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELAYED_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;delayed.queue&quot;</span>;</span><br><span class="line">    <span class="comment">//交换机</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELAYED_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;delayed.exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//routingKey 绑定</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELAYED_ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;delayed.routingkey&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义交换机 我们在这里定义的是一个延迟交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CustomExchange <span class="title function_">delayedExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//自定义交换机的类型 (这里的类型应该是指发送消息时的类型，和使用插件的类型不一样)</span></span><br><span class="line">        args.put(<span class="string">&quot;x-delayed-type&quot;</span>, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 自定义交换机参数</span></span><br><span class="line"><span class="comment">         * 1.交换机名称</span></span><br><span class="line"><span class="comment">         * 2.交换机插件类型名称</span></span><br><span class="line"><span class="comment">         * 3.是否需要持久化</span></span><br><span class="line"><span class="comment">         * 4.是否自动删除</span></span><br><span class="line"><span class="comment">         * 5.其他参数</span></span><br><span class="line"><span class="comment">         * （可以自己点进去看看，这里的类型和上面的不冲突）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomExchange</span>(DELAYED_EXCHANGE_NAME, <span class="string">&quot;x-delayed-message&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//声明队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">delayedQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(DELAYED_QUEUE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//声明routingKey 绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingDelayedQueue</span><span class="params">(<span class="meta">@Qualifier(&quot;delayedQueue&quot;)</span> Queue queue,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Qualifier(&quot;delayedExchange&quot;)</span></span></span><br><span class="line"><span class="params">                                               CustomExchange</span></span><br><span class="line"><span class="params">                                               delayedExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(delayedExchange).with(DELAYED_ROUTING_KEY).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.deng.gan.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月16日 14:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: DeadLetterQueueConsumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:    监听消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLetterQueueConsumer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;QD&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveD</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody());</span><br><span class="line">        log.info(<span class="string">&quot;当前时间：&#123;&#125;,收到死信队列信息&#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>().toString(), msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELAYED_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;delayed.queue&quot;</span>;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = DELAYED_QUEUE_NAME)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveDelayedQueue</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody());</span><br><span class="line">        log.info(<span class="string">&quot;当前时间：&#123;&#125;,收到延时队列的消息：&#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>().toString(), msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.deng.gan.controler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.deng.gan.config.DelayedQueueConfig.DELAYED_EXCHANGE_NAME;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.deng.gan.config.DelayedQueueConfig.DELAYED_ROUTING_KEY;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月16日 14:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: SendMsgControler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:    发送消息的控制层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;ttl&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMsgControler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通的信息发送</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;sendMsg/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;当前时间：&#123;&#125;,发送一条信息给两个 TTL 队列:&#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), message);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;X&quot;</span>, <span class="string">&quot;XA&quot;</span>, <span class="string">&quot;消息来自 ttl 为 10S 的队列: &quot;</span>+message);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;X&quot;</span>, <span class="string">&quot;XB&quot;</span>, <span class="string">&quot;消息来自 ttl为 40S的队列: &quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有TTL的消息发送</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;sendExpirationMsg/&#123;message&#125;/&#123;ttlTime&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message, <span class="meta">@PathVariable</span> String ttlTime)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前时间：&#123;&#125;,发送一条时长&#123;&#125;毫秒 TTL信息给队列 C:&#123;&#125;&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>().toString(),ttlTime, message);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;X&quot;</span>, <span class="string">&quot;XC&quot;</span>, message, correlationData -&gt; &#123;</span><br><span class="line">            <span class="comment">//发送消息时延迟</span></span><br><span class="line">            correlationData.getMessageProperties().setExpiration(ttlTime);</span><br><span class="line">            <span class="keyword">return</span> correlationData;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用插件的消息发送</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delayTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;sendDelayMsg/&#123;message&#125;/&#123;delayTime&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message,<span class="meta">@PathVariable</span> Integer delayTime)</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(DELAYED_EXCHANGE_NAME, DELAYED_ROUTING_KEY, message,</span><br><span class="line">                correlationData -&gt;&#123;</span><br><span class="line">                    correlationData.getMessageProperties().setDelay(delayTime);</span><br><span class="line">                    <span class="keyword">return</span> correlationData;</span><br><span class="line">                &#125;);</span><br><span class="line">        log.info(<span class="string">&quot; 当 前 时 间 ： &#123;&#125;, 发 送 一 条 延 迟 &#123;&#125; 毫 秒 的 信 息 给 队 列 delayed.queue:&#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(),delayTime, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:::warning<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/77rabbitmq.png#id=uLgaY&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>延时队列在需要延时处理的场景下非常有用，使用 RabbitMQ 来实现延时队列可以很好的利用<br>RabbitMQ 的特性，如：消息可靠发送、消息可靠投递、死信队列来保障消息至少被消费一次以及未被正确处理的消息不会被丢弃。另外，通过 RabbitMQ 集群的特性，可以很好的解决单点故障问题，不会因为单个节点挂掉导致延时队列不可用或者消息丢失。<br>当然，延时队列还有很多其它选择，比如利用 Java 的 DelayQueue，利用 Redis 的 zset，利用 Quartz<br>或者利用 kafka 的时间轮，这些方式各有特点,看需要适用的场景<br>:::</p><h1 id="高级发布确认"><a href="#高级发布确认" class="headerlink" title="高级发布确认"></a>高级发布确认</h1><blockquote><p>在生产环境中由于一些不明原因，导致 rabbitmq 重启，在 RabbitMQ 重启期间生产者消息投递失败，导致消息丢失，需要手动处理和恢复。于是，我们开始思考，如何才能进行 RabbitMQ 的消息可靠投递呢？ 特别是在这样比较极端的情况，RabbitMQ 集群不可用的时候，无法投递的消息该如何处理呢:<br>应用发 生错 误 日 志 异  alertId&#x3D;[xxx] 。<br>由[org.springframework.amqp.rabbit.listener.BlockingQueueConsumer:start:620]触发。<br>应用 xxx 可能原因如下服务名为：异 常 为 ： org.springframework.amqp.rabbit.listener.BlockingQueueConsumer:start:620,<br>产 生 原 因 如 下 :1.org.springframework.amqp.rabbit.listener.QueuesNotAvailableException:<br>Cannot prepare queue for listener. Either the queue doesn’t exist or the broker will not<br>allow us to use it.||Consumer received fatal&#x3D;false exception on startup:<br>（这里的高级发布确认和上面的发布确认是不同的，上面的发布确认是确保消息不丢失，这里的高级发布确认是交换机和队列宕机之后，确保消息不丢失。）</p><h2 id="确认机制方案"><a href="#确认机制方案" class="headerlink" title="确认机制方案"></a>确认机制方案</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/78rabbitmq.png#id=lOI1J&originHeight=238&originWidth=755&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="代码架构图-3"><a href="#代码架构图-3" class="headerlink" title="代码架构图"></a>代码架构图</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/79rabbitmq.png#id=fIcG8&originHeight=152&originWidth=740&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.deng.gan.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月20日 9:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ConfirmConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> *      发布确认高级 配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfirmConfig</span> &#123;</span><br><span class="line">    <span class="comment">//交换机、队列、routingKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIRM_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;confirm_exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIRM_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;confirm_queue&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIRM_ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;key1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;confirmExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">confirmExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(CONFIRM_EXCHANGE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;confirmQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">confirmQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">queueBindingExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;confirmQueue&quot;)</span> Queue confirmQueue,</span></span><br><span class="line"><span class="params">                                        <span class="meta">@Qualifier(&quot;confirmExchange&quot;)</span> DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(confirmQueue).to(directExchange).with(CONFIRM_ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.deng.gan.controler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.deng.gan.config.ConfirmConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月20日 10:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ProducerControler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:        发布确认高级发消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/confirm&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerControler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMessage/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,ConfirmConfig.CONFIRM_ROUTING_KEY,message);</span><br><span class="line">        log.info(<span class="string">&quot;发送消息内容：&#123;&#125;&quot;</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.deng.gan.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.deng.gan.config.ConfirmConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月20日 16:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ConfirmConsumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:    发布确认高级  监听</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfirmConsumer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = ConfirmConfig.CONFIRM_QUEUE_NAME)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMsg</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody());</span><br><span class="line">        log.info(<span class="string">&quot;接受到队列 confirm.queue消息:&#123;&#125;&quot;</span>,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的就是发布确认的springboot版本，和之前写的发布确认是一样的效果。<br>启动之后访问 localhost:8080&#x2F;confirm&#x2F;sendMessage&#x2F;{message}<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/80rabbitmq.png#id=xPDQC&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>发布确认高级<br>添加yml配置 spring.rabbitmq.publisher-confirm-type&#x3D;<em>correlated</em><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/81rabbitmq.png#id=u8P5h&originHeight=178&originWidth=716&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.deng.gan.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月21日 9:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyCallBack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:       回调接口，</span></span><br><span class="line"><span class="comment"> *            调用rabbitTemplate里的confirmCallback接口来确认消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallBack</span> <span class="keyword">implements</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成mycallback的注入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机确认回调方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> correlationData   保存回调消息的ID及相关信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ack     交换机收到的消息 ack = true成功 ack = fales失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause      cause 成功/失败的原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">        String id=correlationData!=<span class="literal">null</span>?correlationData.getId():<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(ack)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;交换机已经收到 id 为:&#123;&#125;的消息&quot;</span>,id);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;交换机还未收到 id 为:&#123;&#125;消息,由于原因:&#123;&#125;&quot;</span>,id,cause);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动访问<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/82rabbitmq.png#id=eALfS&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>下面模拟交换机宕机，就是在生产者修改交换机名称，模拟找不到宕机了；然后启动访问。<br>可添加ID标识，ID的添加可点击convertAndSend()方法里查看。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/83rabbitmq.png#id=Ih8OQ&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/84rabbitmq.png#id=Ect6G&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>下面模拟队列宕机，启动访问<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/85rabbitmq.png#id=AvBLp&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>消息并没有被消费者接收。（存有疑问：这里就不能像上面一样报个错？往下面学）<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/86rabbbitmq.png#id=BgmLy&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>:::success</p><h3 id="回退消息"><a href="#回退消息" class="headerlink" title="回退消息"></a>回退消息</h3><p><strong>在仅开启了生产者确认机制的情况下，交换机接收到消息后，会直接给消息生产者发送确认消息</strong>，<strong>如</strong><br><strong>果发现该消息不可路由（找不到key或找不到队列），那么消息会被直接丢弃，此时生产者是不知道消息被丢弃这个事件的</strong>。那么如何让无法被路由的消息帮我想办法处理一下？最起码通知我一声，我好自己处理啊。通过设置 mandatory回调参数可以在当消息传递过程中不可达目的地时将消息返回给生产者。（和上面的一样，不过是实现RabbitTemplate里的另一个接口）<br>:::</p><p>添加yml配置spring.rabbitmq.publisher-returns&#x3D;true<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/87rabbitmq.png#id=EvGHq&originHeight=223&originWidth=711&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.deng.gan.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月21日 9:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyCallBack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:       回调接口，</span></span><br><span class="line"><span class="comment"> *            调用rabbitTemplate里的confirmCallback接口来确认消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallBack</span> <span class="keyword">implements</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback,RabbitTemplate.ReturnCallback &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成mycallback的注入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="built_in">this</span>);</span><br><span class="line">        rabbitTemplate.setReturnCallback(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机  确认回调方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> correlationData   保存回调消息的ID及相关信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ack     交换机收到的消息 ack = true成功 ack = fales失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause      cause 成功/失败的原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">        String id=correlationData!=<span class="literal">null</span>?correlationData.getId():<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(ack)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;交换机已经收到 id 为:&#123;&#125;的消息&quot;</span>,id);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;交换机还未收到 id 为:&#123;&#125;消息,由于原因:&#123;&#125;&quot;</span>,id,cause);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  消息   回调接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message   消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> replyCode     回复代码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> replyText     回复文本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange      交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> routingKey    绑定routingKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(Message message, <span class="type">int</span> replyCode, String replyText, String exchange, String routingKey)</span> &#123;</span><br><span class="line"></span><br><span class="line">        log.error(<span class="string">&quot;消息：&#123;&#125;，被交换机&#123;&#125;退回，退回原因&#123;&#125;，路由key&#123;&#125;&quot;</span>,<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()),exchange,replyText,routingKey);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再试试给个错误的routingKey，模拟宕机。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/88rabbitmq.png#id=feJfk&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>:::success</p><h2 id="备份交换机"><a href="#备份交换机" class="headerlink" title="备份交换机"></a>备份交换机</h2><p>有了 mandatory 参数和回退消息，我们获得了对无法投递消息的感知能力，有机会在生产者的消息<br>无法被投递时发现并处理。但有时候，我们并不知道该如何处理这些无法路由的消息，最多打个日志然<br>后触发报警，再来手动处理。而通过日志来处理这些无法路由的消息是很不优雅的做法，特别是当生产者所在的服务有多台机器的时候，手动复制日志会更加麻烦而且容易出错。而且设置 mandatory 参数会增加生产者的复杂性，需要添加处理这些被退回的消息的逻辑。如果既不想丢失消息，又不想增加生产者的复杂性，该怎么做呢？前面在设置死信队列的文章中，我们提到，<strong>可以为队列设置死信交换机来存储那些处理失败的消息，可是这些不可路由消息根本没有机会进入到队列，因此无法使用死信队列来保存消息。</strong><br>在 RabbitMQ 中，有一种备份交换机的机制存在，可以很好的应对这个问题。什么是备份交换机呢？备份交换机可以理解为 RabbitMQ 中交换机的“备胎”，当我们为某一个交换机声明一个对应的备份交换机时，就是<strong>为它创建一个备胎，当交换机接收到一条不可路由消息时，将会把这条消息转发到备份交换机中，由备份交换机来进行转发和处理</strong>，通常备份交换机的类型为 Fanout ，这样就能把所有消息都投递到与其绑定的队列中，然后我们在备份交换机下绑定一个队列，这样所有那些原交换机无法被路由的消息，就会都进入这个队列了。当然，我们还可以建立一个报警队列，用独立的消费者来进行监测和报警。</p><h3 id="代码架构图-4"><a href="#代码架构图-4" class="headerlink" title="代码架构图"></a>代码架构图</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/89rabbitmq.png#id=WGmYT&originHeight=274&originWidth=792&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>根据上面的代码结构，我们在现有的基础上添加交换机（backup.exchange），然后因为type类型是fanout,不管如何routingKey都会收到消息这俩个队列，后面就只写了一个消费者（监听）（不是因为我懒，尚硅谷就是这样写的)。<br>代码：在_发布确认高级 配置_ConfirmConfig中添加交换机backup、队列backup和队列warning；注意要添加上面交换机和备用交换机的关系<br>:::</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.deng.gan.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月20日 9:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ConfirmConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> *      发布确认高级 配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfirmConfig</span> &#123;</span><br><span class="line">    <span class="comment">//交换机、队列、routingKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIRM_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;confirm_exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIRM_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;confirm_queue&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIRM_ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;key1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明交换机     (并绑定备份交换机，进行durable(true)持久化操作，会有冲突，需删除之前声明的交换机)</span></span><br><span class="line">    <span class="meta">@Bean(&quot;confirmExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">confirmExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.directExchange(CONFIRM_EXCHANGE_NAME).durable(<span class="literal">true</span>)</span><br><span class="line">                .withArgument(<span class="string">&quot;alternate-exchange&quot;</span>,BACKUP_EXCHANGE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;confirmQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">confirmQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">queueBindingExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;confirmQueue&quot;)</span> Queue confirmQueue,</span></span><br><span class="line"><span class="params">                                        <span class="meta">@Qualifier(&quot;confirmExchange&quot;)</span> DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(confirmQueue).to(directExchange).with(CONFIRM_ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 备份交换机</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BACKUP_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;backup_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//备份队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BACKUP_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;backup_queue&quot;</span>;</span><br><span class="line">    <span class="comment">//报警对列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WARNING_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;warning_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;fanoutBackupExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutBackupExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(BACKUP_EXCHANGE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(&quot;backupQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">backupQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(BACKUP_QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(&quot;warningQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">warningQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(WARNING_QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">backupQueueBindingBackupExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;backupQueue&quot;)</span> Queue confirmQueue,</span></span><br><span class="line"><span class="params">                                        <span class="meta">@Qualifier(&quot;fanoutBackupExchange&quot;)</span> FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(confirmQueue).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">warningQueuebackupBindingBackupExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;warningQueue&quot;)</span> Queue confirmQueue,</span></span><br><span class="line"><span class="params">                                                    <span class="meta">@Qualifier(&quot;fanoutBackupExchange&quot;)</span> FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(confirmQueue).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.deng.gan.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.deng.gan.config.ConfirmConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022年09月21日 14:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: WarningConsumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:      备份交换机消费者 （监听）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WarningConsumer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = ConfirmConfig.WARNING_QUEUE_NAME)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">warningMsg</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody());</span><br><span class="line">        log.info(<span class="string">&quot;报警发现不可路由消息:&#123;&#125;&quot;</span>,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟队列宕机，启动访问（注意：上面对交换机进行了持久化操作，会与已存在的交换机冲突，可以删掉重新声明。以下是我的报错，去可视化网页<a href="http://localhost:15672/">http://localhost:15672/</a>删掉confirm_exchange交换机重新声明就行了）</p><blockquote><p>Shutdown Signal: channel error; protocol method: #method&lt;channel.close&gt;(reply-code&#x3D;406, reply-text&#x3D;PRECONDITION_FAILED - inequivalent arg ‘alternate-exchange’ for exchange ‘confirm_exchange’ in vhost ‘&#x2F;‘: received the value ‘backup_exchange’ of type ‘longstr’ but current is none, class-id&#x3D;40, method-id&#x3D;10)</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/90rabbitmq.png#id=IQGoi&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="RabbitMQ-其他知识点"><a href="#RabbitMQ-其他知识点" class="headerlink" title="RabbitMQ 其他知识点"></a>RabbitMQ 其他知识点</h1><blockquote><h2 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。<br>举个最简单的例子，那就是支付，用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额发现多扣钱了，流水记录也变成了两条。在以前的单应用系统中，我们只需要把数据操作放入事务中即可，发生错误立即回滚，但是再响应客户端的时候也有可能出现网络中断或者异常等等。</p><h4 id="消息重复消费"><a href="#消息重复消费" class="headerlink" title="消息重复消费"></a>消息重复消费</h4><p>消费者在消费 MQ 中的消息时，MQ 已把消息发送给消费者，消费者在给MQ 返回 ack 时网络中断，<br>故 MQ 未收到确认信息，该条消息会重新发给其他的消费者，或者在网络重连后再次发送给该消费者，但实际上该消费者已成功消费了该条消息，造成消费者消费了重复的消息。</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>在海量订单生成的业务高峰期，生产端有可能就会重复发生了消息，这时候消费端就要实现<strong>幂等性</strong>，<br>这就意味着我们的消息永远不会被消费多次，即使我们收到了一样的消息。业界主流的幂等性有两种操作:a.唯一 ID+指纹码机制,利用数据库主键去重, b.利用 redis 的原子性去实现</p><h4 id="唯一ID-指纹码机制"><a href="#唯一ID-指纹码机制" class="headerlink" title="唯一ID+指纹码机制"></a>唯一ID+指纹码机制</h4><p>指纹码:我们的一些规则或者时间戳加别的服务给到的唯一信息码,它并不一定是我们系统生成的，基<br>本都是由我们的业务规则拼接而来，但是一定要保证唯一性，然后就利用查询语句进行判断这个 id 是否存在数据库中,优势就是实现简单就一个拼接，然后查询判断是否重复；劣势就是在高并发时，如果是单个数据库就会有写入性能瓶颈当然也可以采用分库分表提升性能，但也不是我们最推荐的方式。</p><h4 id="Redis-原子性"><a href="#Redis-原子性" class="headerlink" title="Redis 原子性"></a>Redis 原子性</h4><p>利用 redis 执行 setnx 命令，天然具有幂等性。从而实现不重复消费（推荐使用）</p></blockquote><h1 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h1><p>:::info</p><h2 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h2><p>在我们系统中有一个<strong>订单催付</strong>的场景，我们的客户在天猫下的订单,淘宝会及时将订单推送给我们，如<br>果在用户设定的时间内未付款那么就会给用户推送一条短信提醒，很简单的一个功能对吧，但是，tmall商家对我们来说，肯定是要<strong>分大客户和小客户</strong>的对吧，比如像苹果，小米这样大商家一年起码能给我们创造很大的利润，所以理应当然，他们的订单必须得到<strong>优先处理</strong>，而曾经我们的后端系统是使用 redis 来存放的定时轮询，大家都知道 redis 只能用 List 做一个简简单单的消息队列，并不能实现一个优先级的场景，所以订单量大了后采用 RabbitMQ 进行改造和优化,如果发现是大客户的订单给一个相对比较高的优先级，否则就是默认优先级。</p><h2 id="如何添加"><a href="#如何添加" class="headerlink" title="如何添加"></a>如何添加</h2><p>a.控制台页面添加<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/91rabbitmq.png#id=ytiMy&originHeight=498&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>b.队列中代码添加优先级<br>也就是修改一下以前的代码。<br>:::</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> deng.optimized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.AMQP;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者：发消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shayu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>  2022/09/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line">    <span class="comment">// 消息的队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;optimized_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建连接的工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//工厂IP连接Rabbit MQ的队列</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        <span class="comment">//用户名</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="comment">//密码</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span>  factory.newConnection();</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个队列(queueDeclare参数解析)</span></span><br><span class="line"><span class="comment">         * 1.队列名称</span></span><br><span class="line"><span class="comment">         * 2.队列里面的消息是否持久化 默认消息存储在内存中</span></span><br><span class="line"><span class="comment">         * 3.该队列是否只供一个消费者进行消费 是否进行共享 true可以多个消费者消费</span></span><br><span class="line"><span class="comment">         * 4.是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true 自动删除</span></span><br><span class="line"><span class="comment">         * 5.其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, Object&gt; arguments = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        arguments.put(<span class="string">&quot;x-max-priority&quot;</span>,<span class="number">10</span>);  <span class="comment">//官方允许0-255 此处设置10  允许优先级范围为0-10  不要设置过大浪费cup和内存</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,arguments);</span><br><span class="line">        <span class="comment">//发消息</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 发送一个消息（basicPublish参数解析）</span></span><br><span class="line"><span class="comment">         * 1.发送到那个交换机</span></span><br><span class="line"><span class="comment">         * 2.路由的 key是哪个 本次队列的名称</span></span><br><span class="line"><span class="comment">         * 3.其他的参数信息</span></span><br><span class="line"><span class="comment">         * 4.发送消息的消息体</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;info&quot;</span> + i;</span><br><span class="line">            <span class="keyword">if</span> (i ==<span class="number">5</span>)&#123;</span><br><span class="line">                AMQP.<span class="type">BasicProperties</span> <span class="variable">basicProperties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties().builder().priority(<span class="number">5</span>).build();</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,basicProperties,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="literal">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/92rabbitma.png#id=KaD7J&originHeight=498&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>:::info</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>要让队列实现优先级需要做的事情有如下事情:<br>队列需要设置为优先级队列，消息需要设置消息的优先级，消费者需要等待消息已经发送到队列中才去消费因为，这样才有机会对消息进行排序。（不清楚不太懂）<br>:::</p><h1 id="惰性队列"><a href="#惰性队列" class="headerlink" title="惰性队列"></a>惰性队列</h1><p>:::success<br>RabbitMQ 从 3.6.0 版本开始引入了惰性队列的概念。惰性队列会尽可能的将消息存入磁盘中，而在消<br>费者消费到相应的消息时才会被加载到内存中，它的一个重要的设计目标是能够支持更长的队列，即支持更多的消息存储。当消费者由于各种各样的原因(比如消费者下线、宕机亦或者是由于维护而关闭等)而致使长时间内不能消费消息造成堆积时，惰性队列就很有必要了。<br>默认情况下，当生产者将消息发送到 RabbitMQ 的时候，队列中的消息会尽可能的存储在内存之中，<br>这样可以更加快速的将消息发送给消费者。即使是持久化的消息，在被写入磁盘的同时也会在内存中驻留一份备份。当 RabbitMQ 需要释放内存的时候，会将内存中的消息换页至磁盘中，这个操作会耗费较长的时间，也会阻塞队列的操作，进而无法接收新的消息。虽然 RabbitMQ 的开发者们一直在升级相关的算法，但是效果始终不太理想，尤其是在消息量特别大的时候。<br>队列具备两种模式：default 和 lazy。默认的为default 模式，在3.6.0 之前的版本无需做任何变更。lazy模式即为惰性队列的模式，可以通过调用 channel.queueDeclare 方法的时候在参数中设置，也可以通过Policy 的方式设置，如果一个队列同时使用这两种方式设置的话，那么 Policy 的方式具备更高的优先级。<br>如果要通过声明的方式改变已有队列的模式的话，那么只能先删除队列，然后再重新声明一个新的。<br>在队列声明的时候可以通过“x-queue-mode”参数来设置队列的模式，取值为“default”和“lazy”。下面示例中演示了一个惰性队列的声明细节：<br>Map&lt;String, Object&gt; args &#x3D; new HashMap&lt;String, Object&gt;();<br>args.put(“x-queue-mode”, “lazy”);<br>channel.queueDeclare(“myqueue”, false, false, false, args);<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/93rabbitmq.png#id=Up5ra&originHeight=498&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="内存开销对比"><a href="#内存开销对比" class="headerlink" title="内存开销对比"></a>内存开销对比</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/94rabbitmq.png#id=exuuE&originHeight=494&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>在发送 1 百万条消息，每条消息大概占 1KB 的情况下，普通队列占用内存是 1.2GB，而惰性队列仅仅<br>占用 1.5MB.<br>:::</p><h1 id="RabbitMQ集群"><a href="#RabbitMQ集群" class="headerlink" title="RabbitMQ集群"></a>RabbitMQ集群</h1><p>（上当了，前面就应该用Linux的；😭）<br><a href="https://blog.csdn.net/xhmico/article/details/122505951?ops_request_misc=%7B%22request_id%22:%22166389578616800180651835%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166389578616800180651835&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-122505951-null-null.142%5Ev50%5Econtrol,201%5Ev3%5Econtrol_2&utm_term=%E8%99%9A%E6%8B%9F%E6%9C%BA&spm=1018.2226.3001.4187"><strong>虚拟机-安装与使用（详细教程）_多加点辣也没关系的博客-CSDN博客_虚拟机怎么安装</strong></a></p><p>VMware激活密钥（通用批量永久激活许可） 16：ZF3R0-FHED2-M80TY-8QYGC-NPKYF 15：FC7D0-D1YDL-M8DXZ-CYPZE-P2AY6 12：ZC3TK-63GE6-481JY-WWW5T-Z7ATA 10：1Z0G9-67285-FZG78-ZL3Q2-234JG</p><blockquote><p><strong>使用集群的原因</strong><br>最开始我们介绍了如何安装及运行 RabbitMQ 服务，不过这些是单机版的，无法满足目前真实应用的<br>要求。如果 RabbitMQ 服务器遇到内存崩溃、机器掉电或者主板故障等情况，该怎么办？单台RabbitMQ 服务器可以满足每秒 1000 条消息的吞吐量，那么如果应用需要 RabbitMQ 服务满足每秒 10 万条消息的吞吐量呢？购买昂贵的服务器来增强单机 RabbitMQ 务的性能显得捉襟见肘，搭建一个 RabbitMQ 集群才是 解决实际问题的关键。<br><strong>搭建步骤</strong><br>关机centOS，克隆两台出来<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/95rabbitmq.png#id=QKVNf&originHeight=880&originWidth=703&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/96rabbitmq.png#id=AWIQ4&originHeight=527&originWidth=671&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/97rabbitmq.png#id=qdvAN&originHeight=533&originWidth=1152&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>启动3台机器，修改 3 台机器的主机名称 ，:wq保存退出。reboot 重启生效。<br>vim &#x2F;etc&#x2F;hostname<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/98rabbitmq.png#id=fP5sO&originHeight=187&originWidth=638&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/99rabbitmq.png#id=T4uu9&originHeight=216&originWidth=686&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>输出ip addr<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/100rabbitmq.png#id=yOKsT&originHeight=469&originWidth=1050&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>出现一下的问题，需要配置静态ip。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/101rabbitmq.png#id=pASga&originHeight=535&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>可看下面我自己有做的这篇Linux文章的网络配置。</p></blockquote><p><a href="https://www.yuque.com/shayushitiande/9527/kor3r3?view=doc_embed&inner=viAt7"><strong><em>Linux（尚硅谷）</em></strong></a></p><blockquote><p>vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/102rabbitmq.png#id=f2AgQ&originHeight=915&originWidth=1605&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>service network restart修改完成之后重启一下网络就可以了。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/103rabbitmq.png#id=Lf7ub&originHeight=918&originWidth=1605&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>在就可以远程连接到三台虚拟机了。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/104rabbitmq.png#id=FqscW&originHeight=844&originWidth=1296&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>配置各个节点的 hosts 文件，让各个节点都能互相识别对方。三个虚拟机里都要配置。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/105rabbitmq.png#id=jX2j0&originHeight=694&originWidth=973&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>rabbitMQ集群，要确保各个节点的 cookie 文件使用的是同一个值<br>在 node1 上执行远程操作命令<br>scp &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie root@rabbitmq101:&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie<br>scp &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie root@rabbitmq102:&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/106rabbitmq.png#id=t9Wxg&originHeight=695&originWidth=973&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>4.启动 RabbitMQ 服务,顺带启动 Erlang 虚拟机和 RbbitMQ 应用服务(在三台节点上分别执行以 下命令)<br>rabbitmq-server -detached<br>（下面我调了很久，重新试了上面cookie 文件的添加，防火墙的配置，hosts确认，rabbitservice是否启动。每次都到最后一步连接不了，最后查看是因为防火墙没关。😭最好都关了。记得添加admin用户最好都要。）<br>5.在节点 2 rabbitmq101 执行<br>rabbitmqctl stop_app <br>(rabbitmqctl stop 会将Erlang 虚拟机关闭，rabbitmqctl stop_app 只关闭 RabbitMQ 服务)<br>rabbitmqctl reset （重置rabbitmq）<br>rabbitmqctl join_cluster rabbit<a href="/rabbitmq100">@rabbitmq100 </a><br>rabbitmqctl start_app(只启动应用服务)<br>报错：rabbitmq100没关防火墙<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/107rabbitmq.png#id=BcGdn&originHeight=92&originWidth=1448&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>6.在节点 rabbitmq102 执行<br>rabbitmqctl stop_app<br>rabbitmqctl reset<br>rabbitmqctl join_cluster rabbit<a href="/rabbitmq101">@rabbitmq101 </a><br>rabbitmqctl start_app<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/108rabbitmq.png#id=WQRM7&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/109rabbitmq.png#id=aCgcT&originHeight=714&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote><h1 id="镜像队列"><a href="#镜像队列" class="headerlink" title="镜像队列"></a>镜像队列</h1><blockquote><p>如果 RabbitMQ 集群中只有一个 Broker 节点，那么该节点的失效将导致整体服务的临时性不可用，并<br>且也可能会导致消息的丢失。可以将所有消息都设置为持久化，并且对应队列的durable属性也设置为true，但 是这样仍然无法避免由于缓存导致的问题：因为消息在发送之后和被写入磁盘井执行刷盘动作之间存在一 个短暂却会产生问题的时间窗。通过 publisherconfirm 机制能够确保客户端知道哪些消息己经存入磁盘，尽 管如此，一般不希望遇到因单点故障导致的服务不可用。<br>引入镜像队列(Mirror Queue)的机制，可以将队列镜像到集群中的其他 Broker 节点之上，如果集群中<br>的一个节点失效了，队列能自动地切换到镜像中的另一个节点上以保证服务的可用性。</p><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><p>例如：我发送一个消息（之前写的最简单的生产者），他会生产一个队列，node节点是rabbitmq100的，那当rabbitmq挂了，消息就会丢失，所以需要做个镜像队列，保证消息的不丢失。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/110rabbitmq.png#id=UWIsQ&originHeight=343&originWidth=640&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/111rabbitmq.png#id=wxPd1&originHeight=675&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><p>1.启动三台集群节点<br>2.随便找一个节点添加 policy<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/112rabbitmq.png#id=ysuGS&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>点击添加就好了。<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/113rabbitmq.png#id=GqDqd&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>然后再去启动生产者，队列就会产生镜像队列，MQ挂断了也不会丢失消息。停掉 rabbitmq100 之后发现 rabbitmq102 成为镜像队列；就算整个集群只剩下一台机器了 依然能消费队列里面的消息 说明队列里面的消息被镜像队列传递到相应机器里面了。<br>关闭命令（在相应的虚拟机里关闭）rabbitmqctl stop_app<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/114rabbitmq.png#id=XTiIP&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/115rabbitmq.png#id=HeOMg&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote><h1 id="Haproxy-Keepalive-实现高可用负载均衡"><a href="#Haproxy-Keepalive-实现高可用负载均衡" class="headerlink" title="Haproxy+Keepalive 实现高可用负载均衡"></a>Haproxy+Keepalive 实现高可用负载均衡</h1><p>这些属于负载均衡方面，尚硅谷有漏了一集，但我之弄好haproxy。😭<br> 下面的三个插件我也没有去实操，简单看了一下。</p><p><a href="%5Bhttps://blog.csdn.net/qq_60200126/article/details/120457690?ops_request_misc=%7B%22request_id%22:%22166685516616782417065832%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=166685516616782417065832&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2%5D(https://blog.csdn.net/qq_60200126/article/details/120457690?ops_request_misc=%7B%22request_id%22:%22166685516616782417065832%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=166685516616782417065832&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2"><strong>Linux企业运维——haproxy负载均衡_已认证运维工程师的博客-CSDN博客</strong></a>allfirst_rank_ecpm_v1~times_rank-8-120457690-null-null.142v62pc_search_tree,201v3control_2,213v1t3_esquery_v2&amp;utm_term&#x3D;Haproxy 实现负载均衡linux&amp;spm&#x3D;1018.2226.3001.4187):::success</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/116rabbitmq.png#id=SyCee&originHeight=238&originWidth=312&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></h3><p>生产者只认识node1，不认识其他的，node1挂了，生产者继续发消息就会造成消息丢失。</p><h3 id="Haproxy-实现负载均衡"><a href="#Haproxy-实现负载均衡" class="headerlink" title="Haproxy 实现负载均衡"></a>Haproxy 实现负载均衡</h3><p>HAProxy 提供高可用性、负载均衡及基于TCPHTTP 应用的代理，支持虚拟主机，它是免费、快速并<br>且可靠的一种解决方案，包括 Twitter,Reddit,StackOverflow,GitHub 在内的多家知名互联网公司在使用。<br>HAProxy 实现了一种事件驱动、单一进程模型，此模型支持非常大的井发连接数。<br>扩展: <strong>nginx,lvs,haproxy</strong> 之间的区别: <a href="http://www.ha97.com/5646.html">http://www.ha97.com/5646.html</a></p><h3 id="Keepalived-实现双机-主备-热备"><a href="#Keepalived-实现双机-主备-热备" class="headerlink" title="Keepalived 实现双机(主备)热备"></a>Keepalived 实现双机(主备)热备</h3><p>试想如果前面配置的 HAProxy 主机突然宕机或者网卡失效，那么虽然 RbbitMQ 集群没有任何故障但是 对于外界的客户端来说所有的连接都会被断开结果将是灾难性的为了确保负载均衡服务的可靠性同样显得 十分重要，这里就要引入 Keepalived 它能够通过自身健康检查、资源接管功能做高可用(双机热备)，实现 故障转移<br>!<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/117rabbitmq.png#id=hCpXS&originHeight=604&originWidth=883&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><strong>Haproxy搭建步骤</strong><br>1.下载 haproxy(在 node1 和 node2)<br>yum -y install haproxy<br>2.修改 node1 和 node2 的 haproxy.cfg<br>vim &#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/118rabbitmq.png#id=NCx3k&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>3.在两台节点启动 haproxy<br>haproxy -f &#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg<br>ps -ef | grep haproxy<br>4.访问地址<br><a href="http://192.168.48.100/status">http://192.168.48.100:80/status</a><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/shayu931/119rabbitmq.png#id=OXQhi&originHeight=502&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="Keepalived-搭建步骤"><a href="#Keepalived-搭建步骤" class="headerlink" title="Keepalived 搭建步骤"></a>Keepalived <strong>搭建步骤</strong></h3><p>这个我不会弄了，大家可以看看下面这篇文章。</p><p><a href="%5Bhttps://blog.csdn.net/weixin_38889300/article/details/120793353?ops_request_misc=%7B%22request_id%22:%22166685516616782417065832%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=166685516616782417065832&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2%5D(https://blog.csdn.net/weixin_38889300/article/details/120793353?ops_request_misc=%7B%22request_id%22:%22166685516616782417065832%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=166685516616782417065832&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2"><strong>用 Keepalived+HAProxy 实现高可用负载均衡的配置方法_开源Linux的博客-CSDN博客</strong></a>allfirst_rank_ecpm_v1~times_rank-7-120793353-null-null.142v62pc_search_tree,201v3control_2,213v1t3_esquery_v2&amp;utm_term&#x3D;Haproxy 实现负载均衡linux&amp;spm&#x3D;1018.2226.3001.4187):::</p><h1 id="Federation-Exchange"><a href="#Federation-Exchange" class="headerlink" title="Federation Exchange"></a>Federation Exchange</h1><p>:::warning</p><h3 id="使用它的原因"><a href="#使用它的原因" class="headerlink" title="使用它的原因"></a>使用它的原因</h3><p>(broker 北京)，(broker 深圳)彼此之间相距甚远，网络延迟是一个不得不面对的问题。有一个在北京的业务(Client 北京) 需要连接(broker 北京)，向其中的交换器 exchangeA 发送消息，此时的网络延迟很小，(Client 北京)可以迅速将消息发送至 exchangeA 中，就算在开启了 publisherconfirm 机制或者事务机制的情况下，也可以迅速收到确认信息。此时又有个在深圳的业务(Client 深圳)需要向 exchangeA 发送消息， 那么(Client 深圳) (broker 北京)之间有很大的网络延迟，(Client 深圳) 将发送消息至 exchangeA 会经历一定的延迟，尤其是在开启了 publisherconfirm 机制或者事务机制的情况下，(Client 深圳) 会等待很长的延迟时间来接收(broker 北京)的确认信息，进而必然造成这条发送线程的性能降低，甚至造成一定程度上的阻塞。<br>将业务(Client 深圳)部署到北京的机房可以解决这个问题，但是如果(Client 深圳)调用的另些服务都部署在深圳，那么又会引发新的时延问题，总不见得将所有业务全部部署在一个机房，那么容灾又何以实现？ 这里使用 Federation 插件就可以很好地解决这个问题。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1666859337555-935aff47-4e39-442e-a8a5-12dc1c5cd9e9.png#clientId=u0c645461-8d70-4&crop=0&crop=0&crop=1&crop=1&id=nkzlx&originHeight=732&originWidth=765&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ua958851d-2783-4692-94d3-9461c0208d4&title=#averageHue=%23fbfbfb&id=Clvg6&originHeight=732&originWidth=765&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="搭建步骤-1"><a href="#搭建步骤-1" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><ol><li>保证每台节点单独运行</li><li>在每台机器上开启 federation 相关插件<br>:::</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_federation</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_federation_management</span><br></pre></td></tr></table></figure><p>:::warning<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1666859337683-a34b2ae9-2fca-4751-976c-4c1867fcca1d.png#clientId=u0c645461-8d70-4&crop=0&crop=0&crop=1&crop=1&id=o1FyK&originHeight=141&originWidth=397&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u77ad0fc0-de8c-432f-a9b1-a1b4e0ab6bb&title=#averageHue=%23f5f3f0&id=bCmUR&originHeight=141&originWidth=397&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ol start="3"><li>原理图(先运行 consumer 在 node2 创建 fed_exchange)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1666859337644-e7234f15-594b-453a-9306-2907290a961c.png#clientId=u0c645461-8d70-4&crop=0&crop=0&crop=1&crop=1&id=IMY8K&originHeight=789&originWidth=906&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=uf370a972-d438-4cdc-8729-0ec11aba320&title=#averageHue=%23f5f5f4&id=Gf4l0&originHeight=789&originWidth=906&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ol start="4"><li>在 downstream(node2)配置 upstream(node1)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1666859338080-550f4ffc-3eaf-45e1-b6d7-3dd4135425e6.png#clientId=u0c645461-8d70-4&crop=0&crop=0&crop=1&crop=1&id=rQHvl&originHeight=659&originWidth=1405&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ufce969b9-07b9-44db-a274-14c0e5afe11&title=#averageHue=%23fbfbfb&id=innkj&originHeight=659&originWidth=1405&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ol start="5"><li>添加policy</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1666859337560-005e52ec-fca1-416e-9032-9bac0ad57611.png#clientId=u0c645461-8d70-4&crop=0&crop=0&crop=1&crop=1&id=WzHzE&originHeight=737&originWidth=1094&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u74a6df31-c006-4c37-bafc-d7961594850&title=#averageHue=%23f5f2f1&id=UKw4N&originHeight=737&originWidth=1094&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ol start="6"><li>成功的前提</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1666859338203-3abeaf6a-2594-48c3-b0a1-fad0db793c88.png#clientId=u0c645461-8d70-4&crop=0&crop=0&crop=1&crop=1&id=CCVJq&originHeight=88&originWidth=1186&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ufa5ab999-2441-4650-8742-0266792382e&title=#averageHue=%23dcdcd7&id=Tm0sn&originHeight=88&originWidth=1186&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>:::</p><h1 id="Federation-Queue"><a href="#Federation-Queue" class="headerlink" title="Federation Queue"></a>Federation Queue</h1><p>:::warning</p><h3 id="使用它的原因-1"><a href="#使用它的原因-1" class="headerlink" title="使用它的原因"></a>使用它的原因</h3><p>联邦队列可以在多个 Broker 节点(或者集群)之间为单个队列提供均衡负载的功能。一个联邦队列可以连接一个或者多个上游队列(upstream queue)，并从这些上游队列中获取消息以满足本地消费者消费消息的需求。</p><h3 id="搭建步骤-2"><a href="#搭建步骤-2" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><ol><li>原理图</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1666859338327-9ac7ee75-f0b7-4855-a8f0-7a7b61fefdd7.png#clientId=u0c645461-8d70-4&crop=0&crop=0&crop=1&crop=1&id=cDvAA&originHeight=320&originWidth=1221&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u43b489ed-93f3-4b24-90dc-fe149e1a4a8&title=#averageHue=%23f6f6f5&id=QdFqx&originHeight=320&originWidth=1221&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ol start="2"><li>添加 upstream(同上)</li><li>添加policy</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1666859338530-f22ca3be-a7db-4f6e-8eca-ad79fceec944.png#clientId=u0c645461-8d70-4&crop=0&crop=0&crop=1&crop=1&id=E55Vc&originHeight=436&originWidth=960&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u6e02a944-2c9a-4dcd-bbc3-79aa2cdec2e&title=#averageHue=%23f7f3f2&id=p4zIu&originHeight=436&originWidth=960&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>:::</p><h1 id="Shovel"><a href="#Shovel" class="headerlink" title="Shovel"></a>Shovel</h1><blockquote><h3 id="使用它的原因-2"><a href="#使用它的原因-2" class="headerlink" title="使用它的原因"></a>使用它的原因</h3><p>Federation 具备的数据转发功能类似，Shovel 够可靠、持续地从一个 Broker 中的队列(作为源端，即source)拉取数据并转发至另一个 Broker 中的交换器(作为目的端，即 destination)。作为源端的队列和作为目的端的交换器可以同时位于同一个 Broker，也可以位于不同的 Broker 上。Shovel 可以翻译为”铲子”，是一种比较形象的比喻，这个”铲子”可以将消息从一方”铲子”另一方。Shovel 行为就像优秀的客户端应用程序能够负责连接源和目的地、负责消息的读写及负责连接失败问题的处理。</p><h3 id="搭建步骤-3"><a href="#搭建步骤-3" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><ol><li>开启插件（需要的机器都开启）</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_shovel</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_shovel_management</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1666859338535-4722999b-cf10-4f06-9b66-d8784856f2fa.png#clientId=u0c645461-8d70-4&crop=0&crop=0&crop=1&crop=1&id=WV3Le&originHeight=126&originWidth=321&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u5eae3344-db83-487f-9ec0-811a310005d&title=#averageHue=%23f5f3f0&id=W1VrD&originHeight=126&originWidth=321&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></blockquote><ol start="2"><li>原理图(在源头发送的消息直接回进入到目的地队列)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1666859339100-357e9567-2810-4452-bf8e-193c0b0dadbe.png#clientId=u0c645461-8d70-4&crop=0&crop=0&crop=1&crop=1&id=tecQK&originHeight=596&originWidth=999&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u8c1ed302-5b30-47b5-88c7-57a943cdda9&title=#averageHue=%23f9f9f8&id=xP9Qf&originHeight=596&originWidth=999&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><blockquote><ol start="3"><li>添加shovel源和目的地</li></ol></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26770555/1666859338957-2affeb47-f3df-4007-bf05-0f70235d6e0c.png#clientId=u0c645461-8d70-4&crop=0&crop=0&crop=1&crop=1&id=NB5qK&originHeight=641&originWidth=1113&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ua9f9aebb-bec7-45cb-b644-6a421a66450&title=#averageHue=%23fbfbfa&id=nmE6g&originHeight=641&originWidth=1113&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
